PROJECT CONTEXT

================
DIRECTORY STRUCTURE
================

kiddo-project
├── README.md
├── backend
│   └── api-docs.md
├── eslint.config.js
├── index.html
├── package.json
├── public
│   ├── manifest.json
│   └── vite.svg
├── src
│   ├── App.tsx
│   ├── api
│   │   ├── apiClient.ts
│   │   ├── authApi.ts
│   │   └── chatApi.ts
│   ├── api-chat-details.ts
│   ├── api-chat.ts
│   ├── api-teacher.ts
│   ├── api.ts
│   ├── assets
│   │   ├── fonts
│   │   │   ├── Yekan Bakh 3.1 Help Fa.pdf
│   │   │   ├── Yekan Bakh 3.1 Licenses.pdf
│   │   │   ├── Yekan Bakh Family
│   │   │   │   ├── otf
│   │   │   │   ├── ttf
│   │   │   │   └── webfonts
│   │   │   ├── Yekan Bakh NoEn
│   │   │   │   ├── otf
│   │   │   │   ├── ttf
│   │   │   │   └── webfonts
│   │   │   └── YekanBakhFaNum
│   │   │       ├── otf
│   │   │       ├── ttf
│   │   │       └── webfonts
│   │   ├── images
│   │   │   ├── DarsYar.png
│   │   │   ├── Kiddos.svg
│   │   │   ├── Vector.svg
│   │   │   ├── azmon.webp
│   │   │   ├── book.png
│   │   │   ├── class.webp
│   │   │   ├── dangerButton.svg
│   │   │   ├── darsyar.webp
│   │   │   ├── farsi.png
│   │   │   ├── happyFace.png
│   │   │   ├── happyface.webp
│   │   │   ├── header.png
│   │   │   ├── hediye.png
│   │   │   ├── heroSection.png
│   │   │   ├── konjkav.png
│   │   │   ├── konjkav.webp
│   │   │   ├── logos
│   │   │   │   ├── alienLogo.png
│   │   │   │   ├── emojiLogo.png
│   │   │   │   └── rocketLogo.png
│   │   │   ├── oloom.png
│   │   │   ├── recent.png
│   │   │   ├── regularBook.png
│   │   │   ├── reportsPage
│   │   │   │   ├── chat.png
│   │   │   │   ├── lesson.png
│   │   │   │   ├── report.png
│   │   │   │   ├── student.png
│   │   │   │   └── tool.png
│   │   │   ├── riazi.png
│   │   │   ├── smallhappyface.png
│   │   │   └── tarkibkon.webp
│   │   └── react.svg
│   ├── components
│   │   ├── RecentChats.tsx
│   │   └── common
│   │       ├── Chat.tsx
│   │       ├── ChatButton.tsx
│   │       ├── DisableChatButton.tsx
│   │       ├── Header.tsx
│   │       ├── LoadingIndicator.tsx
│   │       ├── RecentChatCard.tsx
│   │       ├── SuggestionChip.tsx
│   │       ├── SuggestionScroller.tsx
│   │       └── Toast.tsx
│   ├── constants
│   │   ├── azmonWelcomeConstant.tsx
│   │   ├── konjkavWelcomConstant.tsx
│   │   ├── studyAssistantConstant.tsx
│   │   └── tarkibkonWelcomeConstant.tsx
│   ├── hooks
│   │   ├── useChatSessions.ts
│   │   ├── useClientInfo.ts
│   │   └── useStudentChatSessions.ts
│   ├── index.css
│   ├── layout
│   │   └── ClassLayout.tsx
│   ├── login
│   │   ├── HeroSection.tsx
│   │   ├── InputGroup.tsx
│   │   ├── Login.tsx
│   │   └── LoginButton.tsx
│   ├── main.tsx
│   ├── router
│   │   └── index.tsx
│   ├── slice
│   │   ├── chatSlice.ts
│   │   ├── dangerStudentsSlice.ts
│   │   ├── darsyarSlice.ts
│   │   ├── konjkavSlice.ts
│   │   ├── tarkibkonSlice.ts
│   │   └── userSlice.ts
│   ├── store
│   │   └── index.ts
│   ├── student
│   │   ├── components
│   │   │   ├── darsYar
│   │   │   │   ├── chatWithBot
│   │   │   │   ├── lessonSelection
│   │   │   │   ├── recentChat
│   │   │   │   ├── studyAssistant
│   │   │   │   └── studySelection
│   │   │   ├── home
│   │   │   │   ├── Header.tsx
│   │   │   │   ├── HeroSection.tsx
│   │   │   │   ├── RecentItem.tsx
│   │   │   │   └── ToolCard.tsx
│   │   │   ├── konjKav
│   │   │   │   ├── recentChat
│   │   │   │   ├── studySelection
│   │   │   │   ├── topicSelection
│   │   │   │   └── welcome
│   │   │   └── tarkibKon
│   │   │       ├── chatBot
│   │   │       ├── favoriteTopic
│   │   │       ├── learnTopic
│   │   │       ├── recentChat
│   │   │       ├── studySelection
│   │   │       └── welcome
│   │   └── pages
│   │       ├── ResumeChatPage.tsx
│   │       ├── StudentHome.tsx
│   │       ├── darsYar
│   │       │   ├── DarsyarChatWithBot.tsx
│   │       │   ├── DarsyarLessonSelection.tsx
│   │       │   ├── DarsyarRecentChat.tsx
│   │       │   ├── DarsyarStudyAssistant.tsx
│   │       │   └── DarsyarStudySelection.tsx
│   │       ├── konjKav
│   │       │   ├── KonjkavRecentChat.tsx
│   │       │   ├── KonjkavStudySelection.tsx
│   │       │   ├── KonjkavTopicBot.tsx
│   │       │   ├── KonjkavTopicSelection.tsx
│   │       │   └── KonjkavWelcome.tsx
│   │       └── tarkibKon
│   │           ├── TarkibkonChatBot.tsx
│   │           ├── TarkibkonFavoriteTopic.tsx
│   │           ├── TarkibkonLearnTopic.tsx
│   │           ├── TarkibkonRecentChat.tsx
│   │           ├── TarkibkonStudySelection.tsx
│   │           └── TarkibkonWelcome.tsx
│   ├── teacher
│   │   ├── components
│   │   │   ├── contentContainer
│   │   │   │   ├── Modal.tsx
│   │   │   │   ├── Navbar.tsx
│   │   │   │   ├── StudentAlert.tsx
│   │   │   │   ├── chats
│   │   │   │   ├── reports
│   │   │   │   └── students
│   │   │   └── home
│   │   │       ├── Classes.tsx
│   │   │       ├── ProgressQuestion.tsx
│   │   │       ├── RecentChat.tsx
│   │   │       └── ToolCard.tsx
│   │   └── pages
│   │       ├── ClassChat.tsx
│   │       ├── ContentContainer.tsx
│   │       ├── ReportsPage.tsx
│   │       ├── StudentChat.tsx
│   │       └── TeacherHome.tsx
│   ├── types
│   │   ├── api.ts
│   │   ├── auth.ts
│   │   ├── chat.ts
│   │   ├── state.ts
│   │   └── user.ts
│   └── vite-env.d.ts
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
├── vite.config.ts
└── watch-context.js

================
FILE: package.json
================

```
{
  "name": "kiddo-project",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@lobehub/fluent-emoji": "^2.0.0",
    "@react-spring/web": "^10.0.1",
    "@reduxjs/toolkit": "^2.8.2",
    "@tailwindcss/vite": "^4.1.11",
    "@tanstack/react-query": "^5.82.0",
    "@use-gesture/react": "^10.3.1",
    "axios": "^1.10.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-draggable": "^4.5.0",
    "react-fluentui-emoji": "^1.2.1",
    "react-markdown": "^10.1.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.6.3",
    "remark-gfm": "^4.0.1",
    "tailwindcss": "^4.1.11"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "chokidar": "^4.0.3",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "glob": "^11.0.3",
    "globals": "^15.15.0",
    "tree-node-cli": "^1.6.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0",
    "vite-plugin-pwa": "^1.0.1"
  }
}

```

================
FILE: tsconfig.json
================

```
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

```

================
FILE: README.md
================

```
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
#   k i d d o 
 
 
```

================
FILE: src\vite-env.d.ts
================

```
/// <reference types="vite/client" />

```

================
FILE: src\main.tsx
================

```
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import { RouterProvider } from 'react-router-dom';
import { router } from './router';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { Provider } from 'react-redux';
import { store } from './store';
import { setupAxiosInterceptors, getMe } from './api';
import { setUser } from './slice/userSlice';

const queryClient = new QueryClient();

// Function to initialize the app state
const initializeApp = async () => {
  setupAxiosInterceptors();

  const token = localStorage.getItem('authToken');
  if (token) {
    try {
      // Fetch user data if token exists
      const userData = await getMe();
      store.dispatch(setUser(userData));
    } catch (error) {
      console.error("Failed to restore session:", error);
      // If getMe fails (e.g., expired token), the interceptor will handle logout.
    }
  }

  // Render the app after attempting to restore session
  createRoot(document.getElementById('root')!).render(
    <StrictMode>
       <QueryClientProvider client={queryClient}>
        <Provider store={store}>
          <RouterProvider router={router}/>
        </Provider>
      </QueryClientProvider>
    </StrictMode>,
  );
};

initializeApp();

// Register service worker for PWA
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js').catch(registrationError => {
      console.log('SW registration failed: ', registrationError);
    });
  });
}
```

================
FILE: src\index.css
================

```
@import "tailwindcss";
body {
  color: #161616 !important;
}
@font-face {
  font-family: "YekanBakh";
  src: url("./assets/fonts/YekanBakhFaNum/webfonts/woff/YekanBakhFaNum-Regular.woff")
    format("woff");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: "YekanBakhText";
  src: url("./assets/fonts/YekanBakhFaNum/webfonts/woff2/YekanBakhFaNum-ExtraBlack.woff2")
    format("woff");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@theme {
  --color-custom-purple: rgba(98, 72, 255, 1);
  --color-custom-orange-1: rgba(255, 107, 72, 1);
  --color-custom-orange-2: rgba(254, 76, 74, 1);
  --color-backGround-1: #f1f0ee;
  --color-borderColor-1: #dcdcdc;
  --color-chatButton-1: #6248ff;
  --color-backGroundButton: #4432b3;
  --color-backGroundCard: #f2efff;
  --color-backdrop: rgba(0, 0, 0, 0.2);
  /* Declare your custom font here */
  --font-yekanBakh: YekanBakh, sans-serif;
  --font-yekanBakhText: YekanBakhText, sans-serif;

  /* Your gradients are CSS variables, which is fine, but they don't directly create utility classes */
  --gradient-border-main: linear-gradient(
    to right,
    var(--color-custom-purple),
    var(--color-custom-orange-1)
  );
  --gradient-border-alt: linear-gradient(
    135deg,
    var(--color-custom-purple) 0%,
    var(--color-custom-orange-2) 100%
  );
}

.image-with-border {
  border: 2px solid #3498db; /* 2px solid blue border */
  padding: 5px; /* Optional: adds space between the image and the border */
  border-radius: 8px; /* Optional: rounds the corners of the border */
}
.card-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  
  box-shadow: 0 4px 0 #dcdcdc;
  background-color: #dcdcdc;
  border-radius: 26px;
}
.card-box:active {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  
 
  transform: translateY(4px);
  background-color: #dcdcdc;
  border-radius: 26px;
}

.buttonClicked-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  box-shadow: 0 4px 0 #dcdcdc;
  background-color: #dcdcdc;
  border-radius: 18px;
}
.buttonClicked-box:active {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  box-shadow:none;
  transform: translateY(4px);
  background-color: #dcdcdc;
  border-radius: 18px;
}
.onClicked-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
   box-shadow: 0 4px 0 #6248ff;
  background-color: #6248ff;
  border-radius: 18px;
}
.onClicked-box:active {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
   
   transform: translateY(4px);
  background-color: #6248ff;
  border-radius: 18px;
}
.chat-button {
  background-color: #4432b3;

  padding-bottom: 4px;
  border-radius: 18px;
  
}

.button-box {
  background-color: #6248ff;
  border-radius: 16px;
  box-shadow: 0 4px 0 #4432b3;
}
.button-box:active {
 
  box-shadow: none;
  transform: translateY(4px);
}

.disableButton-box {
  background-color: #dcdcdc;
 padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  padding-bottom: 4px;
  border-radius: 18px;
}
.disableChat-button {
  background-color: white;
 
  
  border-radius: 16px;
}
.onClickedCard-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
 
  box-shadow: 0 4px 0 #6248ff;
  background-color: #6248ff;
  border-radius: 26px;
}
.onClickedCard-box:active {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
 
  
  transform: translateY(4px);
  background-color: #6248ff;
  border-radius: 26px;
}
.onClickedButton-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
 box-shadow: 0 4px 0 #6248ff;
  background-color: #6248ff;
  border-radius: 18px;
}
.onClickedButton-box:active {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
 
 transform: translateY(4px);
  background-color: #6248ff;
  border-radius: 18px;
}
.alert-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  padding-bottom: 4px;
  background-color: #fe4c4a;
  border-radius: 18px;
}

.infoGradient {
  background-image: linear-gradient(
    to left,
    rgba(98, 72, 255, 0.1),
    /* #6248FF with 10% opacity */ rgba(254, 76, 74, 0.1),
    /* #FE4C4A with 10% opacity */ rgba(255, 107, 72, 0.1)
      /* #FF6B48 with 10% opacity */
  );
}


/* Custom styles for react-markdown output */
.prose {
  --tw-prose-body: #333;
  --tw-prose-headings: #161616; /* EDITED from #111 */
  --tw-prose-links: var(--color-custom-purple);
  --tw-prose-bold: #161616; /* EDITED from #000 */
  --tw-prose-bullets: #666;
  --tw-prose-hr: var(--color-borderColor-1);
  --tw-prose-quotes: #444;
  --tw-prose-quote-borders: var(--color-borderColor-1);
  --tw-prose-code: #161616; /* EDITED from #111 */
  --tw-prose-pre-code: #161616; /* EDITED from #111 */
  --tw-prose-pre-bg: var(--color-backGround-1);
}

.prose-invert {
  --tw-prose-body: #e5e7eb;
  --tw-prose-headings: #fff;
  --tw-prose-links: #fff;
  --tw-prose-bold: #fff;
  --tw-prose-bullets: #a1a1aa;
  --tw-prose-hr: #4b5563;
  --tw-prose-quotes: #d1d5db;
  --tw-prose-quote-borders: #4b5563;
  --tw-prose-code: #fff;
  --tw-prose-pre-code: #e5e7eb;
  --tw-prose-pre-bg: rgba(0,0,0,0.2);
}

/* Fix for RTL list indentation */
.prose :where(ul, ol):not(:where([class~="not-prose"] *)) {
  padding-right: 1.625em;
  padding-left: 0;
}
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}
.scrollbar-hide {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}
```

================
FILE: src\App.tsx
================

```




import { Outlet } from 'react-router-dom'


function App() {

  return (
    <div className='font-yekanBakh'>
    
<Outlet/>

    </div>
  )
}

export default App

```

================
FILE: src\api.ts
================

```
import axios, { AxiosError } from 'axios';
import { router } from './router'; 
import { store } from './store'; 
import { clearUser, setUser } from './slice/userSlice'; 
import { UserState } from './slice/userSlice';

const API_BASE_URL = 'https://kiddo2.pythonanywhere.com';

interface LoginResponse {
  token: string;
  user: {
    id: string;
    username: string;
    first_name: string;
    last_name: string;
    role: 'STUDENT' | 'STAFF';
  };
}

export const login = async (username: string, password: string): Promise<LoginResponse> => {
  console.log("API CALL: login", { username });
  try {
    const response = await axios.post<LoginResponse>(`${API_BASE_URL}/api/v1/accounts/login/`, {
      username,
      password,
    });
    
    // Store token for future requests and persistence
    axios.defaults.headers.common['Authorization'] = `Token ${response.data.token}`;
    localStorage.setItem('authToken', response.data.token); // <-- Store token in localStorage

    console.log("API RESPONSE: login success", response.data.user);
    return response.data;
  } catch (error) {
    const axiosError = error as AxiosError;
     console.error("API ERROR: login", axiosError.response?.data);
    if (axiosError.response?.status === 400) {
      throw new Error('نام کاربری یا رمز عبور اشتباه است');
    }
    throw new Error('خطا در ارتباط با سرور');
  }
};

/**
 * Fetches the current user's data using the stored token.
 * @returns A promise that resolves to the user data.
 */
export const getMe = async (): Promise<UserState> => {
    console.log("API CALL: getMe");
    const token = localStorage.getItem('authToken');
    if (!token) {
      return Promise.reject("No token found");
    }
    axios.defaults.headers.common['Authorization'] = `Token ${token}`;
    const response = await axios.get(`${API_BASE_URL}/api/v1/accounts/me/`);
    const user = response.data;
    console.log("API RESPONSE: getMe success", user);
    // Return the full UserState structure including the token
    return { ...user, token };
};

/**
 * Logs the user out by clearing credentials.
 */
export const logout = () => {
    console.log("ACTION: Logging out");
    localStorage.removeItem('authToken'); // <-- Clear token from localStorage
    delete axios.defaults.headers.common['Authorization'];
    store.dispatch(clearUser()); // Clear user from redux
    router.navigate('/'); // Redirect to login
};

// This function sets up the global interceptor
export const setupAxiosInterceptors = () => {
  axios.interceptors.response.use(
    (response) => response,
    (error: AxiosError) => {
      if (error.response?.status === 401) {
        console.log('Global 401 Unauthorized error detected. Logging out.');
        // If a 401 happens, it means the token is invalid, so perform a full logout
        logout();
      }
      return Promise.reject(error);
    }
  );
};
```

================
FILE: src\api-teacher.ts
================

```

// src/api-teacher.ts
import axios from 'axios';
import { ChatEvent, ChatEventDetail } from './types/api';


const API_BASE_URL = 'https://kiddo2.pythonanywhere.com/api/v1';

/**
 * Fetches the list of chat events for the staff member.
 * @returns A promise that resolves to an array of chat events.
 */
export const fetchChatEvents = async (): Promise<ChatEvent[]> => {
  console.log('API CALL: fetchChatEvents');
  try {
    const response = await axios.get<ChatEvent[]>(`${API_BASE_URL}/chat/events/`);
    console.log('API RESPONSE: fetchChatEvents', response.data);
    return response.data;
  } catch (error) {
    console.error('API ERROR: fetchChatEvents', error);
    throw error;
  }
};

/**
 * Fetches the detailed information for a specific chat event.
 * @param eventId The ID of the event.
 * @returns A promise that resolves to the detailed chat event object.
 */
export const fetchEventDetails = async (eventId: string): Promise<ChatEventDetail> => {
  console.log('API CALL: fetchEventDetails', { eventId });
  try {
    const response = await axios.get<ChatEventDetail>(`${API_BASE_URL}/chat/events/${eventId}/`);
    console.log('API RESPONSE: fetchEventDetails', response.data);
    return response.data;
  } catch (error) {
    console.error('API ERROR: fetchEventDetails', error);
    throw error;
  }
};
/**
 * Marks a chat event as resolved.
 * @param eventId The ID of the event to resolve.
 * @returns The updated chat event detail object.
 */
export const resolveChatEvent = async (eventId: string): Promise<ChatEventDetail> => {
  console.log('API CALL: resolveChatEvent', { eventId });
  try {
    const response = await axios.patch<ChatEventDetail>(`${API_BASE_URL}/chat/events/${eventId}/`, {
      is_resolved: true,
    });
    console.log('API RESPONSE: resolveChatEvent', response.data);
    return response.data;
  } catch (error) {
    console.error('API ERROR: resolveChatEvent', error);
    throw error;
  }
};
```

================
FILE: src\api-chat.ts
================

```
// src/api-chat.ts
import axios from 'axios';
import { ApiMessage, ChatSession } from './types/api';

const API_BASE_URL = 'https://kiddo2.pythonanywhere.com/api/v1';

// Remember that the auth token is set globally in api.ts after login

/**
 * Starts a new DarsYar chat session.
 * @param subjectId The ID of the selected subject.
 * @param chapterIds An array of chapter IDs.
 * @returns The newly created chat session.
 */
export const startDarsYarSession = async (subjectId: string, chapterIds: string[]): Promise<ChatSession> => {
  console.log('API CALL: startDarsYarSession', { subjectId, chapterIds });
  try {
    const response = await axios.post<ChatSession>(`${API_BASE_URL}/tools/dars-yar/start/`, {
      subject_id: subjectId,
      chapter_ids: chapterIds,
    });
    console.log('API RESPONSE: startDarsYarSession', response.data);
    return response.data;
  } catch (error) {
    console.error('API ERROR: startDarsYarSession', error);
    throw error;
  }
};

/**
 * Starts a new Konjkav Sho chat session.
 * @param subjectId The ID of the selected subject.
 * @param initialTopic The initial topic from the user.
 * @returns The newly created chat session.
 */
export const startKonjkavSession = async (subjectId: string, initialTopic: string): Promise<ChatSession> => {
    console.log('API CALL: startKonjkavSession', { subjectId, initialTopic });
    try {
        const response = await axios.post<ChatSession>(`${API_BASE_URL}/tools/konjkav-sho/start/`, {
            subject_id: subjectId,
            initial_topic: initialTopic,
        });
        console.log('API RESPONSE: startKonjkavSession', response.data);
        return response.data;
    } catch (error) {
        console.error('API ERROR: startKonjkavSession', error);
        throw error;
    }
};

/**
 * Starts a new Tarkib Kon chat session.
 * @param subjectId The ID of the selected subject.
 * @param topic The topic to learn.
 * @param theme The theme for the explanation.
 * @returns The newly created chat session.
 */
export const startTarkibkonSession = async (subjectId: string, topic: string, theme: string): Promise<ChatSession> => {
    console.log('API CALL: startTarkibkonSession', { subjectId, topic, theme });
    try {
        const response = await axios.post<ChatSession>(`${API_BASE_URL}/tools/tarkib-kon/start/`, {
            subject_id: subjectId,
            topic: topic,
            theme: theme,
        });
        console.log('API RESPONSE: startTarkibkonSession', response.data);
        return response.data;
    } catch (error) {
        console.error('API ERROR: startTarkibkonSession', error);
        throw error;
    }
};

/**
 * Sends a message to an existing chat session.
 * @param sessionId The ID of the chat session.
 * @param content The text of the message to send.
 * @returns The message object created for the user.
 */
export const sendMessage = async (sessionId: string, content: string): Promise<ApiMessage> => {
  console.log('API CALL: sendMessage', { sessionId, content });
  try {
    const response = await axios.post<ApiMessage>(`${API_BASE_URL}/chat/sessions/${sessionId}/messages/`, {
      content,
    });
    console.log('API RESPONSE: sendMessage', response.data);
    return response.data;
  } catch (error) {
    console.error('API ERROR: sendMessage', error);
    throw error;
  }
};

/**
 * Fetches the details and all messages for a given session.
 * @param sessionId The ID of the chat session.
 * @returns The full session details with all messages.
 */
export const getSessionDetails = async (sessionId: string): Promise<ChatSession> => {
  console.log('API CALL: getSessionDetails', { sessionId });
  try {
    const response = await axios.get<ChatSession>(`${API_BASE_URL}/chat/sessions/${sessionId}/`);
    console.log('API RESPONSE: getSessionDetails', response.data);
    return response.data;
  } catch(error) {
    console.error('API ERROR: getSessionDetails', error);
    throw error;
  }
}
```

================
FILE: src\api-chat-details.ts
================

```

```

================
FILE: backend\api-docs.md
================

```
# مستندات API کیدو

## فهرست
- [احراز هویت](#احراز-هویت)
- [مدیریت جلسات گفتگو](#مدیریت-جلسات-گفتگو)
- [ابزارهای آموزشی](#ابزارهای-آموزشی)
- [پنل کارکنان](#پنل-کارکنان)
- [کدهای خطا](#کدهای-خطا)

## احراز هویت

تمامی درخواست‌ها به API (به جز Login) نیاز به توکن احراز هویت دارند. توکن باید در هدر درخواست به شکل زیر ارسال شود:

```
Authorization: Token YOUR_TOKEN_HERE
```

### ورود به سیستم
`POST /api/v1/accounts/login/`

برای ورود به سیستم و دریافت توکن.

**ورودی:**
```json
{
    "username": "student_user",
    "password": "password123"
}
```

**خروجی موفق:**
```json
{
    "token": "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b",
    "user": {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "username": "student_user",
        "first_name": "سارا",
        "last_name": "دانش‌آموز",
        "role": "STUDENT"
    }
}
```

**خطاهای احتمالی:**
- `401 Unauthorized`: اطلاعات ورود نامعتبر
- `400 Bad Request`: فیلدهای ضروری ارسال نشده‌اند

### خروج از سیستم
`POST /api/v1/accounts/logout/`

برای خروج و باطل کردن توکن فعلی.

**نیازمند توکن:** بله

**خروجی موفق:**
- `204 No Content`

### مشاهده پروفایل کاربری
`GET /api/v1/accounts/me/`

برای دریافت اطلاعات کاربر فعلی.

**نیازمند توکن:** بله

**خروجی موفق:**
```json
{
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "username": "student_user",
    "first_name": "سارا",
    "last_name": "دانش‌آموز",
    "role": "STUDENT"
}
```

## مدیریت جلسات گفتگو

### لیست جلسات گفتگو
`GET /api/v1/chat/sessions/`

برای دریافت لیست جلسات گفتگوی کاربر.

**نیازمند توکن:** بله

**خروجی موفق:**
```json
[
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "tool": "DARS_YAR",
        "title": "درس یار on علوم تجربی",
        "subject": "علوم تجربی",
        "updated_at": "2025-07-10T12:00:00Z"
    }
]
```

### جزئیات یک جلسه
`GET /api/v1/chat/sessions/{session_id}/`

برای دریافت جزئیات کامل یک جلسه گفتگو به همراه پیام‌ها.

**نیازمند توکن:** بله

**خروجی موفق:**
```json
{
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "tool": "DARS_YAR",
    "title": "درس یار on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "SYSTEM",
            "content": "CONTEXT:\n--- متن از فصل: اتم‌ها ---\nمحتوای فصل...",
            "timestamp": "2025-07-10T12:00:00Z"
        },
        {
            "id": "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b",
            "sender_type": "USER",
            "content": "اتم چیست؟",
            "timestamp": "2025-07-10T12:01:00Z"
        },
        {
            "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
            "sender_type": "AI",
            "content": "اتم کوچک‌ترین ذره...",
            "timestamp": "2025-07-10T12:01:01Z",
            "raw_ai_response": {
                "answer": "اتم کوچک‌ترین ذره...",
                "student_mood": {
                    "emoji": "🤔",
                    "text": "کنجکاو"
                }
            }
        }
    ]
}
```

### ارسال پیام در جلسه
`POST /api/v1/chat/sessions/{session_id}/messages/`

برای ارسال پیام جدید در یک جلسه گفتگو.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "content": "سوال من در مورد اتم‌ها این است..."
}
```

**خروجی موفق:**
```json
{
    "id": "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b",
    "sender_type": "USER",
    "content": "سوال من در مورد اتم‌ها این است...",
    "timestamp": "2025-07-10T12:01:00Z"
}
```

**خطاهای احتمالی:**
- `404 Not Found`: جلسه مورد نظر یافت نشد
- `403 Forbidden`: کاربر به این جلسه دسترسی ندارد
- `400 Bad Request`: محتوای پیام خالی است

## ابزارهای آموزشی

### شروع جلسه درس‌یار
`POST /api/v1/tools/dars-yar/start/`

برای شروع یک جلسه جدید با ابزار درس‌یار.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "subject_id": "550e8400-e29b-41d4-a716-446655440000",
    "chapter_ids": [
        "7d793789-c00c-4c91-99fb-89e1ba7562e4",
        "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b"
    ]
}
```

**خروجی موفق:**
```json
{
    "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "tool": "DARS_YAR",
    "title": "درس‌یار on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "SYSTEM",
            "content": "CONTEXT:\n--- متن از فصل: اتم‌ها ---\nمحتوای فصل...",
            "timestamp": "2025-07-10T12:00:00Z"
        }
    ]
}
```

**خطاهای احتمالی:**
- `400 Bad Request`: 
  - درس یا فصل‌های انتخابی نامعتبر هستند
  - فصل‌های انتخابی متعلق به درس انتخاب شده نیستند
  - کاربر به درس انتخابی دسترسی ندارد
- `403 Forbidden`: کاربر اجازه استفاده از این ابزار را ندارد

### شروع جلسه آزمون‌ساز
`POST /api/v1/tools/azmoon-saz/start/`

برای شروع یک جلسه جدید با ابزار آزمون‌ساز.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "subject_id": "550e8400-e29b-41d4-a716-446655440000",
    "chapter_ids": ["7d793789-c00c-4c91-99fb-89e1ba7562e4"],
    "difficulty": "متوسط",
    "num_questions": 10
}
```

**محدودیت‌های ورودی:**
- `difficulty`: یکی از مقادیر "آسان"، "متوسط" یا "سخت"
- `num_questions`: یکی از مقادیر 5، 10 یا 20

**خروجی موفق:**
```json
{
    "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "tool": "AZMOON_SAZ",
    "title": "آزمون ساز on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "SYSTEM",
            "content": "CONTEXT:\n--- متن از فصل: اتم‌ها ---\nمحتوای فصل...",
            "timestamp": "2025-07-10T12:00:00Z"
        },
        {
            "id": "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b",
            "sender_type": "SYSTEM",
            "content": "بر اساس محتوای ارائه شده، لطفاً 10 سوال چهارگزینه‌ای در سطح دشواری 'متوسط' طراحی کن.",
            "timestamp": "2025-07-10T12:00:01Z"
        },
        {
            "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
            "sender_type": "AI",
            "content": "بسیار خب! این هم آزمون شما:",
            "timestamp": "2025-07-10T12:00:02Z",
            "raw_ai_response": {
                "questions": [
                    {
                        "question_text": "کدام گزینه درباره اتم درست است؟",
                        "options": ["گزینه 1", "گزینه 2", "گزینه 3", "گزینه 4"],
                        "correct_answer": "گزینه 2"
                    }
                ]
            }
        }
    ]
}
```

### شروع جلسه کنجکاو شو
`POST /api/v1/tools/konjkav-sho/start/`

برای شروع یک جلسه جدید با ابزار کنجکاو شو.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "subject_id": "550e8400-e29b-41d4-a716-446655440000",
    "initial_topic": "چرا آسمان آبی است؟"
}
```

**خروجی موفق:**
```json
{
    "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "tool": "KONJKAV_SHO",
    "title": "کنجکاو شو on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "USER",
            "content": "چرا آسمان آبی است؟",
            "timestamp": "2025-07-10T12:00:00Z"
        },
        {
            "id": "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b",
            "sender_type": "AI",
            "content": "آسمان به دلیل پراکندگی نور...",
            "timestamp": "2025-07-10T12:00:01Z",
            "raw_ai_response": {
                "explanation": "آسمان به دلیل پراکندگی نور...",
                "follow_up_questions": [
                    "چرا در غروب آسمان قرمز می‌شود؟",
                    "آیا در ماه هم آسمان آبی است؟",
                    "نور چگونه در جو پراکنده می‌شود؟"
                ],
                "student_mood": {
                    "emoji": "🤔",
                    "text": "کنجکاو"
                }
            }
        }
    ]
}
```

### شروع جلسه ترکیب کن
`POST /api/v1/tools/tarkib-kon/start/`

برای شروع یک جلسه جدید با ابزار ترکیب کن.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "subject_id": "550e8400-e29b-41d4-a716-446655440000",
    "topic": "اهرم‌ها",
    "theme": "ماینکرفت"
}
```

**خروجی موفق:**
```json
{
    "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "tool": "TARKIB_KON",
    "title": "ترکیب کن on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "USER",
            "content": "موضوع «اهرم‌ها» را در فضا و لحن «ماینکرفت» توضیح بده.",
            "timestamp": "2025-07-10T12:00:00Z"
        }
    ]
}
```

## پنل کارکنان

### لیست کلاس‌ها
`GET /api/v1/academics/classes/`

برای دریافت لیست کلاس‌های مدرسه کارمند.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**خروجی موفق:**
```json
[
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "name": "ششم - الف",
        "grade_level": 6
    }
]
```

### لیست دانش‌آموزان کلاس
`GET /api/v1/academics/classes/{class_id}/students/`

برای دریافت لیست و وضعیت دانش‌آموزان یک کلاس.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**خروجی موفق:**
```json
[
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "full_name": "سارا دانش‌آموز",
        "last_activity_at": "2025-07-10T12:00:00Z",
        "activity_status": "Active",
        "current_mood": {
            "emoji": "🤔",
            "text": "کنجکاو"
        }
    }
]
```

### لیست و فیلتر رویدادها
`GET /api/v1/chat/events/`

برای دریافت لیست رویدادهای دانش‌آموزان مدرسه.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**پارامترهای Query:**
- `level`: فیلتر بر اساس سطح رویداد (INFO, CONCERN, DANGER)
- `is_resolved`: فیلتر بر اساس وضعیت رسیدگی (true/false)

**خروجی موفق:**
```json
[
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "student_name": "سارا دانش‌آموز",
        "overview": "دانش‌آموز از کلمات نگران‌کننده استفاده کرد",
        "emoji": "🚨",
        "level": "DANGER",
        "subject_name": "علوم تجربی",
        "created_at": "2025-07-10T12:00:00Z",
        "is_resolved": false
    }
]
```

### جزئیات رویداد
`GET /api/v1/chat/events/{event_id}/`

برای دریافت جزئیات کامل یک رویداد.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**خروجی موفق:**
```json
{
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "student_name": "سارا دانش‌آموز",
    "overview": "دانش‌آموز از کلمات نگران‌کننده استفاده کرد",
    "emoji": "🚨",
    "level": "DANGER",
    "subject_name": "علوم تجربی",
    "created_at": "2025-07-10T12:00:00Z",
    "is_resolved": false,
    "explanation": "دانش‌آموز در پیام خود از عبارت 'خطرناک' استفاده کرد که نیاز به بررسی دارد.",
    "session_id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "resolved_by": null
}
```

### تغییر وضعیت رویداد
`PATCH /api/v1/chat/events/{event_id}/`

برای تغییر وضعیت رسیدگی به یک رویداد.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**ورودی:**
```json
{
    "is_resolved": true
}
```

**خروجی موفق:**
```json
{
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "is_resolved": true,
    "resolved_by": {
        "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
        "username": "staff_user"
    },
    ...
}
```

### بازنشانی رمز عبور دانش‌آموز
`POST /api/v1/accounts/students/{student_user_id}/reset-password/`

برای بازنشانی رمز عبور یک دانش‌آموز.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**ورودی:**
```json
{
    "new_password": "new_secure_password_123"
}
```

**محدودیت‌های ورودی:**
- طول رمز عبور حداقل 8 کاراکتر

**خروجی موفق:**
```json
{
    "message": "رمز عبور دانش‌آموز سارا دانش‌آموز با موفقیت تغییر کرد."
}
```

**خطاهای احتمالی:**
- `404 Not Found`: دانش‌آموز مورد نظر یافت نشد
- `403 Forbidden`: کارمند اجازه تغییر رمز این دانش‌آموز را ندارد
- `400 Bad Request`: رمز عبور انتخابی معتبر نیست

## کدهای خطا

### خطاهای عمومی
- `400 Bad Request`: درخواست نامعتبر
- `401 Unauthorized`: عدم احراز هویت
- `403 Forbidden`: عدم دسترسی
- `404 Not Found`: منبع مورد نظر یافت نشد
- `405 Method Not Allowed`: متد HTTP نامعتبر
- `500 Internal Server Error`: خطای داخلی سرور

### نمونه خطا
```json
{
    "error": "Permission denied.",
    "detail": "You do not have permission to perform this action."
}
```

### نکات مهم
1. تمامی درخواست‌ها باید با `Content-Type: application/json` ارسال شوند.
2. تمامی timestamp‌ها در فرمت UTC هستند.
3. شناسه‌های منابع (id) از نوع UUID هستند.
4. در صورت بروز خطا، همیشه یک پیام خطای معنادار برگردانده می‌شود.

```

================
FILE: src\types\user.ts
================

```
��
 
 e x p o r t   i n t e r f a c e   U s e r   { 
 
     i d :   s t r i n g ; 
 
     u s e r n a m e :   s t r i n g ; 
 
     f i r s t _ n a m e :   s t r i n g ; 
 
     l a s t _ n a m e :   s t r i n g ; 
 
     r o l e :   " S T U D E N T "   |   " S T A F F " ; 
 
 } 
 
 
 
 e x p o r t   i n t e r f a c e   A u t h S t a t e   { 
 
     u s e r :   U s e r   |   n u l l ; 
 
     t o k e n :   s t r i n g   |   n u l l ; 
 
     s t a t u s :   ' i d l e '   |   ' l o a d i n g '   |   ' s u c c e e d e d '   |   ' f a i l e d ' ; 
 
     e r r o r :   s t r i n g   |   n u l l ; 
 
 } 
```

================
FILE: src\types\state.ts
================

```
export interface RootState {
  darsyar: {
    studySelectionButton: boolean;
    selectedStudy: string | null;
    selectedLesson: string | null;
  };
  konjkav: {
    studySelectionButton: boolean;
    selectedStudy: string | null;
    selectedTopics: string[];
    hasSelectedTopics: boolean;
  };
}

export interface Lesson {
  id: string;
  title: string;
}

export interface Study {
  id: string;
  title: string;
}

export interface Topic {
  id: string;
  title: string;
  description: string;
  emoji: string;
}

```

================
FILE: src\types\chat.ts
================

```
export interface RecentChat {
    id: string;
    title: string;
    lastMessage?: string;
    timestamp?: string;
    tool?: string;
    subject?: string;
    date?: string;
    iconUrl?: string;
}

```

================
FILE: src\types\auth.ts
================

```
��i m p o r t   {   U s e r   }   f r o m   " . / u s e r " ; 
 
 
 
 e x p o r t   i n t e r f a c e   L o g i n C r e d e n t i a l s   { 
 
         u s e r n a m e ? :   s t r i n g ; 
 
         p a s s w o r d ? :   s t r i n g ; 
 
 } 
 
 
 
 e x p o r t   i n t e r f a c e   L o g i n R e s p o n s e   { 
 
         t o k e n :   s t r i n g ; 
 
         u s e r :   U s e r ; 
 
 } 
```

================
FILE: src\types\api.ts
================

```
// src/types/api.ts

// Based on GET /api/v1/chat/sessions/{session_id}/
export interface ApiMessage {
  id: string;
  sender_type: 'SYSTEM' | 'USER' | 'AI';
  content: string;
  timestamp: string;
  raw_ai_response?: any; // Define more strictly if needed
}

// Based on POST /api/v1/tools/dars-yar/start/
export interface ChatSession {
  id: string; // This is the crucial session_id
  tool: string;
  title: string;
  messages: ApiMessage[];
}

// Based on GET /api/v1/chat/events/
export interface ChatEvent {
  id: string;
  student_name: string;
  overview: string;
  emoji: string;
  level: 'INFO' | 'CONCERN' | 'DANGER';
  subject_name: string;
  created_at: string;
  is_resolved: boolean;
}

// Based on GET /api/v1/chat/events/{event_id}/
export interface ChatEventDetail extends ChatEvent {
  explanation: string;
  session_id: string;
  resolved_by: {
    id: string;
    username: string;
  } | null;
}
```

================
FILE: src\store\index.ts
================

```
import { configureStore } from '@reduxjs/toolkit';
import { useDispatch } from 'react-redux';
import darsyarReducer from './../slice/darsyarSlice';
import konjkavReducer from './../slice/konjkavSlice';
import tarkibkonReducer from './../slice/tarkibkonSlice';
import userReducer from './../slice/userSlice';
import dangerStudentsReducer from './../slice/dangerStudentsSlice'

export const store = configureStore({
  reducer: {
    darsyar: darsyarReducer,
    konjkav: konjkavReducer,
    tarkibkon:tarkibkonReducer,
    user:userReducer,
    dangerStudents: dangerStudentsReducer
  },
});

export type RootState = ReturnType<typeof store.getState>;

export type AppDispatch = typeof store.dispatch;

export const useAppDispatch = () => useDispatch<AppDispatch>();
```

================
FILE: src\slice\userSlice.ts
================

```
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

export interface UserState {
  id: string | null;
  username: string | null;
  first_name: string | null;
  last_name: string | null;
  role: 'STUDENT' | 'STAFF' | null;
  token: string | null;
}

const initialState: UserState = {
  id: null,
  username: null,
  first_name: null,
  last_name: null,
  role: null,
  token: null,
};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<UserState>) => {
      return { ...action.payload };
    },
    clearUser: () => initialState,
  },
  
});


export const { setUser, clearUser } = userSlice.actions;
export default userSlice.reducer;

```

================
FILE: src\slice\tarkibkonSlice.ts
================

```
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface Study {
    id: string;
    name: string;
}

interface TarkibkonState {
  selectedStudy: Study | null;
  learnTopic: string;
  favoriteTopic: string;
  studySelectionButton: boolean;
}

const initialState: TarkibkonState = {
  selectedStudy: null,
  learnTopic: "",
  favoriteTopic: '',
  studySelectionButton: false,
};

const tarkibkonSlice = createSlice({
  name: "tarkibkon",
  initialState,
  reducers: {
    setSelectedStudy: (state, action: PayloadAction<Study | null>) => {
      state.selectedStudy = action.payload;
      state.studySelectionButton = !!action.payload;
    },
    setLearnTopic: (state, action: PayloadAction<string>) => {
      state.learnTopic = action.payload;
    },
     setFavoriteTopic: (state, action: PayloadAction<string>) => {
      state.favoriteTopic = action.payload;
    },
    resetSelection: (state) => {
      state.selectedStudy = null;
      state.learnTopic = "";
      state.favoriteTopic='';
      state.studySelectionButton = false;
    },
    activeButtonReducer: (state) => {
      state.studySelectionButton = true;
    },
    disableButtonReducer: (state) => {
      state.studySelectionButton = false;
    },
  },
});

export const {
  setSelectedStudy,
  setLearnTopic,
  setFavoriteTopic,
  resetSelection,
  activeButtonReducer,
  disableButtonReducer,
} = tarkibkonSlice.actions;

export default tarkibkonSlice.reducer;
```

================
FILE: src\slice\konjkavSlice.ts
================

```
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface Study {
  id: string;
  name: string;
}

interface KonjkavState {
  selectedStudy: Study | null;
  selectedTopic: string;
  studySelectionButton: boolean;
}

const initialState: KonjkavState = {
  selectedStudy: null,
  selectedTopic: "",
  studySelectionButton: false,
};

const konjkavSlice = createSlice({
  name: "konjkav",
  initialState,
  reducers: {
    setSelectedStudy: (state, action: PayloadAction<Study | null>) => {
      state.selectedStudy = action.payload;
      if (action.payload) {
        state.studySelectionButton = true;
      } else {
        state.studySelectionButton = false;
      }
    },
    setSelectedTopic: (state, action: PayloadAction<string>) => {
      state.selectedTopic = action.payload;
    },
    resetSelection: (state) => {
      state.selectedStudy = null;
      state.selectedTopic = "";
      state.studySelectionButton = false;
    },
    activeButtonReducer: (state) => {
      state.studySelectionButton = true;
    },
    disableButtonReducer: (state) => {
      state.studySelectionButton = false;
    },
  },
});

export const {
  setSelectedStudy,
  setSelectedTopic,
  resetSelection,
  activeButtonReducer,
  disableButtonReducer,
} = konjkavSlice.actions;

export default konjkavSlice.reducer;
```

================
FILE: src\slice\darsyarSlice.ts
================

```
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface Study {
  id: string;
  name: string;
}

interface Lesson {
  id: string;
  title: string;
}

interface DarsyarState {
  studySelectionButton: boolean;
  selectedStudy: Study | null;
  studyName: string | null;
  selectedLessons: Lesson[];
  hasSelectedLessons: boolean;
}

const initialState: DarsyarState = {
  studySelectionButton: false,
  selectedStudy: null,
  studyName: null,
  selectedLessons: [],
  hasSelectedLessons: false
};

const darsyarSlice = createSlice({
  name: 'darsyar',
  initialState,
  reducers: {
    activeButtonReducer: (state) => {
      state.studySelectionButton = true;
    },
    disableButtonReducer: (state) => {
      state.studySelectionButton = false;
    },
    setSelectedStudy: (state, action: PayloadAction<Study>) => {
      state.selectedStudy = action.payload;
      state.studyName = action.payload.name;
    },
    setSelectedLesson: (state, action: PayloadAction<Lesson[]>) => {
      state.selectedLessons = action.payload;
      state.hasSelectedLessons = action.payload.length > 0;
    },
    clearSelections: (state) => {
      state.selectedStudy = null;
      state.studyName = null;
      state.selectedLessons = [];
      state.studySelectionButton = false;
      state.hasSelectedLessons = false;
    }
  }
});

export const {
  activeButtonReducer,
  disableButtonReducer,
  setSelectedStudy,
  setSelectedLesson,
  clearSelections
} = darsyarSlice.actions;

export default darsyarSlice.reducer;
```

================
FILE: src\slice\dangerStudentsSlice.ts
================

```
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface DangerEvent {
  id: string;
  student_name: string;
  subject_name: string;
  level: 'DANGER' | 'CONCERN' | 'INFO';
  explanation: string;
  emoji: string;
  created_at: string;
  session_id?: string;
}

interface DangerStudentsState {
  dangerEvents: DangerEvent[];
  lastUpdated: string | null;
  isLoading: boolean;
}

const initialState: DangerStudentsState = {
  dangerEvents: [],
  lastUpdated: null,
  isLoading: false,
};

const dangerStudentsSlice = createSlice({
  name: 'dangerStudents',
  initialState,
  reducers: {
    setDangerEvents: (state, action: PayloadAction<DangerEvent[]>) => {
      state.dangerEvents = action.payload;
      state.lastUpdated = new Date().toISOString();
      state.isLoading = false;
    },
    addDangerEvent: (state, action: PayloadAction<DangerEvent>) => {
      const existingIndex = state.dangerEvents.findIndex(
        event => event.id === action.payload.id
      );
      
      if (existingIndex !== -1) {
        // Update existing event
        state.dangerEvents[existingIndex] = action.payload;
      } else {
        // Add new event
        state.dangerEvents.push(action.payload);
      }
      state.lastUpdated = new Date().toISOString();
    },
    removeDangerEvent: (state, action: PayloadAction<string>) => {
      state.dangerEvents = state.dangerEvents.filter(
        event => event.id !== action.payload
      );
      state.lastUpdated = new Date().toISOString();
    },
    clearDangerEvents: (state) => {
      state.dangerEvents = [];
      state.lastUpdated = null;
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.isLoading = action.payload;
    },
  },
});

export const {
  setDangerEvents,
  addDangerEvent,
  removeDangerEvent,
  clearDangerEvents,
  setLoading,
} = dangerStudentsSlice.actions;

export default dangerStudentsSlice.reducer;

// Selectors
export const selectDangerEvents = (state: { dangerStudents: DangerStudentsState }) => 
  state.dangerStudents.dangerEvents;

export const selectDangerEventsCount = (state: { dangerStudents: DangerStudentsState }) => 
  state.dangerStudents.dangerEvents.length;

export const selectLastUpdated = (state: { dangerStudents: DangerStudentsState }) => 
  state.dangerStudents.lastUpdated;

export const selectIsLoading = (state: { dangerStudents: DangerStudentsState }) => 
  state.dangerStudents.isLoading;
```

================
FILE: src\slice\chatSlice.ts
================

```

```

================
FILE: src\layout\ClassLayout.tsx
================

```
import React, { useRef } from 'react';
import { useLocation, useOutlet } from 'react-router-dom';
import Header from '../components/common/Header';
import Navbar from '../teacher/components/contentContainer/Navbar';
import StudentAlert from '../teacher/components/contentContainer/StudentAlert';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { useTransition, animated } from '@react-spring/web';

// Define an interface for the class data structure
interface TeacherClass {
  id: string;
  name: string;
  grade_level: number;
}

// Define the order of routes for swipe direction logic
const routeOrder = ['/teacher/students', '/teacher/reports', '/teacher/chat'];
const getRouteIndex = (pathname: string) => routeOrder.findIndex(p => pathname.startsWith(p));

const ClassLayout = () => {
  const location = useLocation();
  const currentOutlet = useOutlet();

  // Ref to store the previous route's index
  const prevIndexRef = useRef(getRouteIndex(location.pathname));
  const currentIndex = getRouteIndex(location.pathname);

  // Determine animation direction: 1 for forward (right to left), -1 for backward (left to right)
  const direction = currentIndex > prevIndexRef.current ? 1 : -1;
  
  // Update the ref with the current index for the next navigation
  React.useEffect(() => {
    prevIndexRef.current = currentIndex;
  });

  // Setup the transition animation
  const transitions = useTransition(location, {
    key: location.pathname,
    from: { opacity: 0, transform: `translate3d(${direction * 100}%, 0, 0)` },
    enter: { opacity: 1, transform: 'translate3d(0%, 0, 0)' },
    leave: { opacity: 0, transform: `translate3d(${-direction * 50}%, 0, 0)`, position: 'absolute' },
    config: { tension: 220, friction: 25 },
  });

  const { data: classes, isLoading } = useQuery<TeacherClass[]>({
        queryKey: ['teacherClasses'],
        queryFn: async () => {
            console.log("API CALL: fetching classes for Header");
            const res = await axios.get('https://kiddo2.pythonanywhere.com/api/v1/academics/classes/');
            console.log("API RESPONSE: fetching classes for Header success", res.data);
            return res.data;
        },
        staleTime: 300000,
    });

  const headerTitle = isLoading 
    ? 'در حال بارگذاری...' 
    : (classes && classes.length > 0 ? classes[0].name : 'کلاس من');
    
  return (
    <div>
      <Header title={headerTitle} />
      <Navbar />
      <div className='bg-backGround-1 min-h-screen '>
        <div className='mx-[16px] '>
          <StudentAlert />
          <main className='relative overflow-x-hidden pt-[16px]'>
            {transitions((style, item) => (
              <animated.div style={style} className="w-full">
                {/* Clone the outlet so react-spring animates the correct component. The key is crucial. */}
                {currentOutlet && React.cloneElement(currentOutlet, { key: item.pathname })}
              </animated.div>
            ))}
          </main>
        </div>
      </div>
    </div>
  );
};

export default ClassLayout;
```

================
FILE: src\hooks\useStudentChatSessions.ts
================

```
import React from 'react';
import { useQuery, useQueries } from '@tanstack/react-query';
import { fetchChatEvents } from '../api-teacher';
import { getSessionDetails } from '../api-chat';
import { ChatSession } from '../types/api';

export const useStudentChatSessions = (studentName: string | null) => {
  // 1. Fetch all events. This is cached across the app by its queryKey.
  console.log(`HOOK: useStudentChatSessions for student: ${studentName}`);
  const { data: events, isLoading: isLoadingEvents, isError: isErrorEvents } = useQuery({
    queryKey: ['chatEvents'], // Use the same key as ReportsPage to leverage cache
    queryFn: fetchChatEvents,
    enabled: !!studentName, // Only run if a studentName is provided
  });

  // 2. Filter events for the specific student and get unique session IDs
  const sessionIds = React.useMemo(() => {
    if (!events || !studentName) return [];
    
    // Defensive coding: trim names to avoid whitespace issues.
    const trimmedStudentName = studentName.trim();
    const studentEvents = events.filter(e => e.student_name && e.student_name.trim() === trimmedStudentName);
    const uniqueIds = [...new Set(studentEvents.map(e => e.session_id))];
    
    console.log(`HOOK: All events count: ${events.length}. Events for "${trimmedStudentName}": ${studentEvents.length}. Unique sessions: ${uniqueIds.length}`);
    return uniqueIds;
  }, [events, studentName]);

  // 3. Fetch details for each session in parallel
  const sessionQueries = useQueries({
    queries: sessionIds.map(id => ({
      queryKey: ['sessionDetails', id],
      queryFn: () => getSessionDetails(id),
      staleTime: 5 * 60 * 1000, // Cache session details for 5 minutes
      enabled: !!id,
    })),
  });

  // 4. Aggregate loading, error, and data states
  const isLoading = isLoadingEvents || sessionQueries.some(q => q.isLoading);
  const isError = isErrorEvents || sessionQueries.some(q => q.isError);

  const data: ChatSession[] = React.useMemo(() => 
    sessionQueries
      .filter(q => q.isSuccess && q.data)
      .map(q => q.data as ChatSession),
    [sessionQueries]
  );
  
  console.log(`HOOK: Returning isLoading: ${isLoading}, isError: ${isError}, data count: ${data.length}`);
  
  return { data, isLoading, isError };
};
```

================
FILE: src\hooks\useClientInfo.ts
================

```
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

interface ClientInfo {
  id: string;
  username: string;
  first_name: string;
  last_name: string;
  role: string;
}

const fetchClientInfo = async (): Promise<ClientInfo> => {
  const response = await axios.get('/api/v1/accounts/me/', {
    headers: {
      Authorization: `Token ${localStorage.getItem('token')}`,
    },
  });

  return response.data;
};

export const useClientInfo = () => {
  return useQuery({
    queryKey: ['clientInfo'],
    queryFn: fetchClientInfo,
  });
};

```

================
FILE: src\hooks\useChatSessions.ts
================

```
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

const API_BASE_URL = 'https://kiddo2.pythonanywhere.com';

interface ChatSession {
  id: string;
  tool: string;
  title: string;
  subject: string;
  updated_at: string;
}

const fetchChatSessions = async (): Promise<ChatSession[]> => {
  console.log("API CALL: fetchChatSessions");
  // The token is handled by the global axios interceptor.
  const response = await axios.get(`${API_BASE_URL}/api/v1/chat/sessions/`);
  console.log("API RESPONSE: fetchChatSessions success", response.data);
  // Ensure we always return an array
  return Array.isArray(response.data) ? response.data : [];
};

export const useChatSessions = () => {
  return useQuery({
    queryKey: ['chatSessions'],
    queryFn: fetchChatSessions,
    staleTime: 60000, // Cache for 1 minute
  });
};
```

================
FILE: src\router\index.tsx
================

```
// src/router/index.tsx
import { createBrowserRouter, Outlet } from "react-router-dom";
import App from "../App";
import Login from "../login/Login";
import ResumeChatPage from "../student/pages/ResumeChatPage";
import TeacherHome from "../teacher/pages/TeacherHome";
import StudentHome from "../student/pages/StudentHome";
import ClassLayout from "../layout/ClassLayout";
import StudentsActivities from "../teacher/components/contentContainer/students/StudentsActivities";
import ClassChat from "../teacher/pages/ClassChat";
import DarsyarRecentChat from "../student/pages/darsYar/DarsyarRecentChat";
import DarsyarWelcome from "../student/pages/darsYar/DarsyarStudyAssistant";
import DarsyarStudySelection from "../student/pages/darsYar/DarsyarStudySelection";
import DarsyarLessonSelection from "../student/pages/darsYar/DarsyarLessonSelection";
import DarsyarChatWithBot from "../student/pages/darsYar/DarsyarChatWithBot";
import KonjkavWelcome from "../student/pages/konjKav/KonjkavWelcome";
import KonjkavRecentChat from "../student/pages/konjKav/KonjkavRecentChat";
import KonjkavStudySelection from "../student/pages/konjKav/KonjkavStudySelection";
import KonjkavTopicSelection from "../student/pages/konjKav/KonjkavTopicSelection";
import KonjkavTopicBot from "../student/pages/konjKav/KonjkavTopicBot";
import TarkibkonWelcome from "../student/pages/tarkibKon/TarkibkonWelcome";
import TarkibkonRecentChat from "../student/pages/tarkibKon/TarkibkonRecentChat";
import TarkibkonLearnTopic from "../student/pages/tarkibKon/TarkibkonLearnTopic";
import TarkibkonFavoriteTopic from "../student/pages/tarkibKon/TarkibkonFavoriteTopic";
import TarkibkonChatBot from "../student/pages/tarkibKon/TarkibkonChatBot";
import TarkibkonStudySelection from "../student/pages/tarkibKon/TarkibkonStudySelection";
import ReportsPage from "../teacher/pages/ReportsPage";
import StudentChat from "../teacher/pages/StudentChat";

export const router = createBrowserRouter([
  {
    path: "/",
    element: <App />, 
    children: [
      {
        index: true,
        element: <Login />,
      },
      {
        path: "teacher", 
        element: <TeacherHome />,
      },
      {
        path: "teacher", 
        element: <ClassLayout />,
        children: [
          {
            path: "students", 
            element: <StudentsActivities />,
          },
          {
            path: "reports",
            element: <ReportsPage />,
          },
          {
            path: "chat", 
            element: <ClassChat />,
          },
        ],
      },
      {
        path: "teacher/chat/:sessionId",
        element: <ResumeChatPage />,
      },
      {
        path: "teacher/student/:studentId/chats",
        element: <StudentChat />,
      },
      {
        path: "student",
        children: [
          {
            index: true,
            element: <StudentHome />,
          },
          {
            path: "chat/:sessionId",
            element: <ResumeChatPage />,
          },
          {
            path: "darsyar",
            element: <Outlet />,
            children: [
              { path: "recent-chat", element: <DarsyarRecentChat /> },
              { path: "study-assistant", element: <DarsyarWelcome /> },
              { path: "study-selection", element: <DarsyarStudySelection /> },
              { path: "lesson-selection", element: <DarsyarLessonSelection /> },
              { path: "chat", element: <DarsyarChatWithBot /> },
            ],
          },
          {
            path: "konjkav",
            element: <Outlet />,
            children: [
              { path: "welcome", element: <KonjkavWelcome /> },
              { path: "recent-chat", element: <KonjkavRecentChat /> },
              { path: "study-selection", element: <KonjkavStudySelection /> },
              { path: "topic-selection", element: <KonjkavTopicSelection /> },
              { path: "chat", element: <KonjkavTopicBot /> },
            ],
          },
          {
            path: "tarkibkon",
            element: <Outlet />,
            children: [
              { path: "welcome", element: <TarkibkonWelcome /> },
              { path: "recent-chat", element: <TarkibkonRecentChat /> },
              { path: "study-selection", element: <TarkibkonStudySelection /> },
              { path: "learn-topic-selection", element: <TarkibkonLearnTopic /> },
              { path: "favorite-topic-selection", element: <TarkibkonFavoriteTopic /> },
              { path: "chat", element: <TarkibkonChatBot /> },
            ],
          },
        ],
      },
    ],
  },
], {
  basename: "/kiddo",
});
```

================
FILE: src\login\LoginButton.tsx
================

```
import React from 'react'

interface LoginButtonProps {
  disabled?: boolean
}

const LoginButton: React.FC<LoginButtonProps> = ({ disabled }) => {
  return (
    <div className="flex justify-center items-center bg-white w-full ">
      <div className={`  border-backGroundButton w-full ${disabled ? 'opacity-50' : ''} `}>
        <button 
          type="submit"
          disabled={disabled}
          className="button-box text-white cursor-pointer p-[16px] w-full disabled:cursor-not-allowed "
        >
          {disabled ? 'در حال ورود...' : 'ورود'}
        </button>
      </div>
    </div>
  )
}

export default LoginButton

```

================
FILE: src\login\Login.tsx
================

```
import React from 'react'
import HeroSection from './HeroSection'
import InputGroup from './InputGroup'

const Login = () => {
  return (
    <div className='bg-backGround-1 '>
      <HeroSection/>
      <InputGroup/>
    </div>
  )
}

export default Login

```

================
FILE: src\login\InputGroup.tsx
================

```
import { useState } from 'react'
import { useDispatch } from 'react-redux'
import LoginButton from './LoginButton'
import { login } from '../api'
import { setUser } from '../slice/userSlice'
import { useNavigate } from 'react-router-dom'

const InputGroup = () => {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const dispatch = useDispatch()
  const navigate = useNavigate()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    setLoading(true)

    try {
      const response = await login(username, password)
      
      dispatch(setUser({
        id: response.user.id,
        username: response.user.username,
        first_name: response.user.first_name,
        last_name: response.user.last_name,
        role: response.user.role,
        token: response.token
      }))
      
      // Navigate based on role
      if (response.user.role === 'STUDENT') {
        navigate('/student')
      } else if (response.user.role === 'STAFF') {
        navigate('/teacher')
      }
    } catch (err: any) {
      setError(err.response?.data?.message || 'خطا در ورود به سیستم')
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className='flex flex-col justify-center items-center rounded-[24px] p-[40px] space-y-6 bg-white border-[2px] border-borderColor-1 rounded-b-none'>
      {error && (
        <div className='w-full text-right text-red-500 text-sm mb-4'>
          {error}
        </div>
      )}
      <div className='w-full mb-[16px]'>
        <p className='mb-[12px] text-right text-[14px] font-extrabold'>نام کاربری</p>
        <input
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className='p-[16px] rounded-[16px] w-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-chatButton-1'
          required
        />
      </div>
      <div className='w-full mb-[40px]'>
        <p className='mb-[12px] text-right text-[14px] font-extrabold'>کد ورود</p>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className='p-[16px] rounded-[16px] border border-gray-300 w-full focus:outline-none focus:ring-2 focus:ring-chatButton-1'
          required
        />
      </div>
      <LoginButton disabled={loading} />
    </form>
  )
}

export default InputGroup
```

================
FILE: src\login\HeroSection.tsx
================

```
import happyFace from './../assets/images/happyFace.png'

const HeroSection = () => {
  return (
    <div className='pb-[32px] pt-[16px]   flex justify-center items-center flex-col h-[60vh]'>
        <div className=' p-4'>
        <img src={happyFace}/>
      </div>
      <p className='text-center font-extrabold'>به کیــــدو  خوش آمدی!</p>
    </div>
  )
}

export default HeroSection
```

================
FILE: src\components\RecentChats.tsx
================

```
// src/components/RecentChats.tsx

import React from 'react';
import { useChatSessions } from '../hooks/useChatSessions';
import RecentChatCard from './common/RecentChatCard';
import LoadingIndicator from './common/LoadingIndicator';

interface RecentChatsProps {
  filterByTool?: 'DARS_YAR' | 'KONJKAV_SHO' | 'TARKIB_KON' | 'AZMOON_SAZ';
}

const RecentChats: React.FC<RecentChatsProps> = ({ filterByTool }) => {
  const { data: chatSessions, isLoading, isError } = useChatSessions();

  if (isLoading) {
    return  <div className="flex justify-center items-center text-center">
                  <LoadingIndicator className="w-10 h-10 " />
                </div>;
  }

  if (isError) {
    return <div className="text-center text-red-500 py-4">خطا در بارگذاری چت‌ها</div>;
  }

  const filteredSessions = filterByTool 
    ? chatSessions?.filter(session => session.tool === filterByTool)
    : chatSessions;

  if (!filteredSessions || filteredSessions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center p-6 text-center">
        <p className="text-gray-500">چت اخیری وجود ندارد.</p>
      </div>
    );
  }
  
  return (
    <div className="space-y-[12px]">
      {filteredSessions.map((session) => (
        <RecentChatCard
          key={session.id}
          id={session.id}
          title={session.title}
          tool={session.tool}
          subject={session.subject}
          updatedAt={session.updated_at}
        />
      ))}
    </div>
  );
};

export default RecentChats;
```

================
FILE: src\api\chatApi.ts
================

```
import darsyarIcon from "../assets/images/darsyar.webp";
import konjkavIcon from "../assets/images/konjkav.png";
import tarkibkonIcon from "../assets/images/hediye.png";
import { RecentChat } from "../types/chat";

// این تابع ارتباط با API را شبیه‌سازی می‌کند
export const fetchRecentChats = async (): Promise<RecentChat[]> => {
  console.log("Fetching recent chats from API...");
  // تاخیر عمدی برای شبیه‌سازی شبکه
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // داده‌های ساختگی
  const mockChats: RecentChat[] = [
    {
      id: "1",
      title: "توضیحات مربوط به فتوسنتز و اطلاعات مهم",
      tool: "درس‌یار",
      subject: "علوم",
      date: "۱۹ خرداد",
      iconUrl: darsyarIcon,
    },
    {
      id: "2",
      title: "حل معادله درجه دو و کاربردهای آن",
      tool: "کنج‌کاو",
      subject: "ریاضی",
      date: "۱۸ خرداد",
      iconUrl: konjkavIcon,
    },
    {
      id: "3",
      title: "خلاصه نویسی درس تاریخ معاصر ایران",
      tool: "ترکیب‌کن",
      subject: "تاریخ",
      date: "۱۷ خرداد",
      iconUrl: tarkibkonIcon,
    },
  ];

  return mockChats;
};
```

================
FILE: src\api\authApi.ts
================

```
��
 
 
```

================
FILE: src\api\apiClient.ts
================

```

```

================
FILE: src\constants\tarkibkonWelcomeConstant.tsx
================

```
import { FluentEmoji } from '@lobehub/fluent-emoji';
import { ReactElement } from 'react';

export const tarkibkonWelcomeConstant:TarkibkonType[] = [
  {
    logo: <FluentEmoji emoji='🧪' size={24}  type='anim'/>,
    title: 'ترکیب شگفت‌انگیز',
    description:
      'درس‌ها رو با بازی‌ها، فیلم‌ها و هر چیزی که عاشقشی، یاد بگیر. اینجا علم و سرگرمی با هم ترکیب میشن!',
  },
  {
    logo:<FluentEmoji emoji='🕹️' size={24}  type='anim'/>,
    title: 'خداحافظی با درس‌های خسته‌کننده',
    description:
     'سخت‌ترین موضوعات درسی رو با مثال‌هایی از دنیای ماینکرفت، فوتبال یا هری پاتر برات توضیح میدیم.',
  },
  {
    logo: <FluentEmoji emoji='🔭' size={24}  type='anim'/>,
    title: 'از زاویه جدید ببین',
    description:
      'ارتباط‌های پنهان بین درس و دنیای اطرافت رو کشف کن و ببین چطور همه چیز به هم ربط داره.',
  },
];
export interface TarkibkonType{
   logo:ReactElement ,
    title: string,
    description:string
}

```

================
FILE: src\constants\studyAssistantConstant.tsx
================

```
import { FluentEmoji } from "@lobehub/fluent-emoji";
import { ReactElement } from "react";

export const studyAssistantConstatnt: studyAssistantType[] = [
  {
    logo: (
      <FluentEmoji
        emoji="🚀"

        size={24}
        type={"anim"}
        
      />
    ),
    title: "هیچ درسی دیگه سخت نیست",
    description:
      "با درس‌یـــار هر مبحث سختی از کتاب رو اینجا به زبون ساده و سریع یاد بگیر.",
  },
  {
    logo: <FluentEmoji emoji="😎" size={24} type="anim" />,
    title: "معلم خصوصی ۲۴ ساعته",
    description:
      "درس‌یـــار همیشه همراه تو! هر زمان و هرکجا، برای سوالاتت جواب فوری بگیر.",
  },
  {
    logo: <FluentEmoji emoji="👽" size={24} type="anim" />,
    title: "جمع‌بندی آسون برای امتحانات",
    description:
      "با خلاصه‌های دقیق و نکته‌های امتحانی، سریع‌تر از همیشه برای امتحانات آماده شو.",
  },
];
export interface studyAssistantType {
  logo: ReactElement;
  title: string;
  description: string;
}

```

================
FILE: src\constants\konjkavWelcomConstant.tsx
================

```
import { ReactElement } from "react";
import { FluentEmoji } from '@lobehub/fluent-emoji';


export const konjkavWelcomeConstant:KonjkavType[] = [
  {
    logo: <FluentEmoji emoji='🕵️' size={24}  type='3d'/>,
    title: 'کارآگاهِ دانش شو',
    description:
      "یادگیری رو با پرسیدن سوال‌های هیجان‌انگیز شروع کن و مثل یک کارآگاه به عمق هر موضوعی سفر کن.",
  },
  {
    logo:<FluentEmoji emoji='🌌' size={24}  type='anim'/>,
    title: ' از یک کلمه تا یک کهکشان',
    description:
      'فقط یک موضوع رو انتخاب کن تا کیدو با سوال‌های جدید، راه رو برای کشف‌های بزرگتر برات باز کنه.',
  },
  {
    logo: <FluentEmoji emoji='🗺️' size={24}  type='anim'/>,
    title: 'ماجراجویی در سرزمین علم',
    description:
    'هیچوقت برای یادگرفتن متوقف نشو؛ همیشه یک سوال جالب و یک مسیر کشف نشده منتظرته!',
  },
];
export interface KonjkavType{
   logo:ReactElement ,
    title: string,
    description:string
}

```

================
FILE: src\constants\azmonWelcomeConstant.tsx
================

```
// import { FluentEmoji } from '@lobehub/fluent-emoji';
// import { ReactElement } from 'react';

// export const azmonWelcomeConstant:AzmonType[] = [
//   {
//     logo: <FluentEmoji emoji='🏆' size={24}  type='anim'/>,
//     title: 'قهرمان امتحان خودت باش',
//     description:
//       'با آزمون‌ساز از هر درس و فصلی که بخوای، آزمون بساز و نقاط قوت و ضعفت رو پیدا کن.',
//   },
//   {
//     logo:<FluentEmoji emoji='🎚️' size={24}  type='anim'/>,
//     title: ' سطح سوالات دست خودته',
//     description:'آزمون‌ها رو با سختی دلخواهت بساز، از سوالای آسون شروع کن و با سخت‌ترین‌ها بهتر یاد بگیر.',
//   },
//   {
//     logo:<FluentEmoji emoji='😌' size={24}  type='anim'/>,
//     title: 'با نمره ۲۰ غافلگیرشون کن',
//     description:
//      'با سوال‌های شبیه به امتحان اصلی تمرین کن تا سر جلسه، جواب‌ها رو چشم‌بسته بزنی!',
//   },
// ];
// export interface AzmonType{
//    logo:ReactElement ,
//     title: string,
//     description:string
// }
```

================
FILE: src\teacher\pages\TeacherHome.tsx
================

```
// src/teacher/pages/TeacherHome.tsx

import React from "react";
import Header from "../../student/components/home/Header";
import Classes from "../components/home/Classes";
import ToolCard from './../components/home/ToolCard'
import RecentChatCard from "../../components/common/RecentChatCard";
import { useChatSessions } from "../../hooks/useChatSessions";
import { useNavigate } from "react-router-dom";
import darsyar from './../../assets/images/darsyar.webp'
import azmon from './../../assets/images/azmon.webp'
import tarkibkon from './../../assets/images/tarkibkon.webp'
import konjkav from './../../assets/images/konjkav.webp'
import LoadingIndicator from "../../components/common/LoadingIndicator";

const TeacherHome = () => {
  const navigate=useNavigate()
  const { data: chatSessions = [], isLoading, isError } = useChatSessions();

  const hasRecentChatsForTool = (tool: string) => {
    return chatSessions.some((session) => session.tool === tool);
  };
  const handleClasses=()=>{
    navigate('/teacher/students')
  }

  return (
    <div>
      <Header />
      <div className="bg-backGround-1 min-h-screen pb-10">
        <div className="p-[24px] gap-[16px] pt-[80px]">
          <div >
            <h1 className="mb-[16px]">کلاس‌ها</h1>
            <div onClick={handleClasses}>
              <Classes />
            </div>
           
          </div>
          <div>
            <h1 className="pt-[20px] pb-[16px]">ابزار‌ها</h1>
            <div className="mb-[24px]">
              <div className="flex justify-center items-stretch mb-[12px] gap-[12px]">
                    <ToolCard
                  title="درس‌یـــــار"
                  description='بهت کمک می‌کنه، درسا رو بهتر بفهمی!'
                  tool="DARS_YAR"
                  hasRecentChats={hasRecentChatsForTool("DARS_YAR")}
                  image={darsyar}
                />
                <ToolCard
                  title="آزمون‌ســـاز"
                  description='کلی نمونه سوال حرفه‌ای برات طراحی می‌کنه!'
                  tool="AZMOON_SAZ"
                  hasRecentChats={hasRecentChatsForTool("AZMOON_SAZ")}
                  image={azmon}
                />
               
              </div>
              <div className="flex justify-center items-stretch gap-[12px]">
             <ToolCard 
                  title="ترکــــــیب‌کن"
                  description='درسارو همونطوری که خودت دوست داری یادبگیر.'
                  tool="TARKIB_KON"
                  hasRecentChats={hasRecentChatsForTool("TARKIB_KON")}
                  image={tarkibkon}
                />
                <ToolCard
                  title="کنج‌کـــاو"
                  description='همراه خوب تو برای یادگرفتن چیزای جدید!'
                  tool="KONJKAV_SHO"
                  hasRecentChats={hasRecentChatsForTool("KONJKAV_SHO")}
                  image={konjkav}
                />
              </div>
            </div>
          </div>
          
          <h3 className="font-extrabold text-right text-[14px] mt-[32px] mb-[16px]">
            چت‌های اخیر
          </h3>
          <div className="space-y-[12px]">
              {isLoading ? (
                <div className="flex justify-center items-center text-center">
                  <LoadingIndicator className="w-10 h-10 " />
                </div>
              ) : isError ? (
              <div className="text-center text-red-500 py-4">
                خطا در بارگذاری چت‌ها
              </div>
            ) : chatSessions.length === 0 ? (
              <div className="text-center text-gray-500 py-4">
                هیچ چت اخیری وجود ندارد
              </div>
            ) : (
              chatSessions.map((session) => (
                <RecentChatCard
                  key={session.id}
                  id={session.id}
                  title={session.title}
                  tool={session.tool}
                  subject={session.subject}
                  updatedAt={session.updated_at}
                />
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TeacherHome;
```

================
FILE: src\teacher\pages\StudentChat.tsx
================

```
import React from 'react';
import { useLocation } from 'react-router-dom';
import Header from '../../components/common/Header';
import RecentChatCard from '../../components/common/RecentChatCard';
import { useStudentChatSessions } from '../../hooks/useStudentChatSessions';
import LoadingIndicator from '../../components/common/LoadingIndicator';

const StudentChat = () => {
  const location = useLocation();
  const studentName = location.state?.studentName;

  const { data: chatSessions, isLoading, isError } = useStudentChatSessions(studentName);
  console.log(chatSessions)
  if (!studentName) {
    return (
      <>
        <Header title={'خطا'} backPath="/teacher/students" />
        <div className="p-4 text-center text-gray-700">
          اطلاعات دانش‌آموز یافت نشد. لطفاً از صفحه دانش‌آموزان وارد شوید.
        </div>
      </>
    );
  }

  return (
    <>
      <Header title={studentName} backPath="/teacher/students" />
      <div className="bg-backGround-1 min-h-screen">
        <div className="p-4 space-y-3">
          {isLoading &&  <div className="flex justify-center items-center text-center">
                  <LoadingIndicator className="w-10 h-10 " />
                </div>}
          {isError && <div className="text-center text-red-500 py-4">خطا در بارگذاری چت‌ها.</div>}
          {!isLoading && !isError && chatSessions.length === 0 && (
            <div className="text-center text-gray-500 py-4">
              هیچ چت قابل نمایشی برای این دانش‌آموز وجود ندارد.
              <br />
              <small>(تنها چت‌هایی که رویدادی ثبت کرده باشند نمایش داده می‌شوند)</small>
            </div>
          )}
          {!isLoading && !isError && chatSessions.length > 0 && (
            chatSessions.map((session) => {
              if (!session) return null; // Safety check
              const lastMessage = session.messages[session.messages.length - 1];
              const subject = session.title.split(' on ')[1] || session.title || 'نامشخص';

              return (
                <RecentChatCard
                  key={session.id}
                  id={session.id}
                  title={session.title}
                  tool={session.tool}
                  subject={subject}
                  updatedAt={lastMessage?.timestamp || ''}
                />
              );
            })
          )}
        </div>
      </div>
    </>
  );
};

export default StudentChat;
```

================
FILE: src\teacher\pages\ReportsPage.tsx
================

```
// src/teacher/pages/ReportsPage.tsx
import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import ReportTools from '../components/contentContainer/reports/ReportTools';
import StudentReports from '../components/contentContainer/reports/StudentReports';
import ReportDetailModal from '../components/contentContainer/reports/modals/ReportDetailModal';
import { fetchChatEvents } from '../../api-teacher';
import LessonModal from '../components/contentContainer/reports/modals/LessonModal';
import ToolsModal from '../components/contentContainer/reports/modals/ToolsModal';
import StudentAlert from '../components/contentContainer/StudentAlert';
import tool from './../../assets/images/reportsPage/tool.png'
import lesson from './../../assets/images/reportsPage/lesson.png'
import LoadingIndicator from '../../components/common/LoadingIndicator';

const ReportsPage = () => {
  const [selectedEventId, setSelectedEventId] = useState<string | null>(null);
  
  // State to manage which modal is open
  const [openModal, setOpenModal] = useState<'lessons' | 'tools' | null>(null);
  
  // State for selected filters - initialize from localStorage
  const [selectedLesson, setSelectedLesson] = useState(() => {
    return localStorage.getItem('reportsPage_selectedLesson') || 'همه درس‌ها';
  });
  const [selectedTool, setSelectedTool] = useState(() => {
    return localStorage.getItem('reportsPage_selectedTool') || 'همه ابزارها';
  });

  // Save to localStorage whenever filters change
  useEffect(() => {
    localStorage.setItem('reportsPage_selectedLesson', selectedLesson);
  }, [selectedLesson]);

  useEffect(() => {
    localStorage.setItem('reportsPage_selectedTool', selectedTool);
  }, [selectedTool]);

  const { data: events, isLoading, isError } = useQuery({
    queryKey: ['chatEvents'],
    queryFn: fetchChatEvents,
  });

  // Filter events based on selected lesson and tool
  const filteredEvents = events?.filter(event => {
    const lessonMatch = selectedLesson === 'همه درس‌ها' || event.subject_name === selectedLesson;
    // Since ChatEvent doesn't have tool_name, we'll just filter by lesson for now
    // You may need to add tool filtering logic based on your actual data structure
    return lessonMatch;
  }) || [];

  const handleOpenDetailModal = (eventId: string) => {
    setSelectedEventId(eventId);
  };

  const handleCloseDetailModal = () => {
    setSelectedEventId(null);
  };

  const handleConfirmLesson = (lesson: string) => {
    setSelectedLesson(lesson);
    setOpenModal(null);
  };
  
  const handleConfirmTool = (tool: string) => {
    setSelectedTool(tool);
    setOpenModal(null);
  };

  return (
    <>
      
      
      
      <div className='flex justify-center items-center gap-[12px] mb-[16px]'>
        <ReportTools 
          title={selectedLesson} 
          onClick={() => setOpenModal('lessons')} 
          image={lesson}
          isSelected={selectedLesson !== 'همه درس‌ها'}
        />
        <ReportTools 
          title={selectedTool} 
          onClick={() => setOpenModal('tools')} 
          image={tool}
          isSelected={selectedTool !== 'همه ابزارها'}
        />
      </div>

      <div className='border-[2px] border-borderColor-1 rounded-[24px] bg-white p-[16px]'>
        {isLoading &&  <div className="flex justify-center items-center text-center">
                  <LoadingIndicator className="w-10 h-10 " />
                </div>}
        {isError && <p className='text-center py-4 text-red-500'>خطا در دریافت گزارشات.</p>}
        {filteredEvents && filteredEvents.length === 0 && <p className='text-center py-4 text-gray-500'>گزارشی برای نمایش وجود ندارد.</p>}
        
        <div className='space-y-4 divide-y divide-gray-100'>
            {filteredEvents?.map((event) => (
              <div key={event.id} className="pt-4 first:pt-0">
                <StudentReports event={event} onOpenModal={handleOpenDetailModal} />
              </div>
            ))}
        </div>
      </div>
      
      <ReportDetailModal 
        eventId={selectedEventId}
        onClose={handleCloseDetailModal}
      />

      <LessonModal
        isModalOpen={openModal === 'lessons'}
        handleCloseModal={() => setOpenModal(null)}
        initialSelection={selectedLesson}
        onConfirm={handleConfirmLesson}
      />
      
      <ToolsModal
        isModalOpen={openModal === 'tools'}
        handleCloseModal={() => setOpenModal(null)}
        initialSelection={selectedTool}
        onConfirm={handleConfirmTool}
      />
    </>
  );
};

export default ReportsPage;
```

================
FILE: src\teacher\pages\ContentContainer.tsx
================

```

import StudentsActivities from '../components/contentContainer/students/StudentsActivities'


const ContentContainer = () => {
  return (
    <div>
     
      <StudentsActivities/>
      
     
    </div>
  )
}

export default ContentContainer

```

================
FILE: src\teacher\pages\ClassChat.tsx
================

```
import RecentChats from '../../components/RecentChats'

const ClassChat = () => {
  return (
     <div>
        <RecentChats />
    </div>
  )
}

export default ClassChat
```

================
FILE: src\student\pages\StudentHome.tsx
================

```
import Header from "../components/home/Header";
import ToolCard from "../components/home/ToolCard";
import RecentChatCard from "../../components/common/RecentChatCard";
import { useChatSessions } from "../../hooks/useChatSessions";
import darsyar from "./../../assets/images/darsyar.webp";
import azmon from "./../../assets/images/azmon.webp";
import konjkav from "./../../assets/images/konjkav.webp";
import tarkibkon from "./../../assets/images/tarkibkon.webp";

const StudentHome = () => {
  const { data: chatSessions = [], isLoading: chatsLoading } = useChatSessions();

  const hasRecentChatsForTool = (tool: string) => {
    return chatSessions.some((session) => session.tool === tool);
  };

  return (
    <div className="bg-backGround-1 min-h-screen pb-10">
      <Header />

      <div className=" mx-[24px] pt-[80px]">
        <h1 className="mb-[16px] font-extrabold text-[14px]">ابزار‌ها</h1>
        <div className="mb-[24px]">
          <div className="flex justify-center items-stretch mb-[40px] gap-[12px]">
            <ToolCard
              title="درس‌یـــــار"
              description="بهت کمک می‌کنه، درسا رو بهتر بفهمی!"
              tool="DARS_YAR"
              hasRecentChats={hasRecentChatsForTool("DARS_YAR")}
              image={darsyar}
            />
            <ToolCard
              title="آزمون‌ســـاز"
              description="کلی نمونه سوال حرفه‌ای برات طراحی می‌کنه!"
              tool="AZMOON_SAZ"
              hasRecentChats={hasRecentChatsForTool("AZMOON_SAZ")}
              image={azmon}
            />
          </div>
          <div className="flex justify-center items-stretch gap-[12px]">
            <ToolCard
              title="ترکــــــیب‌کن"
              description="درسارو همونطوری که خودت دوست داری یادبگیر."
              tool="TARKIB_KON"
              hasRecentChats={hasRecentChatsForTool("TARKIB_KON")}
              image={tarkibkon}
            />
            <ToolCard
              title="کنج‌کـــاو"
              description="همراه خوب تو برای یادگرفتن چیزای جدید!"
              tool="KONJKAV_SHO"
              hasRecentChats={hasRecentChatsForTool("KONJKAV_SHO")}
              image={konjkav}
            />
          </div>
        </div>

        <h3 className="font-extrabold text-right text-[14px] mb-[16px]">
          چت‌های اخیر
        </h3>
        <div className="space-y-[12px]">
          {chatsLoading ? (
            <div className="text-center py-4">در حال بارگذاری...</div>
          ) : chatSessions.length === 0 ? (
            <div className="text-center text-gray-500 py-4">
              هیچ چت اخیری وجود ندارد
            </div>
          ) : (
            chatSessions.map((session) => (
              <RecentChatCard
                key={session.id}
                id={session.id}
                title={session.title}
                tool={session.tool}
                subject={session.subject}
                updatedAt={session.updated_at}
              />
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default StudentHome;
```

================
FILE: src\student\pages\ResumeChatPage.tsx
================

```
// src/student/pages/ResumeChatPage.tsx

import { useParams, useNavigate } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { getSessionDetails } from '../../api-chat';
import Chat from '../../components/common/Chat';
import Header from '../../components/common/Header';
import { ChatSession } from '../../types/api';
import { useState } from 'react';
import LoadingIndicator from '../../components/common/LoadingIndicator';
import { useSelector } from 'react-redux';
import { RootState } from '../../store';

const ResumeChatPage = () => {
    const { sessionId } = useParams<{ sessionId: string }>();
    const navigate = useNavigate();
    const [isChatting, setIsChatting] = useState(false); 
    const userRole = useSelector((state: RootState) => state.user.role);

    const { data: session, isLoading, isError } = useQuery<ChatSession>({
        queryKey: ['sessionDetails', sessionId],
        queryFn: () => {
            if (!sessionId) {
                return Promise.reject(new Error("No session ID provided"));
            }
            console.log(`API CALL: getSessionDetails for session ID: ${sessionId} from ResumeChatPage`);
            return getSessionDetails(sessionId);
        },
        enabled: !!sessionId,
    });

    const suggestions = [
        { text: 'برام بیشتر توضیح بده' },
        { text: 'نکات کلیدی رو بگو' },
        { text: 'برام خلاصه کن' },
        { text: 'یه مثال دیگه بزن' }
    ];

    const getStudentBackPath = (tool: string): string => {
        switch (tool) {
            case 'DARS_YAR': return '/student/darsyar/recent-chat';
            case 'KONJKAV_SHO': return '/student/konjkav/recent-chat';
            case 'TARKIB_KON': return '/student/tarkibkon/recent-chat';
            default: return '/student';
        }
    };

    const backPath = userRole === 'STUDENT' && session ? getStudentBackPath(session.tool) : undefined;
    const onBackClick = userRole === 'STAFF' ? () => navigate(-1) : undefined;
    
    const getHeaderTitle = () => {
        if (isLoading) return "در حال بارگذاری...";
        if (isError || !session) return "خطا";
        return session.title || "گفتگو";
    };

    if (isLoading) {
        return (
            <div className="bg-backGround-1 h-screen flex flex-col">
                <Header title={getHeaderTitle()} onBackClick={onBackClick} backPath={backPath} />
                <div className="flex-grow flex items-center justify-center">
                    <div className="flex justify-center items-center text-center">
                        <LoadingIndicator className="w-10 h-10 " />
                    </div>
                </div>
            </div>
        );
    }

    if (isError || !session) {
        console.error("Failed to load chat session");
        return (
            <div className="bg-backGround-1 h-screen flex flex-col">
                <Header title={getHeaderTitle()} onBackClick={onBackClick} backPath={backPath}/>
                <div className="flex-grow flex items-center justify-center">
                    <p>خطا در بارگذاری گفتگو.</p>
                </div>
            </div>
        );
    }
    
    return (
        <div className="bg-backGround-1 h-screen flex flex-col">
            <Header title={getHeaderTitle()} onBackClick={onBackClick} backPath={backPath} />
            <div className="flex-grow flex flex-col">
                <Chat 
                    resumeSessionId={sessionId} 
                    setIsChatting={setIsChatting}
                    suggestions={session?.tool === 'DARS_YAR' ? suggestions : undefined}
                />
            </div>
        </div>
    );
}

export default ResumeChatPage;
```

================
FILE: src\components\common\Toast.tsx
================

```
import React, { useEffect } from 'react';

interface ToastProps {
  message: string;
  type: 'success' | 'error';
  onClose: () => void;
}

const Toast: React.FC<ToastProps> = ({ message, type, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      onClose();
    }, 5000); // Close after 5 seconds

    return () => {
      clearTimeout(timer);
    };
  }, [onClose]);

  const baseClasses = 'fixed top-5 right-5 p-4 rounded-lg shadow-lg text-white z-50 animate-pulse';
  const typeClasses = type === 'success' ? 'bg-green-500' : 'bg-red-500';

  return (
    <div className={`${baseClasses} ${typeClasses}`}>
      <span>{message}</span>
      <button onClick={onClose} className="ml-4 font-bold">X</button>
    </div>
  );
};

export default Toast;
```

================
FILE: src\components\common\SuggestionScroller.tsx
================

```
import React from 'react';
import SuggestionChip from './SuggestionChip';

interface SuggestionScrollerProps {
  suggestions: string[];
  onSelect: (suggestion: string) => void;
}

const SuggestionScroller: React.FC<SuggestionScrollerProps> = ({ suggestions, onSelect }) => {
  return (
    <div className="w-full overflow-x-auto scrollbar-hide">
      <div className="flex items-center gap-2 px-4 py-2">
        {suggestions.map((suggestion) => (
          <SuggestionChip key={suggestion} text={suggestion} onClick={onSelect} />
        ))}
      </div>
    </div>
  );
};

export default SuggestionScroller;
```

================
FILE: src\components\common\SuggestionChip.tsx
================

```
import React from 'react';

interface SuggestionChipProps {
  text: string;
  onClick: (text: string) => void;
}

const SuggestionChip: React.FC<SuggestionChipProps> = ({ text, onClick }) => {
  return (
    
        <button
      onClick={() => onClick(text)}
      className="flex-shrink-0 flex items-center gap-2 infoGradient  rounded-[16px] py-3 px-4 text-sm font-semibold whitespace-nowrap hover:bg-backGround-1 transition-colors"
    >
     
      <span>{text}</span>
    </button>
    
  );
};

export default SuggestionChip;
```

================
FILE: src\components\common\RecentChatCard.tsx
================

```
// src/components/common/RecentChatCard.tsx

import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from '../../store';

// Import tool icons
import darsyarIcon from './../../assets/images/darsyar.webp';
import konjkavIcon from './../../assets/images/konjkav.webp';
import tarkibkonIcon from './../../assets/images/tarkibkon.webp';
import azmonIcon from './../../assets/images/azmon.webp';
import defaultIcon from './../../assets/images/happyface.webp';

interface RecentChatCardProps {
  id: string;
  title: string;
  tool: string;
  subject: string;
  updatedAt: string;
}

const toolInfoMap: { [key: string]: { name: string; icon: string } } = {
  DARS_YAR: { name: 'درس‌یار', icon: darsyarIcon },
  KONJKAV_SHO: { name: 'کنجکاو', icon: konjkavIcon },
  TARKIB_KON: { name: 'ترکیب‌کن', icon: tarkibkonIcon },
  AZMOON_SAZ: { name: 'آزمون‌ساز', icon: azmonIcon },
};

const RecentChatCard: React.FC<RecentChatCardProps> = ({ id, title, tool, subject, updatedAt }) => {
  const navigate = useNavigate();
  const userRole = useSelector((state: RootState) => state.user.role);

  const formatDate = (dateString: string) => {
    try {
      if (!dateString) return '';
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return '';
      const options: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
      return new Intl.DateTimeFormat('fa-IR', options).format(date);
    } catch (error) {
      console.error('Error formatting date:', error);
      return '';
    }
  };

  const toolDetails = toolInfoMap[tool] || { name: tool, icon: defaultIcon };

  const handleClick = () => {
    console.log(`Navigating to chat session: ${id}`);
    const basePath = userRole === 'STUDENT' ? '/student' : '/teacher';
    navigate(`${basePath}/chat/${id}`);
  };

  return (
    <div onClick={handleClick} className="cursor-pointer">
      <div className='card-box'>
        <div className='flex justify-start items-center bg-white rounded-[24px]  gap-[16px]'>
          <div>
            <img className='w-[56px] h-[56px]  m-[16px]' src={toolDetails.icon} alt={toolDetails.name} />
          </div>
          <div className='flex flex-col gap-[4px] w-full overflow-hidden'>
            <h1 className='font-extrabold truncate text-[14px]'>{title}</h1>
            <div className='flex flex-wrap items-center gap-[4px]'>
              <p className='bg-backGround-1 px-[8px] rounded-[16px] text-[10px] py-[2px]'>{toolDetails.name}</p>
              <p className='bg-backGround-1 px-[8px] rounded-[16px] text-[10px] py-[2px]'>{subject}</p>
              <p className='bg-backGround-1 px-[8px] rounded-[16px] text-[10px] py-[2px]'>
                {formatDate(updatedAt)}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default RecentChatCard;
```

================
FILE: src\components\common\LoadingIndicator.tsx
================

```
import React from 'react';

interface LoadingIndicatorProps {
  className?: string;
}

const LoadingIndicator: React.FC<LoadingIndicatorProps> = ({ className = 'w-8 h-8' }) => {
  return (
    <svg
      className={`stroke-custom-purple ${className}`}
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g>
        <circle cx="12" cy="12" r="9.5" fill="none" strokeWidth="3" strokeLinecap="round">
          <animate
            attributeName="stroke-dasharray"
            dur="1.5s"
            calcMode="spline"
            values="0 150;42 150;42 150;42 150"
            keyTimes="0;0.475;0.95;1"
            keySplines="0.42,0,0.58,1;0.42,0,0.58,1;0.42,0,0.58,1"
            repeatCount="indefinite"
          />
          <animate
            attributeName="stroke-dashoffset"
            dur="1.5s"
            calcMode="spline"
            values="0;-16;-59;-59"
            keyTimes="0;0.475;0.95;1"
            keySplines="0.42,0,0.58,1;0.42,0,0.58,1;0.42,0,0.58,1"
            repeatCount="indefinite"
          />
        </circle>
        <animateTransform
          attributeName="transform"
          type="rotate"
          dur="2s"
          values="0 12 12;360 12 12"
          repeatCount="indefinite"
        />
      </g>
    </svg>
  );
};

export default LoadingIndicator;
```

================
FILE: src\components\common\Header.tsx
================

```
import { FC } from "react";
import React from "react"; // Import React for inline SVG
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";

interface ButtonType {
  title: string;
  onBackClick?: () => void;
  backPath?: string; // ADDED: Optional prop for a custom back path
}

const Header: FC<ButtonType> = ({ title, onBackClick, backPath }) => {
  const navigate = useNavigate();
  const role=useSelector((state: any)=>state?.user.role)
 
  const handleBackClick = () => {
    if (onBackClick) {
      onBackClick();
      return;
    }
    
    if (backPath) {
      navigate(backPath);
      return;
    }
    
    if (role==='STUDENT') {
      navigate('/student');
    } else {
      navigate('/teacher');
    }
  }

  return (
    <div>
      <header
        className={`
          flex items-center justify-between bg-white py-[24px] px-[16px] h-[52px]
          fixed top-0 w-full z-100
        `}
      >
        <div className="flex items-center ">
            <button onClick={handleBackClick} className="mr-4 ">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path d="M9.29289 4.29289C9.68342 3.90237 10.3166 3.90237 10.7071 4.29289L16.7071 10.2929C17.0976 10.6834 17.0976 11.3166 16.7071 11.7071L10.7071 17.7071C10.3166 18.0976 9.68342 18.0976 9.29289 17.7071C8.90237 17.3166 8.90237 16.6834 9.29289 16.2929L14.5858 11L9.29289 5.70711C8.90237 5.31658 8.90237 4.68342 9.29289 4.29289Z" fill="#333333"/>
             </svg>
            </button>
        </div>

        <div className="text-[16px] font-extrabold absolute left-1/2 -translate-x-1/2">
          {title}
        </div>

        <div className="w-[24px]"></div>
      </header>

      <div className="h-[52px]"></div>
      <hr className="border-[1.5px] border-borderColor-1 w-full fixed" />
    </div>
  );
};

export default Header;
```

================
FILE: src\components\common\DisableChatButton.tsx
================

```
import React from 'react';

interface ButtonType {
  textButton: string;
}

const DisableChatButton: React.FC<ButtonType> = ({ textButton }) => {
  return (
   
      <div
        className="
          fixed bottom-0 left-0 right-0
        bg-white z-50
       w-full
      "
        
      >
        <hr className="border-[1.5px] border-borderColor-1 w-full" />
        <div className="px-[24px] py-[12px] flex justify-center items-center w-full">
          <div className="disableButton-box rounded-[16px]  mx-[16px] w-full">
            <button className="disableChat-button text-borderColor-1 px-[8px] py-[12px] w-full  cursor-pointer">
              {textButton}
            </button>
          </div>
        </div>
      </div>
    
  );
};

export default DisableChatButton;
```

================
FILE: src\components\common\ChatButton.tsx
================

```
import React from 'react';

interface ButtonType {
  textButton: string;
  onClick?: () => void;
}

const ChatButton: React.FC<ButtonType> = ({ textButton, onClick }) => {
  return (
    <div
      className="
        fixed bottom-0 left-0 right-0
        bg-white z-50
       w-full
      "
    >
      <hr className="border-[1.5px] border-borderColor-1 w-full " />
      <div className=" px-[24px] py-[12px] flex justify-center items-center w-full">
        <div className=" rounded-[16px] w-full  mx-[16px] ">
          <button
            className="button-box text-borderColor-1 w-full cursor-pointer px-[8px] py-[12px]  "
            onClick={onClick}
          >
            {textButton}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatButton;
```

================
FILE: src\components\common\Chat.tsx
================

```
// src/components/common/Chat.tsx

import React, { useState, useEffect, useRef, useCallback } from "react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import { useQueryClient } from "@tanstack/react-query";
import { sendMessage, getSessionDetails } from "../../api-chat";
import { ApiMessage, ChatSession } from "../../types/api";
import Toast from "./Toast";
import vector from './../../assets/images/Vector.svg';
import SuggestionChip from "./SuggestionChip"; 

interface Message {
  id: string;
  sender: "user" | "bot";
  text: string;
  questions?: string[];
}

interface Suggestion {
  text: string;
}

interface ChatProps {
  startSession?: () => Promise<ChatSession>;
  resumeSessionId?: string;
  setIsChatting: React.Dispatch<React.SetStateAction<boolean>>;
  tool?: 'DARS_YAR' | 'KONJKAV_SHO' | 'TARKIB_KON' | string;
  initialUserActionText?: string;
  onFirstInteraction?: () => void;
  suggestions?: Suggestion[];
}

const mapApiMessageToUiMessage = (apiMessage: ApiMessage, tool: string): Message => {
  let text = apiMessage.content;
  let questions: string[] | undefined = undefined;

  if (
    tool === 'KONJKAV_SHO' &&
    apiMessage.sender_type === 'AI' &&
    apiMessage.raw_ai_response &&
    Array.isArray(apiMessage.raw_ai_response.follow_up_questions)
  ) {
    text = apiMessage.raw_ai_response.explanation || apiMessage.content;
    questions = apiMessage.raw_ai_response.follow_up_questions;
  }
  
  return {
    id: apiMessage.id,
    sender: apiMessage.sender_type === 'AI' ? 'bot' : 'user',
    text,
    questions: questions && questions.length > 0 ? questions : undefined,
  };
};

const Chat: React.FC<ChatProps> = ({ startSession, resumeSessionId, setIsChatting, tool, initialUserActionText, onFirstInteraction, suggestions }) => {
  const queryClient = useQueryClient();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [currentTool, setCurrentTool] = useState<string | undefined>(tool);
  const [inputAreaHeight, setInputAreaHeight] = useState(0);

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const inputAreaRef = useRef<HTMLDivElement>(null);
  const loadingRef = useRef(isLoading);
  const hasInteracted = useRef(false);
  
  const handleInteraction = useCallback(() => {
    if (!hasInteracted.current && onFirstInteraction) {
      onFirstInteraction();
      hasInteracted.current = true;
    }
  }, [onFirstInteraction]);
  
  useEffect(() => {
    loadingRef.current = isLoading;
  }, [isLoading]);

  const pollForResponse = useCallback((sid: string, originalMessageCount: number) => {
    const timeout = 35000;
    const interval = 1000;
    let pollTimeoutId: ReturnType<typeof setTimeout>;

    const poller = setInterval(async () => {
      try {
        const sessionDetails = await getSessionDetails(sid);
        if (sessionDetails.messages.length > originalMessageCount) {
          const lastMessage = sessionDetails.messages[sessionDetails.messages.length - 1];
          if (lastMessage.sender_type === 'AI') {
            clearInterval(poller);
            clearTimeout(pollTimeoutId);
            const uiMessages = sessionDetails.messages
              .filter(msg => msg.sender_type !== 'SYSTEM')
              .map(msg => mapApiMessageToUiMessage(msg, sessionDetails.tool));
            setMessages(uiMessages);
            setIsLoading(false);
          }
        }
      } catch (err) {
        console.error("Polling error:", err);
      }
    }, interval);

    pollTimeoutId = setTimeout(() => {
      clearInterval(poller);
      if (loadingRef.current) {
        setError("پاسخی از سرور دریافت نشد. لطفاً دوباره تلاش کنید.");
        setIsLoading(false);
      }
    }, timeout);
  }, []);

  useEffect(() => {
    const initChat = async () => {
      setIsLoading(true);
      try {
        let sessionToProcess: ChatSession;
        let toolName: string;

        if (resumeSessionId) {
          handleInteraction();
          sessionToProcess = await getSessionDetails(resumeSessionId);
          toolName = sessionToProcess.tool;
        } else if (startSession) {
          if ((tool === 'KONJKAV_SHO' || tool === 'TARKIB_KON') && initialUserActionText) {
            const tempMessage: Message = { id: `temp-${Date.now()}`, sender: 'user', text: initialUserActionText };
            setMessages([tempMessage]);
          }
          sessionToProcess = await startSession();
          await queryClient.invalidateQueries({ queryKey: ['chatSessions'] });
          toolName = tool!;
        } else {
          throw new Error("Chat component requires either 'resumeSessionId' or 'startSession'");
        }

        setSessionId(sessionToProcess.id);
        setCurrentTool(toolName);
        setIsChatting(true);

        const serverMessages = sessionToProcess.messages.filter(msg => msg.sender_type !== 'SYSTEM');
        const uiMessages = serverMessages.map(msg => mapApiMessageToUiMessage(msg, toolName));
        setMessages(uiMessages);

        const lastMessage = serverMessages[serverMessages.length - 1];
        if (lastMessage && lastMessage.sender_type !== 'AI') {
          pollForResponse(sessionToProcess.id, serverMessages.length);
        } else {
          setIsLoading(false);
        }
      } catch (err) {
        setError("خطا در شروع یا بارگذاری گفتگو. لطفاً دوباره تلاش کنید.");
        console.error('Failed to initialize chat session:', err);
        setMessages([]);
        setIsLoading(false);
      }
    };

    initChat();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [resumeSessionId, startSession]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isLoading]);

  useEffect(() => {
    if (inputAreaRef.current) {
      setInputAreaHeight(inputAreaRef.current.offsetHeight);
    }
  }, [inputMessage, suggestions, isLoading, messages]); 

  const sendUserMessage = async (content: string) => {
    if (!sessionId || content.trim() === "" || isLoading) return;

    handleInteraction();

    const tempUserMessage: Message = {
      id: `temp-${Date.now()}`,
      sender: "user",
      text: content,
    };
    setMessages(prev => [...prev, tempUserMessage]);
    setIsLoading(true);

    try {
      await sendMessage(sessionId, content);
      const sessionDetailsBeforePoll = await getSessionDetails(sessionId);
      pollForResponse(sessionId, sessionDetailsBeforePoll.messages.length);
    } catch (err) {
      setError("خطا در ارسال پیام.");
      setMessages(prev => prev.filter(m => m.id !== tempUserMessage.id));
      setIsLoading(false);
    }
  };

  const handleSendMessage = async () => {
    await sendUserMessage(inputMessage.trim());
    setInputMessage("");
  };

  const handleSuggestionClick = async (suggestionText: string) => {
    await sendUserMessage(suggestionText);
  };

  const handleQuestionClick = async (question: string) => {
    await sendUserMessage(question);
  };
  
  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setInputMessage(e.target.value);
    if (e.target.value.length > 0) {
      handleInteraction();
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey && !isLoading) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const showTypingIndicator = isLoading && messages.length > 0 && messages[messages.length - 1]?.sender === 'user';
  
  const lastMessage = messages.length > 0 ? messages[messages.length - 1] : null;
  // EDITED: Corrected logic to show suggestions on initial load or after a bot message.
  const shouldShowSuggestions = suggestions && !isLoading && (lastMessage?.sender === 'bot' || messages.length === 0);

  return (
    <div className='flex flex-col flex-grow bg-backGround-1 relative'>
      {error && <Toast message={error} type="error" onClose={() => setError(null)} />}
      
      <div className={`flex-1 overflow-y-auto p-4`} style={{ paddingBottom: `${inputAreaHeight}px` }}>
        {messages.map((msg) => (
          <div key={msg.id} className={`w-full flex my-2 ${msg.sender === "user" ? "justify-start" : "justify-start"}`}>
            <div 
              dir="auto" 
              className={`
                prose prose-sm break-words
                ${msg.sender === 'user' ? 'max-w-[85%]' : 'w-full'}
                p-4 rounded-[16px] 
                ${msg.sender === "user" ? "border-chatButton-1 bg-backGroundCard border-[2px]" : "bg-white border-borderColor-1 border-[2px] prose-invert"}
              `}>
              <ReactMarkdown
                  remarkPlugins={[remarkGfm]}
                  components={{
                      a: ({ node, ...props }) => <a {...props} target="_blank" rel="noopener noreferrer" />
                  }}
              >
                  {msg.text}
              </ReactMarkdown>
              
              {msg.sender === 'bot' && msg.questions && currentTool === 'KONJKAV_SHO' && (
                <div className="mt-3 space-y-2">
                  {msg.questions.map((question, index) => (
                    <button
                      key={index}
                      onClick={() => handleQuestionClick(question)}
                      disabled={isLoading}
                      className="block w-full text-right p-3 rounded-lg text-sm text-gray-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed infoGradient"
                    >
                      {index + 1}. {question}
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        ))}

        {showTypingIndicator && (
          <div className="w-full flex my-2 justify-start">
            <div className="p-3 rounded-2xl bg-white border border-borderColor-1">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-gray-600 rounded-full animate-bounce" style={{ animationDelay: "0s" }}></div>
                <div className="w-2 h-2 bg-gray-600 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                <div className="w-2 h-2 bg-gray-600 rounded-full animate-bounce" style={{ animationDelay: "0.4s" }}></div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div ref={inputAreaRef} className="fixed bottom-0 left-0 right-0 bg-backGround-1 border-borderColor-1 z-20">
        
        {shouldShowSuggestions && (
          <div className="mr-6 py-4">
             <div className="flex gap-2 overflow-x-auto pb-3 scrollbar-hide">
                {suggestions.map((suggestion) => (
                    <SuggestionChip 
                        key={suggestion.text} 
                        text={suggestion.text} 
                        onClick={() => handleSuggestionClick(suggestion.text)}
                    />
                ))}
             </div>
          </div>
        )}
        
        <div className="p-4 bg-backGround-1 pt-0">
          <div className="bg-gradient-to-r from-[#FFB800] via-[#FE4C4A] to-[#6248FF] p-[2px] rounded-[18px]">
            <div className="relative flex items-center">
              <textarea
                ref={textareaRef}
                rows={1}
                className="w-full py-4 pl-4 pr-14 rounded-[16px] focus:outline-none bg-white resize-none overflow-y-auto max-h-40"
                placeholder="اینجا بنویس ... "
                value={inputMessage}
                onChange={handleInputChange}
                onKeyPress={handleKeyPress}
                disabled={!sessionId || isLoading}
              />
              <button
                onClick={handleSendMessage}
                disabled={isLoading || inputMessage.trim() === "" || !sessionId}
                className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center justify-center bg-[#6248FF] w-10 h-10 rounded-full shadow-lg transition duration-200 ease-in-out transform hover:scale-105 disabled:bg-[#DCDCDC] disabled:cursor-not-allowed"
              >
                <img className="w-4 h-4" src={vector} alt="Send" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chat;
```

================
FILE: src\teacher\components\home\ToolCard.tsx
================

```
// src/teacher/components/home/ToolCard.tsx

import { FC } from "react";
import { useNavigate } from "react-router-dom";

interface ToolCardProps {
  title: string;
  description: string;
  tool: "DARS_YAR" | "KONJKAV_SHO" | "AZMOON_SAZ" | "TARKIB_KON";
  hasRecentChats?: boolean;
  image:string
}

const getToolRoute = (tool: string, hasRecentChats: boolean) => {
  switch (tool) {
    case "DARS_YAR":
      return hasRecentChats ? "/student/darsyar/recent-chat" : "/student/darsyar/study-assistant";
    case "KONJKAV_SHO":
      return hasRecentChats ? "/student/konjkav/recent-chat" : "/student/konjkav/welcome";
    case "TARKIB_KON":
      return hasRecentChats ? "/student/tarkibkon/recent-chat" : "/student/tarkibkon/welcome";
    case "AZMOON_SAZ":
      return "#";
    default:
      return "/student";
  }
};

const ToolCard: FC<ToolCardProps> = ({  title, description, tool, hasRecentChats = false,image }) => {
  const navigate = useNavigate();

  const handleClick = () => {
    const route = getToolRoute(tool, hasRecentChats);
    navigate(route);
  };

  return (
  <div onClick={handleClick} className="w-full">
   
   <div className="card-box cursor-pointer  h-full">
     <div className="flex flex-col items-center text-center justify-between rounded-[24px] bg-white p-[16px] h-[160px] w-full">
      <img src={image} className="h-[56px] w-[56px] flex-shrink-0"/>
      <div className="flex flex-col justify-center flex-grow">
        <h3 className="font-extrabold text-[18px]">{title}</h3>
        <p className="text-[10px] leading-relaxed">{description}</p>
      </div>
    </div>
   </div>
  </div>
  );
};

export default ToolCard;
```

================
FILE: src\teacher\components\home\RecentChat.tsx
================

```
import React from 'react'
import darsyar from './../../../assets/images/darsyar.webp'

const RecentChatCard = () => {
  return (
    <div>
         <div className='card-box mb-[12px]'>
            <div className='flex justify-start items-center bg-white rounded-[24px] p-[16px] gap-[16px] pl-[24px]'>
                <div>
                    <img className='w-[56px] h-[56px] ' src={darsyar}/>
                </div>
                <div className='flex flex-col gap-[4px] '>
                    <h1 className='font-extrabold line-clamp-1 w-[215px] text-[14px]'>توضیحات مربوط به فتوسنتز و بقیه اطلاعات مهم و کاربری</h1>
                    <div className='flex justify-start items-start gap-[4px]'>
                        <p className=' bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'>د‌رس‌یار</p>
                    <p className='bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'> فارسی</p>
                    <p className='bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]' >19 خرداد</p>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
  )
}

export default RecentChatCard

```

================
FILE: src\teacher\components\home\ProgressQuestion.tsx
================

```
import React from 'react'
interface ProgressBarProps {
  progress: number; // The current progress percentage (0-100)
}

const ProgressQuestion:React.FC<ProgressBarProps> = ({ progress }) => {
     const clampedProgress = Math.max(0, Math.min(100, progress));
  return (
        <div className='mb-[12px]'>
         <div className='card-box'>
            <div className='flex flex-col items-center bg-white rounded-[24px] p-[16px] gap-[16px] pl-[24px]'>
             <div className='flex justify-between items-center'>
                <div>
                    <h1 className='text-[12px]'>
                        سوالات باقی مانده
                </h1>
                </div>
                <div className='mr-10 '>
                    <h1 className='bg-[#F2EFFF] rounded-[24px] text-backGroundButton py-[2px] px-[8px]'>
 50 از 100
                </h1>
                </div>
             </div>
                <div className="w-full  rounded-full h-4 bg-backGround-1 overflow-hidden ">
      <div
        className="bg-gradient-to-l from-custom-purple via-custom-orange-1 to-custom-orange-2 h-4 rounded-full transition-all duration-500 ease-out"
        style={{ width: `${clampedProgress}%` }}
        role="progressbar"
        aria-valuenow={clampedProgress}
        aria-valuemin={0}
        aria-valuemax={100}
      ></div>
    </div>
            </div>
        </div>
    </div>
    
  )
}

export default ProgressQuestion

```

================
FILE: src\teacher\components\home\Classes.tsx
================

```
import React from 'react';
import classImage from './../../../assets/images/class.webp'
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import LoadingIndicator from '../../../components/common/LoadingIndicator';

interface Class {
    id: string;
    name: string;
}

interface Student {
  id: string;
  full_name: string;
  last_activity_at: string;
  activity_status: 'Active' | 'Inactive';
  current_mood: {
    emoji: string;
    text: string;
  } | null; // Allow current_mood to be null
}

const Classes: React.FC = () => {
  // Use a type assertion or provide a generic type to useQuery for better type inference
  const { data: classes, isLoading: isLoadingClasses } = useQuery<Class[]>({
        queryKey: ['teacherClasses'],
        queryFn: async () => {
            console.log("API CALL: fetching classes for teacher");
            const res = await axios.get('https://kiddo2.pythonanywhere.com/api/v1/academics/classes/');
            console.log("API RESPONSE: fetching classes success", res.data);
            return res.data;
        },
        staleTime: 300000, // Cache for 5 minutes
    });

    const classId = classes?.[0]?.id;

    const { data: students, isLoading: isLoadingStudents, isError, error } = useQuery<Student[]>({
        queryKey: ['students', classId],
        queryFn: async () => {
            console.log(`API CALL: fetching students for class ${classId}`);
            const res = await axios.get(`https://kiddo2.pythonanywhere.com/api/v1/academics/classes/${classId}/students/`);
            console.log(`API RESPONSE: fetching students for class ${classId} success`, res.data);
            return res.data;
        },
        enabled: !!classId,
    });
 
  // Log data when not loading, for debugging (can be removed in production)
  // Check if data exists before logging its structure, as it's undefined initially
  if (!isLoadingClasses && classes) {
    console.log("Fetched Data:", classes);
  }
  console.log(students)

  // 2. Handle different states: Loading, Error, and Success

  // Loading state
  if (isLoadingClasses) {
    return  <div className="flex justify-center items-center text-center">
                  <LoadingIndicator className="w-10 h-10 " />
                </div>;
  }

  // Error state
  if (isError) {
    console.error("Error fetching classes:", error); // Log the error for debugging
    return <div className="p-4 text-center text-red-500">خطا در بارگذاری کلاس‌ها: {error?.message || 'نامشخص'}</div>; // "Error loading classes: ..."
  }

  // Success state: Data is available
  return (
    <>
      <div className="bg-backGround-1 "> {/* A general container for the whole section */}
        {/* Check if data is an array and not empty before mapping */}
       
          <div className=""> {/* Added space-y for consistent vertical spacing */}
            {classes?.map((classItem) => (
              <div key={classItem.id} className='mb-[12px]'> {/* key prop is essential */}
                <div className='card-box'> {/* Ensure .card-box is defined in your CSS */}
                  <div className='flex justify-start items-center bg-white rounded-[24px] p-[16px] gap-[16px] '>
                    <div>
                      <img className='w-[56px] h-[56px]' src={classImage} alt={`تصویر ${classItem.name}`} /> {/* Dynamic alt text */}
                    </div>
                    <div className='flex flex-col '>
                      <h1 className='font-extrabold line-clamp-1 text-[14px]'>{classItem.name}</h1>
                      <div className='flex justify-start items-start'>
                        <p className='bg-backGround-1 px-[8px] rounded-[16px] text-[10px] py-[2px]'>
                          {students?.length} دانش آموز
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        
      </div>
    </>
  );
};

export default Classes;
```

================
FILE: src\teacher\components\contentContainer\StudentAlert.tsx
================

```
import React, { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useNavigate } from "react-router-dom";
import { useDrag } from '@use-gesture/react';
import { animated, useSpring, config } from '@react-spring/web';

import { fetchChatEvents, resolveChatEvent } from "../../../api-teacher";
import { ChatEvent } from "../../../types/api";

import Modal from "./Modal";
import { FluentEmoji } from "@lobehub/fluent-emoji";
import LoadingIndicator from "../../../components/common/LoadingIndicator";
import dangerButton from "./../../../assets/images/dangerButton.svg";

// کامپوننت هر آیتم هشدار برای مدیریت انیمیشن و swipe
const AlertItem: React.FC<{
  event: ChatEvent;
  onResolve: (id: string) => void;
  onClick: (event: ChatEvent) => void;
}> = ({ event, onResolve, onClick }) => {
  const [{ x, opacity, height }, api] = useSpring(() => ({
    x: 0,
    opacity: 1,
    height: 'auto',
    config: config.stiff,
  }));

  const bind = useDrag(({ down, movement: [mx], direction: [xDir], cancel }) => {
    // اگر کاربر بیش از نصف عرض صفحه swipe کند، رویداد حل می‌شود
    if (Math.abs(mx) > window.innerWidth / 2) {
      cancel(); // توقف ژست
      api.start({
        to: async (next) => {
          await next({ x: xDir * window.innerWidth, opacity: 0 });
          await next({ height: 0, immediate: true });
        },
        onRest: () => onResolve(event.id), // فراخوانی resolve بعد از اتمام انیمیشن
      });
    } else {
      // در غیر این صورت، به جای اول خود برمی‌گردد
      api.start({ x: down ? mx : 0, immediate: down });
    }
  }, {
    axis: 'x',
    filterTaps: true, // اجازه می‌دهد onClick کار کند
    preventScroll: true,
  });

  return (
    <animated.div
      {...bind()}
      style={{ x, opacity, height, touchAction: 'pan-y' }}
      onClick={() => onClick(event)}
      className="alert-box"
    >
      <div className="flex justify-between items-center bg-[#FFF0F0] rounded-[16px] px-[16px] py-[12px] gap-[16px] pl-[24px] text-[#FE4C4A] text-[12px] cursor-pointer">
        <div className="flex items-center gap-[8px]">
          <img src={dangerButton} className="mb-[2px]" alt="Danger"/>
          <h1 className="line-clamp-1">
            {event.student_name} رفتار‌های خطرناکی دارد
          </h1>
        </div>
        <button className="font-extrabold text-[12px]">بررسی</button>
      </div>
    </animated.div>
  );
};


const StudentAlert = () => {
  const { data: events, isLoading } = useQuery({
    queryKey: ["chatEvents"],
    queryFn: fetchChatEvents,
  });
  
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const [selectedEvent, setSelectedEvent] = useState<ChatEvent | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const resolveEventMutation = useMutation({
    mutationFn: (eventId: string) => resolveChatEvent(eventId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['chatEvents'] });
      setIsModalOpen(false);
      setSelectedEvent(null);
    },
    onError: (error) => {
      console.error("Failed to resolve event", error);
      // TODO: Show toast on error
    }
  });

  const handleOpenModal = (event: ChatEvent) => {
    setSelectedEvent(event);
    setIsModalOpen(true);
  };

  const handleViewChat = () => {
    if (selectedEvent?.session_id) {
      navigate(`/teacher/chat/${selectedEvent.session_id}`);
    }
    setIsModalOpen(false);
  };

  const handleResolveClick = () => {
    if (selectedEvent) {
      resolveEventMutation.mutate(selectedEvent.id);
    }
  };

  const dangerEvents =
    events?.filter((e) => e.level === "DANGER" && !e.is_resolved) || [];

  if (isLoading) {
    return (
      <div className="flex justify-center items-center text-center py-[16px]">
        <LoadingIndicator className="w-8 h-8" />
      </div>
    );
  }
  
  if (dangerEvents.length === 0) {
    return null; // اگر هشداری نباشد، چیزی نمایش داده نمی‌شود
  }

  return (
    <>
      <div className="py-[16px] flex flex-col gap-[12px]">
        {dangerEvents.map((event) => (
          <AlertItem 
            key={event.id}
            event={event}
            onResolve={(id) => resolveEventMutation.mutate(id)}
            onClick={handleOpenModal}
          />
        ))}
      </div>

      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
        {selectedEvent && (
          <div className="flex flex-col justify-center gap-4">
            <div className="flex flex-col items-center gap-2">
              <div className="p-2 bg-backGround-1 rounded-full">
                <FluentEmoji emoji={selectedEvent.emoji} size={70} type="anim" />
              </div>
              <h1 className="font-bold text-lg">{selectedEvent.student_name}</h1>
              <div className="flex justify-center gap-2">
                <p className="bg-backGround-1 px-3 py-1 rounded-full text-xs">{selectedEvent.subject_name}</p>
                <p className="bg-backGround-1 px-3 py-1 rounded-full text-xs">{selectedEvent.level}</p>
              </div>
            </div>

            <div className="text-right">
              <h2 className="font-bold mb-1">توضیحات</h2>
              <p className="text-sm text-gray-700">{selectedEvent.overview}</p>
            </div>
            
            <div className="mt-6 space-y-3">
              <div className="chat-button rounded-[16px] w-full" onClick={handleResolveClick}>
                <button disabled={resolveEventMutation.isPending} className="button-box text-white w-full cursor-pointer p-[16px] disabled:opacity-70">
                  {resolveEventMutation.isPending ? 'در حال ثبت...' : 'بررسی شد'}
                </button>
              </div>
              <div className="disableButton-box rounded-[16px] w-full" onClick={handleViewChat}>
                <button className="disableChat-button text-gray-500 w-full cursor-pointer p-[16px]">
                  مشاهده چت
                </button>
              </div>
            </div>
          </div>
        )}
      </Modal>
    </>
  );
};

export default StudentAlert;
```

================
FILE: src\teacher\components\contentContainer\Navbar.tsx
================

```
import React from 'react';
import { NavLink } from 'react-router-dom';
import studentIcon from './../../../assets/images/reportsPage/student.png';
import reportIcon from './../../../assets/images/reportsPage/report.png';
import chatIcon from './../../../assets/images/reportsPage/chat.png';

const Navbar = () => {
  // A reusable component for each navigation item
  interface NavItemProps {
    to: string;
    icon: string;
    label: string;
  }

  const NavItem: React.FC<NavItemProps> = ({ to, icon, label }) => {
    // This function provides the classes for the NavLink container
    const getNavLinkClass = ({ isActive }: { isActive: boolean }) => {
      const baseClasses = 'flex items-center justify-center gap-2 px-2 py-2 rounded-[16px] flex-1 min-w-0 ';
      const activeClasses = 'bg-backGround-1';
      return `${baseClasses} ${isActive ? activeClasses : ''}`;
    };

    return (
      <NavLink to={to} className={getNavLinkClass}>
        {({ isActive }) => (
          <>
            <img 
              src={icon} 
              className="w-4 h-4 flex-shrink-0"
              alt={`${label} icon`} 
            />
            <span className='font-extrabold text-[14px] truncate text-center'>
              {label}
            </span>
          </>
        )}
      </NavLink>
    );
  };

  return (
    <div >
      <div className='flex items-center bg-white py-2 px-2 text-[12px] w-full '>
        <NavItem to="/teacher/students" label="دانش آموزان" icon={studentIcon} />
        <NavItem to="/teacher/reports" label="گزارشات" icon={reportIcon} />
        <NavItem to="/teacher/chat" label="چت ها" icon={chatIcon} />
      </div>
      <hr className="border-[1.5px] border-borderColor-1 w-full" />
    </div>
  );
};

export default Navbar;
```

================
FILE: src\teacher\components\contentContainer\Modal.tsx
================

```
// src/teacher/components/contentContainer/Modal.tsx
import React, { FC, useEffect } from 'react';
import { createPortal } from 'react-dom';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
}

const modalRoot = document.getElementById('modal-root');

const Modal: FC<ModalProps> = ({ isOpen, onClose, children }) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);


  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  const handleBackdropClick = (event: React.MouseEvent<HTMLDivElement>) => {
    if (event.target === event.currentTarget) {
      onClose();
    }
  };

  if (!isOpen || !modalRoot) return null;

  return createPortal(
    <div
      className="font-yekanBakh fixed inset-0 bg-backdrop flex items-end justify-center z-[110] transition-opacity duration-300"
      onClick={handleBackdropClick}
      aria-modal="true"
      role="dialog"
    >
      <div
        className="bg-white rounded-t-[24px] p-6 w-full max-h-[80vh] overflow-y-auto"
      >
        {children}
      </div>
    </div>,
    modalRoot
  );
};

export default Modal;
```

================
FILE: src\student\components\home\ToolCard.tsx
================

```
import { FC } from "react";
import { useNavigate } from "react-router-dom";
 
interface ToolCardProps {
  title: string;
  description: string;
  tool: "DARS_YAR" | "KONJKAV_SHO" | "AZMOON_SAZ" | "TARKIB_KON";
  hasRecentChats?: boolean;
  image:string
}

const getToolRoute = (tool: string, hasRecentChats: boolean) => {
  switch (tool) {
    case "DARS_YAR":
      return hasRecentChats ? "/student/darsyar/recent-chat" : "/student/darsyar/study-assistant";
    case "KONJKAV_SHO":
      return hasRecentChats ? "/student/konjkav/recent-chat" : "/student/konjkav/welcome";
    case "TARKIB_KON":
      return hasRecentChats ? "/student/tarkibkon/recent-chat" : "/student/tarkibkon/welcome";
    case "AZMOON_SAZ":
      return "#"; // No route for Azmoon Saz yet
    default:
      return "/student";
  }
};

const ToolCard: FC<ToolCardProps> = ({  title, description, tool, hasRecentChats = false,image }) => {
  const navigate = useNavigate();

  const handleClick = () => {
    const route = getToolRoute(tool, hasRecentChats);
    navigate(route);
  };

  return (
  <div onClick={handleClick} className="w-full" >
   
   <div className="card-box cursor-pointer  h-full">
     <div className="flex flex-col items-center text-center rounded-[24px] bg-white relative p-[16px] w-full">
      <img src={image} className="absolute top-0 left-1/2 -translate-x-1/2 -translate-y-1/2 h-[56px] w-[56px]" alt={title} />
      <h3 className="font-extrabold text-[18px] mt-[28px] mb-[4px]">{title}</h3>
      <p className="text-[10px]">{description}</p>
    </div>
   </div>
  </div>
  );
};

export default ToolCard
```

================
FILE: src\student\components\home\RecentItem.tsx
================

```
import { FC } from "react";

interface RecentItemProps {
  icon: React.ReactNode;
  title: string;
  date: string;
}

const RecentItem: FC<RecentItemProps> = ({ icon, title, date }) => {
  return (
    <div className="flex items-center justify-between bg-white p-3 rounded-lg shadow">
      <div className="flex items-center gap-2">
        <div className="text-2xl">{icon}</div>
        <div className="flex flex-col">
          <span className="text-sm font-medium truncate">{title}</span>
          <span className="text-xs text-gray-500">{date}</span>
        </div>
      </div>
    </div>
  );
};

export default RecentItem;

```

================
FILE: src\student\components\home\HeroSection.tsx
================

```
import { FC } from "react";
import book from './../../../assets/images/book.png'
import hero from './../../../assets/images/heroSection.png'

const HeroSection: FC = () => {
  return (
   <div  className="bg-gradient-to-l from-custom-purple via-custom-orange-1 to-custom-orange-2 p-[2px] rounded-[18px] flex items-center justify-between h-25 ">
        <div className="flex h-full w-full bg-gradient-to-l from-purple-100 to-orange-100 rounded-[16px] ">
            <div className="flex flex-3/4 justify-center items-center flex-col">
       <div className="flex justify-center">
         <img src={book}/>
          <h2 className="font-bold text-lg text-center">درس‌یار</h2>
       </div>
          <p className="text-sm text-gray-700">بهت کمک می‌کنه، درسا رو بهتر بفهمی!</p>
        </div>
        <div className="text-4xl flex flex-1/4 justify-end ml-4">
        <img  src={hero}/>
        </div>
        </div>
        
      </div>
  );
};

export default HeroSection;

```

================
FILE: src\student\components\home\Header.tsx
================

```
import { FC, useState, useEffect } from "react";
import { logout } from "../../../api"; // Import the logout function
import kiddo from './../../../assets/images/Kiddos.svg';

const Header: FC = () => {
 

  const handleLogout = () => {
    logout(); 
  };



  return (
    <div>
      <header
        className={`
          flex items-center justify-between bg-white py-[24px] px-[16px] h-[52px]
          fixed top-0 w-full z-100
          
        `}
      >
        {/* Logout Icon Button on the left */}
        <button onClick={handleLogout} className="text-gray-600 hover:text-red-500 transition-colors">
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            className="h-6 w-6" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor" 
            strokeWidth={2}
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" 
            />
          </svg>
        </button>
        
        <div className="flex items-center">
            <img src={kiddo} className="h-[24px] w-[24px] ml-[8px]"/>
            <div className="text-[16px] font-extrabold">کیــــدو </div>
        </div>
        
        {/* Placeholder to balance the layout */}
        <div className="w-6"></div>
      </header>
      
      
      <hr className="border-[1.5px] border-borderColor-1 w-full fixed" />
    </div>
  );
};

export default Header;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonWelcome.tsx
================

```
import { FC } from "react";
import Header from "../../../components/common/Header";

import ChatButton from "../../../components/common/ChatButton";
import HeroSection from "../../../student/components/tarkibKon/welcome/HeroSection";
import CardSection from "../../../student/components/tarkibKon/welcome/CardSection";
import { useNavigate } from "react-router-dom";
;



const TarkibkonWelcome:FC = () => {
    const navigate=useNavigate()
    const handleNewChat=()=>{
        navigate('/student/tarkibkon/study-selection')
    }
    return (
      <div className="h-screen flex flex-col">
        <Header title={'ترکــــــیب‌کن'} />
        <div className="bg-backGround-1 flex-1 overflow-hidden flex flex-col">
          <div className="mx-4 md:mx-[32px] flex-1 min-h-0 overflow-y-auto pb-[80px]">
            <HeroSection />
            <CardSection />
          </div>
          <div className="fixed left-0 right-0 bottom-0 z-10 px-4 pb-4 md:static md:px-0 md:pb-0 bg-backGround-1 md:bg-transparent">
            <ChatButton textButton='ساخت چت جدید' onClick={handleNewChat} />
          </div>
        </div>
      </div>
    );
};

export default TarkibkonWelcome;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonStudySelection.tsx
================

```
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { RootState } from "../../../store";
import Header from "../../../components/common/Header";
import DisableChatButton from "../../../components/common/DisableChatButton";
import ChatButton from "../../../components/common/ChatButton";
import HeroSection from "../../components/tarkibKon/studySelection/HeroSection";
import MainContent from "../../components/tarkibKon/studySelection/MainContent";

const TarkibkonStudySelection = () => {
  const navigate = useNavigate();
  const infoButton = useSelector((state: RootState) => state.tarkibkon.studySelectionButton);

  const handleNext = () => {
    navigate('/student/tarkibkon/learn-topic-selection');
  };

  return (
    <div className="h-screen">
      <Header title={'ترکــــــیب‌کن'} backPath="/student/tarkibkon/recent-chat" />
      <div className='font-yekanBakh bg-backGround-1 pb-18'>
        <HeroSection />
        <MainContent />
      </div>
      {infoButton ? (
        <ChatButton textButton='بعدی' onClick={handleNext} />
      ) : (
        <DisableChatButton textButton='بعدی' />
      )}
    </div>
  );
};

export default TarkibkonStudySelection;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonRecentChat.tsx
================

```
// src/student/pages/tarkibKon/TarkibkonRecentChat.tsx

import Header from '../../../components/common/Header'
import ChatButton from '../../../components/common/ChatButton'
import RecentChats from '../../../components/RecentChats'
import { useNavigate } from 'react-router-dom'

const TarkibkonRecentChat = () => {
  const navigate = useNavigate();

  const handleNewChat = () => {
    // Navigate directly to the study selection, skipping the welcome page.
    navigate('/student/tarkibkon/study-selection');
  };

  return (
    <>
      <div className='bg-backGround-1 min-h-screen'>
        <Header title={'ترکــــــیب‌کن'}/>
        <div className='gap-[16px] m-[16px]'> 
          <h1 className=' font-extrabold text-[14px] mb-4'>چت‌های اخیر</h1>
        </div>
        <div className=' flex flex-col gap-[12px] mx-[16px] pb-20'>
          <RecentChats filterByTool="TARKIB_KON"/>
        </div>
      </div>
      <ChatButton textButton='ساخت چت جدید' onClick={handleNewChat} />
    </>
  )
}

export default TarkibkonRecentChat
```

================
FILE: src\student\pages\tarkibKon\TarkibkonLearnTopic.tsx
================

```
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { useEffect } from "react";
import { RootState } from "../../../store";
import { activeButtonReducer, disableButtonReducer, setLearnTopic } from "../../../slice/tarkibkonSlice";
import Header from "../../../components/common/Header";
import ChatButton from "../../../components/common/ChatButton";
import DisableChatButton from "../../../components/common/DisableChatButton";
import MainContent from "../../components/tarkibKon/learnTopic/MainContent";
import TopicSearchBox from "../../components/tarkibKon/learnTopic/TopicSearchBox";
import HeroSection from "../../components/tarkibKon/learnTopic/HeroSection";

const TarkibkonLearnTopic = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { selectedStudy, learnTopic, studySelectionButton: isButtonActive } = useSelector((state: RootState) => state.tarkibkon);

  useEffect(() => {
    if (!selectedStudy) {
      navigate('/student/tarkibkon/study-selection');
    }
  }, [selectedStudy, navigate]);

  useEffect(() => {
    if (learnTopic && learnTopic.trim() !== "") {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [learnTopic, dispatch]);

  const handleNext = () => {
    if (learnTopic && learnTopic.trim() !== "") {
      navigate('/student/tarkibkon/favorite-topic-selection');
    }
  };

  const handleTopicChange = (topic: string | null) => {
    dispatch(setLearnTopic(topic || ""));
  };

  return (
    <div className="h-screen flex flex-col bg-backGround-1">
      <Header title={'ترکــــــیب‌کن'} backPath="/student/tarkibkon/recent-chat" />
      <div className='flex-1 flex flex-col min-h-0'>
        <HeroSection />
        <div className="flex-1 flex flex-col min-h-0 bg-white rounded-t-[24px] border-t-2 border-x-2 border-borderColor-1">
          <TopicSearchBox 
            searchQuery={learnTopic} 
            setSearchQuery={handleTopicChange}
          />
          <h1 className="mb-[16px] mt-[12px] mx-[16px] text-[16px] font-extrabold">موضوعات پیشنهادی</h1>
          <MainContent 
            onTopicSelect={handleTopicChange} 
            selectedTopicFromParent={learnTopic}
          />
        </div>
      </div>
      {isButtonActive ? (
        <ChatButton textButton='بعدی' onClick={handleNext} />
      ) : (
        <DisableChatButton textButton='بعدی' />
      )}
    </div>
  );
};

export default TarkibkonLearnTopic;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonFavoriteTopic.tsx
================

```
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { useEffect } from "react";
import { RootState } from "../../../store";
import { activeButtonReducer, disableButtonReducer, setFavoriteTopic } from "../../../slice/tarkibkonSlice";
import Header from "../../../components/common/Header";
import ChatButton from "../../../components/common/ChatButton";
import DisableChatButton from "../../../components/common/DisableChatButton";
import MainContent from "../../components/tarkibKon/favoriteTopic/MainContent";
import TopicSearchBox from "../../components/tarkibKon/favoriteTopic/TopicSearchBox";
import HeroSection from "../../components/tarkibKon/favoriteTopic/HeroSection";

const TarkibkonFavoriteTopic = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { learnTopic, favoriteTopic, studySelectionButton: isButtonActive } = useSelector((state: RootState) => state.tarkibkon);

  useEffect(() => {
    if (!learnTopic) {
      navigate('/student/tarkibkon/learn-topic-selection');
    }
  }, [learnTopic, navigate]);

  useEffect(() => {
    if (favoriteTopic && favoriteTopic.trim() !== "") {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [favoriteTopic, dispatch]);

  const handleStartChat = () => {
    if (favoriteTopic && favoriteTopic.trim() !== "") {
      navigate('/student/tarkibkon/chat');
    }
  };

  const handleTopicChange = (topic: string | null) => {
    dispatch(setFavoriteTopic(topic || ""));
  };

  return (
    <div className="h-screen flex flex-col bg-backGround-1">
      <Header title={'ترکــــــیب‌کن'} backPath="/student/tarkibkon/recent-chat" />
      <div className='flex-1 flex flex-col min-h-0'>
        <HeroSection />
        <div className="flex-1 flex flex-col min-h-0 bg-white rounded-t-[24px] border-t-2 border-x-2 border-borderColor-1">
          <TopicSearchBox 
            searchQuery={favoriteTopic} 
            setSearchQuery={handleTopicChange}
          />
          <h1 className="mb-[16px] mt-[12px] mx-[16px] text-[16px] font-extrabold">موضوعات پیشنهادی</h1>
          <MainContent 
            onTopicSelect={handleTopicChange} 
            selectedTopicFromParent={favoriteTopic}
          />
        </div>
      </div>
      {isButtonActive ? (
        <ChatButton textButton='بزن بریم  ' onClick={handleStartChat} />
      ) : (
        <DisableChatButton textButton='بزن بریم  ' />
      )}
    </div>
  );
};

export default TarkibkonFavoriteTopic;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonChatBot.tsx
================

```
// src/student/pages/tarkibKon/TarkibkonChatBot.tsx

import { useState, useEffect, useCallback } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import Header from "../../../components/common/Header";
import Chat from "../../../components/common/Chat";
import { startTarkibkonSession } from "../../../api-chat";
import { ChatSession } from "../../../types/api";

interface Study {
    id: string;
    name: string;
}

interface RootState {
  tarkibkon: {
    selectedStudy: Study | null;
    learnTopic: string;
    favoriteTopic: string;
  };
}

const TarkibkonChatBot = () => {
  const navigate = useNavigate();
  const [isChatting, setIsChatting] = useState(false);
  const { selectedStudy, learnTopic, favoriteTopic } = useSelector((state: RootState) => state.tarkibkon);

  useEffect(() => {
    if (!selectedStudy || !learnTopic || !favoriteTopic) {
      navigate('/student/tarkibkon/study-selection');
    }
  }, [selectedStudy, learnTopic, favoriteTopic, navigate]);
  
  const startSessionCallback = useCallback((): Promise<ChatSession> => {
    if (!selectedStudy || !learnTopic || !favoriteTopic) {
      return Promise.reject("Selections are not valid.");
    }
    return startTarkibkonSession(selectedStudy.id, learnTopic, favoriteTopic);
  }, [selectedStudy, learnTopic, favoriteTopic]);

  if (!selectedStudy || !learnTopic || !favoriteTopic) {
    return null;
  }

 

  return (
    <div className="bg-backGround-1 h-screen flex flex-col">
      <Header title={'ترکــــــیب‌کن'} backPath="/student/tarkibkon/recent-chat" />
      <div className="flex-grow flex flex-col">
          <Chat 
            startSession={startSessionCallback}
            setIsChatting={setIsChatting}
            tool="TARKIB_KON"
            
          />
      </div>
    </div>
  );
};

export default TarkibkonChatBot;
```

================
FILE: src\student\pages\konjKav\KonjkavWelcome.tsx
================

```
import { FC } from "react";
import Header from "../../../components/common/Header";

import ChatButton from "../../../components/common/ChatButton";
import HeroSection from "../../../student/components/konjKav/welcome/HeroSection";
import CardSection from "../../../student/components/konjKav/welcome/CardSection";
import { useNavigate } from "react-router-dom";



const KonjkavWelcome:FC = () => {
    const navigate=useNavigate()
    const handleNavigate=()=>{
        navigate('/student/konjkav/study-selection')
    }

    return (
      <div className="h-screen flex flex-col">
        <Header title={'کنج‌کـــاو'} />
        <div className="bg-backGround-1 flex-1  flex flex-col">
          <div className="mx-4  flex-1   pb-[80px]">
            <HeroSection />
            <CardSection />
          </div>
          <div >
            <ChatButton textButton='ساخت چت جدید' onClick={handleNavigate} />
          </div>
        </div>
      </div>
    );
};

export default KonjkavWelcome;
```

================
FILE: src\student\pages\konjKav\KonjkavTopicSelection.tsx
================

```
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { useEffect } from "react";
import Header from "../../../components/common/Header";
import ChatButton from "../../../components/common/ChatButton";
import DisableChatButton from "../../../components/common/DisableChatButton";
import HeroSection from "../../components/konjKav/topicSelection/HeroSection";
import MainContent from "../../components/konjKav/topicSelection/MainContent";
import TopicSearchBox from "../../components/konjKav/topicSelection/TopicSearchBox";
import { setSelectedTopic, activeButtonReducer, disableButtonReducer } from "../../../slice/konjkavSlice";
import { RootState } from "../../../store";

const KonjkavTopicSelection = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  
  const { selectedStudy, selectedTopic, studySelectionButton: isButtonActive } = useSelector((state: RootState) => state.konjkav);

  useEffect(() => {
    if (!selectedStudy) {
      navigate('/student/konjkav/study-selection');
    }
  }, [selectedStudy, navigate]);

  useEffect(() => {
    if (selectedTopic && selectedTopic.trim() !== "") {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [selectedTopic, dispatch]);

  const handleStartChat = () => {
    if (selectedTopic && selectedTopic.trim() !== "") {
      navigate('/student/konjkav/chat');
    }
  };

  const handleTopicChange = (topic: string | null) => {
    dispatch(setSelectedTopic(topic || ""));
  };

  return (
    <div className="h-screen flex flex-col bg-backGround-1">
      <Header title={'کنج‌کـــاو'} backPath="/student/konjkav/recent-chat" />
      <div className='flex-1 flex flex-col min-h-0'>
        <HeroSection />
        <div className="flex-1 flex flex-col min-h-0 bg-white rounded-t-[24px] border-t-2 border-x-2 border-borderColor-1">
          <TopicSearchBox 
            searchQuery={selectedTopic} 
            setSearchQuery={handleTopicChange}
          />
          <h1 className="mb-[16px] mt-[12px] mx-[16px] text-[16px] font-extrabold">موضوعات پیشنهادی</h1>
          <MainContent 
            onTopicSelect={handleTopicChange} 
            selectedTopicFromParent={selectedTopic}
          />
        </div>
      </div>
      {isButtonActive ? (
        <ChatButton textButton='بزن بریم  ' onClick={handleStartChat} />
      ) : (
        <DisableChatButton textButton='بزن بریم  '/>
      )}
    </div>
  );
};

export default KonjkavTopicSelection;
```

================
FILE: src\student\pages\konjKav\KonjkavTopicBot.tsx
================

```
import { useState, useEffect, useCallback } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import Header from "../../../components/common/Header";
import Chat from "../../../components/common/Chat";
import { startKonjkavSession } from "../../../api-chat";
import { ChatSession } from "../../../types/api";

interface Study {
    id: string;
    name: string;
}

interface RootState {
  konjkav: {
    selectedStudy: Study | null;
    selectedTopic: string;
  };
}

const KonjkavTopicBot = () => {
  const navigate = useNavigate();
  const [isChatting, setIsChatting] = useState(false);
  const { selectedStudy, selectedTopic } = useSelector((state: RootState) => state.konjkav);

  useEffect(() => {
    if (!selectedStudy || !selectedTopic) {
      navigate('/student/konjkav/study-selection');
    }
  }, [selectedStudy, selectedTopic, navigate]);
  
  const startSessionCallback = useCallback((): Promise<ChatSession> => {
    if (!selectedStudy || !selectedTopic) {
      return Promise.reject("Selections are not valid.");
    }
    return startKonjkavSession(selectedStudy.id, selectedTopic);
  }, [selectedStudy, selectedTopic]);

  if (!selectedStudy || !selectedTopic) {
    return null;
  }

  return (
    <div className="bg-backGround-1 h-screen flex flex-col">
      <Header title={'کنج‌کـــاو'}  backPath="/student/konjkav/recent-chat" />
      <div className="flex-grow flex flex-col">
          <Chat 
            startSession={startSessionCallback}
            setIsChatting={setIsChatting} 
            tool="KONJKAV_SHO"
            initialUserActionText={selectedTopic}
          />
      </div>
    </div>
  );
};

export default KonjkavTopicBot;
```

================
FILE: src\student\pages\konjKav\KonjkavStudySelection.tsx
================

```
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Header from '../../../components/common/Header';
import HeroSection from '../../components/konjKav/studySelection/HeroSection';
import MainContent from '../../components/konjKav/studySelection/MainContent';
import ChatButton from '../../../components/common/ChatButton';
import DisableChatButton from '../../../components/common/DisableChatButton';
import { RootState } from '../../../store';

const KonjkavStudySelection = () => {
  const navigate = useNavigate();
  const infoButton = useSelector((state: RootState) => state.konjkav.studySelectionButton);

  const handleNext = () => {
    navigate('/student/konjkav/topic-selection');
  };

  return (
    <div className="h-screen">
      <Header title={'کنج‌کـــاو'} backPath="/student/konjkav/recent-chat" />
      <div className='font-yekanBakh bg-backGround-1 pb-18'>
        <HeroSection />
        <MainContent />
      </div>
      {infoButton ? (
        <ChatButton textButton='بعدی' onClick={handleNext} />
      ) : (
        <DisableChatButton textButton='بعدی' />
      )}
    </div>
  );
};

export default KonjkavStudySelection;
```

================
FILE: src\student\pages\konjKav\KonjkavRecentChat.tsx
================

```
// src/student/pages/konjKav/KonjkavRecentChat.tsx

import ChatButton from "../../../components/common/ChatButton"
import Header from "../../../components/common/Header"
import RecentChats from "../../../components/RecentChats"
import { useNavigate } from "react-router-dom"

const KonjkavRecentChat = () => {
  const navigate = useNavigate();

  const handleNewChat = () => {
    // Navigate directly to the study selection, skipping the welcome page.
    navigate('/student/konjkav/study-selection');
  };

  return (
    <>
      <div className='bg-backGround-1 min-h-screen'>
        <Header title={'کنج‌کـــاو'}/>
        <div className='gap-[16px] m-[16px]'> 
          <h1 className=' font-extrabold text-[14px] mb-4'>چت‌های اخیر</h1>
        </div>
        <div className=' flex flex-col gap-[12px] mx-[16px] pb-20'>
          <RecentChats filterByTool="KONJKAV_SHO"/>
        </div>
      </div>
      <ChatButton textButton='ساخت چت جدید' onClick={handleNewChat}/>
    </>
  )
}

export default KonjkavRecentChat
```

================
FILE: src\student\pages\darsYar\DarsyarStudySelection.tsx
================

```
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Header from '../../../components/common/Header';
import HeroSection from '../../components/darsYar/studySelection/HeroSection';
import MainContent from '../../components/darsYar/studySelection/MainContent';
import ChatButton from '../../../components/common/ChatButton';
import DisableChatButton from '../../../components/common/DisableChatButton';


const DarsyarStudySelection = () => {
  const navigate = useNavigate();
  const infoButton: boolean = useSelector((state: any) => state?.darsyar?.studySelectionButton);
   
  const handleNext = () => {
    navigate('/student/darsyar/lesson-selection');
  };

  return (
    <div className="h-screen">
      <Header title={'درس‌یـــــار'} backPath="/student/darsyar/recent-chat" />
      <div className='font-yekanBakh bg-backGround-1 pb-18'> {/* Increased pb to avoid overlap with draggable MainContent */}
        <HeroSection />
         <MainContent />
      </div>
      {infoButton ? (
        <ChatButton textButton='بعدی' onClick={handleNext} />
      ) : (
        <DisableChatButton textButton='بعدی' />
      )}
    </div>
  );
};

export default DarsyarStudySelection;
```

================
FILE: src\student\pages\darsYar\DarsyarStudyAssistant.tsx
================

```
import { FC } from "react";
import { useNavigate } from "react-router-dom";
import Header from "../../../components/common/Header";
import HeroSection from "../../components/darsYar/studyAssistant/HeroSection";
import CardSection from "../../components/darsYar/studyAssistant/CardSection";
import ChatButton from "../../../components/common/ChatButton";

const DarsyarWelcome: FC = () => {
  const navigate = useNavigate();
  

  const handleNewChat = () => {
    navigate("/student/darsyar/study-selection");
  };

  return (
    <div className="h-screen flex flex-col">
      <Header title={'درس‌یـــــار'} />
      <div className="bg-backGround-1 flex-1 ">
        <div className="mx-[32px] h-full  pb-[80px]">
          <HeroSection />
          <CardSection />
        </div>
      </div>
      <ChatButton textButton='ساخت چت جدید' onClick={handleNewChat} />
    </div>
  );
};

export default DarsyarWelcome;
```

================
FILE: src\student\pages\darsYar\DarsyarRecentChat.tsx
================

```
// src/student/pages/darsYar/DarsyarRecentChat.tsx

import ChatButton from "../../../components/common/ChatButton"
import Header from "../../../components/common/Header"
import RecentChats from "../../../components/RecentChats"
import { useNavigate } from "react-router-dom"

const DarsyarRecentChat = () => {
  const navigate = useNavigate();

  const handleNewChat = () => {
    navigate("/student/darsyar/study-selection");
  };

  return (
    <>
      <div className='bg-backGround-1 min-h-screen'>
        <Header title={'درس‌یـــــار'}/>
        <div className='gap-[16px] m-[16px]'> 
          <h1 className=' font-extrabold text-[14px] mb-4'>چت‌های اخیر</h1>
        </div>
        <div className='flex flex-col gap-[12px] mx-[16px] pb-20'>
         <RecentChats filterByTool="DARS_YAR"/>
        </div>
      </div>
      <ChatButton textButton='ساخت چت جدید' onClick={handleNewChat}/>
    </>
  )
}

export default DarsyarRecentChat
```

================
FILE: src\student\pages\darsYar\DarsyarLessonSelection.tsx
================

```
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { useState, useEffect } from "react";
import ChatButton from "../../../components/common/ChatButton";
import DisableChatButton from "../../../components/common/DisableChatButton";
import Header from "../../../components/common/Header";
import MainContent from "../../components/darsYar/lessonSelection/MainContent";
import HeroSection from "../../components/darsYar/lessonSelection/HeroSection";

interface RootState {
  darsyar: {
    studySelectionButton: boolean;
    selectedStudy: string | null;
    selectedLessons: string[];
    hasSelectedLessons: boolean;
  };
}

const DarsyarLessonSelection = () => {
  const navigate = useNavigate();
  const [shouldNavigate, setShouldNavigate] = useState(false);
  const selectedStudy = useSelector((state: RootState) => state.darsyar.selectedStudy);
  const selectedLessons = useSelector((state: RootState) => state.darsyar.selectedLessons);

    useEffect(() => {
    // Navigate to login page if selections are missing
    if (!selectedStudy ) {
      navigate('/'); 
    }
  }, [selectedStudy, navigate]);
  useEffect(() => {
    if (shouldNavigate && selectedStudy && selectedLessons.length > 0) {
      navigate('/student/darsyar/chat');
    }
  }, [shouldNavigate, selectedStudy, selectedLessons, navigate]);

  const handleStartChat = () => {
    setShouldNavigate(true);
  };

  // Check both conditions for button activation
  const isButtonActive = selectedStudy !== null && selectedLessons.length > 0;

  return (
    <div>
      <div>
        <Header title={'درس‌یـــــار'} backPath="/student/darsyar/recent-chat" />
        <div className='bg-backGround-1'>
          <HeroSection />
          <MainContent />
        </div>
        {isButtonActive ? (
          <ChatButton textButton='بزن بریم  ' onClick={handleStartChat} />
        ) : (
          <DisableChatButton textButton='بزن بریم  ' />
        )}
      </div>
    </div>
  );
};

export default DarsyarLessonSelection;

```

================
FILE: src\student\pages\darsYar\DarsyarChatWithBot.tsx
================

```
// src/student/pages/darsYar/DarsyarChatWithBot.tsx
import { useState, useEffect, useCallback } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import LessonInformation from "../../components/darsYar/chatWithBot/LessonInformation";
import Header from "../../../components/common/Header";
import Chat from "../../../components/common/Chat";
import { startDarsYarSession } from "../../../api-chat";
import { ChatSession } from "../../../types/api";
import HeroSection from "../../components/darsYar/chatWithBot/HeroSection";

interface Study {
  id: string;
  name: string;
}

interface RootState {
  darsyar: {
    selectedStudy: Study | null;
    selectedLessons: { id: string; title: string; }[];
  };
}

const DarsyarChatWithBot = () => {
  const navigate = useNavigate();
  const [isChatting, setIsChatting] = useState(false);
  const [showHero, setShowHero] = useState(true);
  const selectedStudy = useSelector((state: RootState) => state.darsyar.selectedStudy);
  const selectedLessons = useSelector((state: RootState) => state.darsyar.selectedLessons);

  const suggestions = [
      { text: 'برام بیشتر توضیح بده' },
      { text: 'نکات کلیدی رو بگو' },
      { text: 'برام خلاصه کن' },
      { text: 'یه مثال دیگه بزن' }
  ];

  useEffect(() => {
    if (!selectedStudy || selectedLessons.length === 0) {
      navigate('/student/darsyar/study-selection'); 
    }
  }, [selectedStudy, selectedLessons, navigate]);
  
  const startSessionCallback = useCallback((): Promise<ChatSession> => {
    if (!selectedStudy || selectedLessons.length === 0) {
      return Promise.reject("Selections are not valid.");
    }
    return startDarsYarSession(
      selectedStudy.id,
      selectedLessons.map(lesson => lesson.id)
    );
  }, [selectedStudy, selectedLessons]);

  if (!selectedStudy || selectedLessons.length === 0) {
    return null;
  }

  return (
    <div className="bg-backGround-1 h-screen flex flex-col">
      <Header title={'درس‌یـــــار'} backPath="/student/darsyar/recent-chat" />

      <LessonInformation 
        study={selectedStudy.name}
        lesson={selectedLessons.map(l => l.title).join('، ')}
      />
      
      <main className="flex-grow flex flex-col pt-[60px] min-h-0">
        {showHero && <HeroSection />}
        
        <div className="flex-grow flex flex-col min-h-0">
          <Chat 
            startSession={startSessionCallback}
            setIsChatting={setIsChatting}
            tool="DARS_YAR"
            initialUserActionText={selectedLessons.map(l => l.title).join('، ')}
            onFirstInteraction={() => setShowHero(false)}
            suggestions={suggestions}
          />
        </div>
      </main>
    </div>
  );
};

export default DarsyarChatWithBot;
```

================
FILE: src\teacher\components\contentContainer\students\StudentsActivities.tsx
================

```
import React from "react";
import StudentActivity from "./StudentActivity";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import LoadingIndicator from "../../../../components/common/LoadingIndicator";

interface Class {
  id: string;
  name: string;
}

interface Student {
  id: string;
  full_name: string;
  last_activity_at: string;
  activity_status: "Active" | "Inactive";
  current_mood: {
    emoji: string;
    text: string;
  } | null; // Allow current_mood to be null
}

const StudentsActivities = () => {
  const { data: classes, isLoading: isLoadingClasses } = useQuery<Class[]>({
    queryKey: ["teacherClasses"],
    queryFn: async () => {
      console.log("API CALL: fetching classes for teacher");
      const res = await axios.get(
        "https://kiddo2.pythonanywhere.com/api/v1/academics/classes/"
      );
      console.log("API RESPONSE: fetching classes success", res.data);
      return res.data;
    },
    staleTime: 300000, // Cache for 5 minutes
  });

  const classId = classes?.[0]?.id;

  const {
    data: students,
    isLoading: isLoadingStudents,
    isError,
    error,
  } = useQuery<Student[]>({
    queryKey: ["students", classId],
    queryFn: async () => {
      console.log(`API CALL: fetching students for class ${classId}`);
      const res = await axios.get(
        `https://kiddo2.pythonanywhere.com/api/v1/academics/classes/${classId}/students/`
      );
      console.log(
        `API RESPONSE: fetching students for class ${classId} success`,
        res.data
      );
      return res.data;
    },
    enabled: !!classId,
  });

 const sortedStudents = React.useMemo(() => {
    if (!students) return [];
    return [...students].sort((a, b) => {
      // Students without an activity date go to the bottom.
      if (!a.last_activity_at) return 1;
      if (!b.last_activity_at) return -1;

      // Compare dates to sort the most recent ones first.
      return new Date(b.last_activity_at).getTime() - new Date(a.last_activity_at).getTime();
    });
  }, [students]);

  const isLoading = isLoadingClasses || isLoadingStudents;

  if (isLoading) {
    return (
      <div className="flex justify-center items-center text-center">
        <LoadingIndicator className="w-10 h-10 " />
      </div>
    );
  }

  if (isError) {
    console.error("API ERROR: fetching students", error);
    return (
      <div className="p-4 text-center text-red-500">
        خطا در دریافت اطلاعات دانش‌آموزان.
      </div>
    );
  }

  return (
    <div className="border-[2px] border-borderColor-1 rounded-[24px] bg-white">
      {/* EDITED: Use the sorted list */}
      {sortedStudents &&
        sortedStudents.map((student, index) => (
          <React.Fragment key={student.id}>
            <StudentActivity student={student} />
            {index < sortedStudents.length - 1 && (
              <hr className="mx-4 border-t-[1.5px] border-backGround-1" />
            )}
          </React.Fragment>
        ))}
    </div>
  );
};

export default StudentsActivities;

```

================
FILE: src\teacher\components\contentContainer\students\StudentActivity.tsx
================

```
import React from 'react';
import { useNavigate } from 'react-router-dom';
import smallhappyface from './../../../../assets/images/smallhappyface.png';
import recent from './../../../../assets/images/recent.png';
import { FluentEmoji } from '@lobehub/ui';

interface Student {
  id: string;
  full_name: string;
  last_activity_at: string;
  activity_status: 'Active' | 'Inactive';
  current_mood: {
    emoji: string;
    text: string;
  } | null;
}

interface StudentActivityProps {
  student: Student;
}

const StudentActivity: React.FC<StudentActivityProps> = ({ student }) => {
  const navigate = useNavigate();

  const handleStudentClick = () => {
    console.log(`Navigating to chats for student: ${student.full_name} (ID: ${student.id})`);
    navigate(`/teacher/student/${student.id}/chats`, { 
      state: { studentName: student.full_name } 
    });
  };

  const formatDate = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '';
    const options: Intl.DateTimeFormatOptions = {
      month: 'long',
      day: 'numeric',
    };
    return new Intl.DateTimeFormat('fa-IR', options).format(date);
  };

  const activityStatusMap = {
    Active: 'فعال',
    Inactive: 'غیرفعال',
  };

  return (
    <div onClick={handleStudentClick} className="cursor-pointer hover:bg-gray-50 transition-colors duration-150">
      <div className="flex p-[16px] gap-[16px] items-center">
        <div>
          <img  src={smallhappyface} alt="student icon" />
        </div>
        <div className="flex flex-col w-full">
          <div className="flex justify-between items-center mb-[8px]">
            <div className="flex">
              <h1 className="font-extrabold text-[14px]">{student.full_name}</h1>
            </div>
            <div className="flex gap-x-2">
              <p className="bg-backGround-1 px-[8px] rounded-[16px] text-[10px] py-[2px]">
                {activityStatusMap[student.activity_status] || student.activity_status}
              </p>
              <p className="bg-backGround-1 px-[8px] rounded-[16px] text-[10px] py-[2px]">
                <p><FluentEmoji emoji="🙂" type="anim" size={16}/></p>
              </p>
            </div>
          </div>
          <div className="flex justify-between items-center">
            <div className="flex">
              <h1 className="font-extrabold text-[10px]">
                آخرین فعالیت : {(student.last_activity_at)?(formatDate(student.last_activity_at)):(<span>بدون فعالیت</span>)}
              </h1>
            </div>
           <div>
            <img src={recent}/>
           </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StudentActivity;
```

================
FILE: src\teacher\components\contentContainer\reports\StudentReports.tsx
================

```
import React from 'react';
import { ChatEvent } from '../../../../types/api';
import { FluentEmoji } from '@lobehub/fluent-emoji';

interface StudentReportsProps {
  event: ChatEvent;
  onOpenModal: (eventId: string) => void;
}

const StudentReports: React.FC<StudentReportsProps> = ({ event, onOpenModal }) => {
  return (
    <div className="mb-4 pt-4 first:pt-0 " onClick={() => onOpenModal(event.id)}>
      <div className="flex justify-between items-start">
        {/* Container for Name, Emoji, and Overview */}
        <div className='flex-grow'>
          <div className="flex items-center gap-x-2 mb-2 ">
            <div className='p-2 rounded-[24px] bg-backGround-1'>
              <FluentEmoji emoji={event.emoji} size={24} />
            </div>
            <h1 className="font-bold text-sm">{event.student_name}</h1>
          </div>
          <p className="text-[12px] text-gray-600 line-clamp-2 pr-1">{event.overview}</p>
        </div>

        {/* Button on the far right */}
        <button  className='p-1 flex-shrink-0 ml-2'>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" transform='rotate(270)'>
            <path d="M15.7071 16.7071C16.0976 16.3166 16.0976 15.6834 15.7071 15.2929L10.4142 10L15.7071 4.70711C16.0976 4.31658 16.0976 3.68342 15.7071 3.29289C15.3166 2.90237 14.6834 2.90237 14.2929 3.29289L8.29289 9.29289C7.90237 9.68342 7.90237 10.3166 8.29289 10.7071L14.2929 16.7071C14.6834 17.0976 15.3166 17.0976 15.7071 16.7071Z" fill="#333333"/>
          </svg>
        </button>
      </div>
    </div>
  );
};

export default StudentReports;
```

================
FILE: src\teacher\components\contentContainer\reports\ReportTools.tsx
================

```
import React from "react";


interface ReportToolsProps {
  title: string;
  onClick: () => void;
  image: string;
  isSelected?: boolean;
}

const ReportTools: React.FC<ReportToolsProps> = ({ title, onClick, image, isSelected = false }) => {
  const isDefaultSelection = title === 'همه درس‌ها' || title === 'همه ابزارها';
  const shouldShowPurple = isSelected && !isDefaultSelection;

  return (
    <div className={`${shouldShowPurple ? 'onClicked-box' : 'buttonClicked-box'} buttonClicked-box w-full`}>
      <div className={`flex justify-start items-center rounded-[16px] p-[16px] py-[4px] ${
        shouldShowPurple ? 'bg-[#F2EFFF]' : 'bg-white'
      }`}>
       <button onClick={onClick} className="w-full ">
         <div className="flex justify-around items-center">
          <div className="flex justify-start items-center">
            <img src={image} className="pl-[8px]"/>
          <h1 className={`text-[14px] `}>{title}</h1>
          </div>
         <div>
           <button className='flex-shrink-0 mt-1'>
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" transform='rotate(270)'>
            <path d="M15.7071 16.7071C16.0976 16.3166 16.0976 15.6834 15.7071 15.2929L10.4142 10L15.7071 4.70711C16.0976 4.31658 16.0976 3.68342 15.7071 3.29289C15.3166 2.90237 14.6834 2.90237 14.2929 3.29289L8.29289 9.29289C7.90237 9.68342 7.90237 10.3166 8.29289 10.7071L14.2929 16.7071C14.6834 17.0976 15.3166 17.0976 15.7071 16.7071Z" fill={ "#333333"}/>
          </svg>
        </button>
         </div>
        </div>
       </button>
      </div>
    </div>
  );
};
export default ReportTools;
```

================
FILE: src\student\components\tarkibKon\welcome\HeroSection.tsx
================

```
import happyFace from './../../../../assets/images/happyFace.png'

const HeroSection = () => {
  return (
    <div className='mb-[32px] pt-[16px]'>
        <div className='flex justify-center  p-4'>
        <img src={happyFace}/>
      </div>
      <p className='text-center font-extrabold'>به ترکیب‌کن خوش آمدی!</p>
    </div>
  )
}

export default HeroSection
```

================
FILE: src\student\components\tarkibKon\welcome\CardSection.tsx
================

```
import React from 'react'
import { tarkibkonWelcomeConstant } from '../../../../constants/tarkibkonWelcomeConstant'


const CardSection:React.FC = () => {
  return (
  <div >
   {tarkibkonWelcomeConstant.map(study=>(
        <div className='card-box mb-[12px] gap-[12px] '>
        <div className=' flex justify-center flex-col bg-white rounded-[24px] gap-[8px] p-[16px] '>
            <div className='gap-[8px] flex items-center justify-start'>
               {study.logo}
                <h1 className='font-extrabold text-[14px]'> {study.title}   </h1>

            </div>
             <div>
           <p className=' text-justify  text-[14px]'>{study.description}</p>
        </div>
            
        </div>
       
     </div>
  )
   )}
  </div>)
}

export default CardSection
```

================
FILE: src\student\components\tarkibKon\studySelection\MainContent.tsx
================

```
import React from 'react';
import CardSelector from './CardSelector';

const MainContent: React.FC = () => {
  return (
    <div className='border-2 border-borderColor-1 bg-white rounded-[24px] p-4 h-full w-full overflow-y-auto flex flex-col rounded-b-none border-b-0'>
      <div> 
        <CardSelector />
      </div>
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\tarkibKon\studySelection\HeroSection.tsx
================

```
import React from 'react'
import tarkibkon from './../../../../assets/images/tarkibkon.webp'

const HeroSection = () => {
  return (
    <div className='flex justify-center items-center flex-col '>
      <img src={tarkibkon} className='w-[104px] h-[104px] mb-10 mt-5'/>
      <h1 className='mb-10 text-[16px] font-extrabold'>
        اول یکی از کتاب‌هات رو انتخاب کن.
      </h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\tarkibKon\studySelection\CardSelector.tsx
================

```
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setSelectedStudy } from '../../../../slice/tarkibkonSlice';
import CardContent from './CardContent';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import LoadingIndicator from '../../../../components/common/LoadingIndicator';

interface Subject {
  id: string;
  name: string;
  image_url:string
}

const CardSelector: React.FC = () => {
    const dispatch = useDispatch();
    const selectedStudy = useSelector((state: any) => state.tarkibkon.selectedStudy);
    
    const [selectedCardId, setSelectedCardId] = useState<string | null>(selectedStudy?.id || null);

    useEffect(() => {
        if (selectedStudy?.id) {
            setSelectedCardId(selectedStudy.id);
        }
    }, [selectedStudy]);

    const { data: subjects, isLoading, isError } = useQuery<Subject[]>({
        queryKey: ['subjects'],
        queryFn: async () => {
            const response = await axios.get<Subject[]>(`https://kiddo2.pythonanywhere.com/api/v1/academics/subjects`);
            return response.data;
        },
    });
     if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[500px]">
        <LoadingIndicator className='w-10 h-10' />
      </div>
    );
  }

    const handleCardClick = (subject: Subject) => {
        // Only allow switching to a different card, not deselecting
        if (selectedCardId !== subject.id) {
            setSelectedCardId(subject.id);
            dispatch(setSelectedStudy(subject));
        }
    };

    if (isLoading) return <div>در حال بارگذاری دروس...</div>;
    if (isError) return <div>خطا در بارگذاری دروس.</div>;

    return (
        <div className="grid grid-cols-2 gap-[12px]">
            {subjects?.map((subject) => (
                <CardContent
                    key={subject.id}
                    name={subject.name}
                    image={subject.image_url}
                    isSelected={selectedCardId === subject.id}
                    selectedCardId={selectedCardId}
                    onClick={() => handleCardClick(subject)}
                />
            ))}
        </div>
    );
};

export default CardSelector;
```

================
FILE: src\student\components\tarkibKon\studySelection\CardContent.tsx
================

```
import React, { useEffect } from "react";
import { useDispatch } from "react-redux";
import riazi from "./../../../../assets/images/riazi.png";
import { activeButtonReducer, disableButtonReducer } from "../../../../slice/tarkibkonSlice";

interface CardContentProps {
  name: string;
  isSelected: boolean;
  image:string,
  selectedCardId: string | null;
  onClick: () => void;
}

const CardContent: React.FC<CardContentProps> = ({image, name, isSelected, onClick, selectedCardId }) => {
  const dispatch = useDispatch();

  useEffect(() => {
    if (selectedCardId) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [selectedCardId, dispatch]);

  return (
    <div className={`${isSelected ? `onClickedCard-box ` : "card-box"}`}>
      <div
        className={`rounded-[24px] cursor-pointer transition-colors duration-200 flex flex-col overflow-hidden h-full ${isSelected ? `bg-backGroundCard` : "bg-white"}`}
        onClick={onClick}
      >
        <img src={image || riazi} className="w-full h-auto object-contain" alt={name}/>
        <div className="p-4 text-center">
          <h1 className="text-sm font-semibold">{name}</h1>
        </div>
      </div>
    </div>
  );
};

export default CardContent;
```

================
FILE: src\student\components\tarkibKon\learnTopic\TopicSelector.tsx
================

```
// src/student/components/tarkibKon/favoriteTopic/TopicSelector.tsx
import React from 'react';
import TopicCard from './TopicCard';

interface Card {
  id: string;
  title: string;
}

interface TopicSelectorProps {
  onSelectCard: (id: string | null) => void;
  selectedCardId: string | null;
  isDisabled: boolean;
}

const TopicSelector: React.FC<TopicSelectorProps> = ({ onSelectCard, selectedCardId, isDisabled }) => {
  const cards: Card[] = [
    { id: 'فوتبال', title: 'فوتبال' },
    { id: 'ماینکرفت', title: 'ماینکرفت' },
    { id: 'دایناسورها', title: 'دایناسورها' },
    { id: 'سفر به فضا', title: 'سفر به فضا' },
    { id: 'داستان‌های شاهنامه', title: 'داستان‌های شاهنامه' },
    { id: 'ابرقهرمان‌ها', title: 'ابرقهرمان‌ها' },
  ];

  const handleCardClick = (clickedId: string) => {
    if (!isDisabled) {
      onSelectCard(selectedCardId === clickedId ? null : clickedId);
    }
  };

  return (
    <div
      className={`
        flex flex-wrap gap-[12px]
        ${isDisabled ? 'opacity-60 pointer-events-none' : ''}
      `}
    >
      {cards.map((card) => (
        <TopicCard
          key={card.id}
          title={card.title}
          isSelected={selectedCardId === card.id}
          onClick={() => handleCardClick(card.id)}
          isDisabled={isDisabled}
        />
      ))}
    </div>
  );
};

export default TopicSelector;
```

================
FILE: src\student\components\tarkibKon\learnTopic\TopicSearchBox.tsx
================

```
import React from 'react';

interface TopicSearchBoxProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
}

const TopicSearchBox: React.FC<TopicSearchBoxProps> = ({ searchQuery, setSearchQuery }) => {
  return (
    <div className="mx-[16px] my-4 ">
      <div className="relative">
        <textarea
          rows={1}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder=" اینجا بنویس..."
          className="p-[16px] rounded-[16px] w-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-chatButton-1 "
          style={{ direction: 'rtl' }}
        />
      </div>
    </div>
  );
};

export default TopicSearchBox;
```

================
FILE: src\student\components\tarkibKon\learnTopic\TopicCard.tsx
================

```
import React from "react";

interface TopicCardProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
  isDisabled?: boolean;
}

const TopicCard: React.FC<TopicCardProps> = ({ title, isSelected, onClick, isDisabled }) => {
  return (
    <div>
      <div
        className={`
          ${isSelected ? "onClickedButton-box " : "buttonClicked-box"}
          inline-block
          ${isDisabled ? 'pointer-events-none' : ''} // Prevent clicks when disabled
        `}
      >
        <div
          className={`
            py-[8px] px-[16px] rounded-[16px]
            ${isSelected ? "bg-backGroundCard" : "bg-white"}
            ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'} 
          `}
          onClick={onClick}
        >
          <div className="flex justify-start items-center">
            <h1 className="text-[14px] font-extrabold whitespace-nowrap">
              {title}
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TopicCard;
```

================
FILE: src\student\components\tarkibKon\learnTopic\Topic.tsx
================

```
import React, { useState } from "react";

import TopicSelector from "./TopicSelector";

const Topic = () => {
  const [textAreaContent, setTextAreaContent] = useState<string>("");
  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setTextAreaContent(value);
    // If user starts typing, unselect any card
    if (value.length > 0) {
      setSelectedCardId(null);
    }
  };

  const handleCardSelection = (id: string | null) => {
    setSelectedCardId(id);
    // If a card is selected, clear the textarea
    if (id !== null) {
      setTextAreaContent("");
    }
  };

  // Determine if textarea should be disabled
  const isTextAreaDisabled = selectedCardId !== null;
  // Determine if TopicSelector (cards) should be disabled
  const isTopicSelectorDisabled = textAreaContent.length > 0;

  return (
    <div className="flex justify-center bg-white  rounded-[24px] rounded-b-none p-[16px] flex-col pb-20">
      <textarea
        placeholder="اینجا بنویس ... "
        className="p-[16px] border-[2px] border-backGround-1 rounded-[16px] w-full text-[14px] resize-none overflow-hidden" // Added resize-none
        rows={1} // Made textarea smaller by setting rows
        value={textAreaContent}
        onChange={handleTextAreaChange}
        disabled={isTextAreaDisabled}
        style={isTextAreaDisabled ? { opacity: 0.6, cursor: 'not-allowed' } : {}} 
        
      />
      <h1 className="font-extrabold text-[14px] mt-[16px] mb-[12px]">
        موضوعات پیشنهادی
      </h1>
      <div className="flex flex-wrap gap-[12px]">
        <TopicSelector
          onSelectCard={handleCardSelection}
          selectedCardId={selectedCardId}
          isDisabled={isTopicSelectorDisabled}
        />
      </div>
    </div>
  );
};

export default Topic;
```

================
FILE: src\student\components\tarkibKon\learnTopic\MainContent.tsx
================

```
// src/student/components/tarkibKon/learnTopic/MainContent.tsx
import React from 'react';
import { useDispatch } from 'react-redux';
import { activeButtonReducer, disableButtonReducer } from '../../../../slice/tarkibkonSlice';
import TopicSelector from './TopicSelector'

interface MainContentProps {
  onTopicSelect: (topicId: string | null) => void;
  selectedTopicFromParent: string | null;
}

const MainContent: React.FC<MainContentProps> = ({ onTopicSelect, selectedTopicFromParent }) => {
  const dispatch = useDispatch();

  const handleTopicSelect = (topicId: string | null) => {
    onTopicSelect(topicId);
    
    if (topicId) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  };

  return (
    <div
      className='
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col 
        pb-24
      '
    >
      <TopicSelector
        onSelectCard={handleTopicSelect}
        selectedCardId={selectedTopicFromParent}
        isDisabled={false}
      />
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\tarkibKon\learnTopic\HeroSection.tsx
================

```
import React from 'react';
import tarkibkon from './../../../../assets/images/tarkibkon.webp';

const HeroSection = () => {
  return (
    <div className="flex justify-center items-center flex-col ">
      <img src={tarkibkon} className="w-[104px] h-[104px] mb-10 mt-5" />
      <h1 className="mb-10 text-[16px] font-extrabold">چه موضوعی رو میخوای‌ بهتر بفهمی؟</h1>
    </div>
  );
};

export default HeroSection;

```

================
FILE: src\student\components\tarkibKon\favoriteTopic\TopicSelector.tsx
================

```
// src/student/components/tarkibKon/learnTopic/TopicSelector.tsx
import React from 'react';
import TopicCard from './TopicCard';

interface Card {
  id: string;
  title: string;
}

interface TopicSelectorProps {
  onSelectCard: (id: string | null) => void;
  selectedCardId: string | null;
  isDisabled: boolean;
}

const TopicSelector: React.FC<TopicSelectorProps> = ({ onSelectCard, selectedCardId, isDisabled }) => {
  const cards: Card[] = [
    { id: 'کسرها', title: 'کسرها' },
    { id: 'فتوسنتز', title: 'فتوسنتز' },
    { id: 'ساختار اتم', title: 'ساختار اتم' },
    { id: 'تاریخ صفویه', title: 'تاریخ صفویه' },
    { id: 'آب و هوای ایران', title: 'آب و هوای ایران' },
    { id: 'شعر نو', title: 'شعر نو' },
  ];

  const handleCardClick = (clickedId: string) => {
    if (!isDisabled) {
      onSelectCard(selectedCardId === clickedId ? null : clickedId);
    }
  };

  return (
    <div
      className={`
        flex flex-wrap gap-[12px]
        ${isDisabled ? 'opacity-60 pointer-events-none' : ''}
      `}
    >
      {cards.map((card) => (
        <TopicCard
          key={card.id}
          title={card.title}
          isSelected={selectedCardId === card.id}
          onClick={() => handleCardClick(card.id)}
          isDisabled={isDisabled}
        />
      ))}
    </div>
  );
};

export default TopicSelector;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\TopicSearchBox.tsx
================

```
import React from 'react';

interface TopicSearchBoxProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
}

const TopicSearchBox: React.FC<TopicSearchBoxProps> = ({ searchQuery, setSearchQuery }) => {
  return (
    <div className="mx-[16px] my-4 ">
      <div className="relative">
        <textarea
          rows={1}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder=" اینجا بنویس..."
          className="p-[16px] rounded-[16px] w-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-chatButton-1"
          style={{ direction: 'rtl' }}
        />
      </div>
    </div>
  );
};

export default TopicSearchBox;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\TopicCard.tsx
================

```
import React from "react";

interface TopicCardProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
  isDisabled?: boolean;
}

const TopicCard: React.FC<TopicCardProps> = ({ title, isSelected, onClick, isDisabled }) => {
  return (
    <div>
      <div
        className={`
          ${isSelected ? "onClickedButton-box " : "buttonClicked-box"}
          inline-block
          ${isDisabled ? 'pointer-events-none' : ''} // Prevent clicks when disabled
        `}
      >
        <div
          className={`
            py-[8px] px-[16px] rounded-[16px]
            ${isSelected ? "bg-backGroundCard" : "bg-white"}
            ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'} 
          `}
          onClick={onClick}
        >
          <div className="flex justify-start items-center">
            <h1 className="text-[14px] font-extrabold whitespace-nowrap">
              {title}
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TopicCard;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\Topic.tsx
================

```
import React, { useState } from "react";

import TopicSelector from "./TopicSelector";

const Topic = () => {
  const [textAreaContent, setTextAreaContent] = useState<string>("");
  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setTextAreaContent(value);
    // If user starts typing, unselect any card
    if (value.length > 0) {
      setSelectedCardId(null);
    }
  };

  const handleCardSelection = (id: string | null) => {
    setSelectedCardId(id);
    // If a card is selected, clear the textarea
    if (id !== null) {
      setTextAreaContent("");
    }
  };

  // Determine if textarea should be disabled
  const isTextAreaDisabled = selectedCardId !== null;
  // Determine if TopicSelector (cards) should be disabled
  const isTopicSelectorDisabled = textAreaContent.length > 0;

  return (
    <div className="flex justify-center bg-white  rounded-[24px] rounded-b-none p-[16px] flex-col pb-20">
      <textarea
        placeholder="اینجا بنویس ... "
        className="p-[16px] border-[2px] border-backGround-1 rounded-[16px] w-full text-[14px] resize-none overflow-hidden" // Added resize-none
        rows={1} // Made textarea smaller by setting rows
        value={textAreaContent}
        onChange={handleTextAreaChange}
        disabled={isTextAreaDisabled}
        style={isTextAreaDisabled ? { opacity: 0.6, cursor: 'not-allowed' } : {}} 
        
      />
      <h1 className="font-extrabold text-[14px] mt-[16px] mb-[12px]">
        موضوعات پیشنهادی
      </h1>
      <div className="flex flex-wrap gap-[12px]">
        <TopicSelector
          onSelectCard={handleCardSelection}
          selectedCardId={selectedCardId}
          isDisabled={isTopicSelectorDisabled}
        />
      </div>
    </div>
  );
};

export default Topic;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\MainContent.tsx
================

```
// src/student/components/tarkibKon/favoriteTopic/MainContent.tsx
import React from 'react';
import { useDispatch } from 'react-redux';
import { activeButtonReducer, disableButtonReducer } from '../../../../slice/tarkibkonSlice';
import TopicSelector from './TopicSelector'

interface MainContentProps {
  onTopicSelect: (topicId: string | null) => void;
  selectedTopicFromParent: string | null;
}

const MainContent: React.FC<MainContentProps> = ({ onTopicSelect, selectedTopicFromParent }) => {
  const dispatch = useDispatch();

  const handleTopicSelect = (topicId: string | null) => {
    onTopicSelect(topicId);
    
    if (topicId) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  };

  return (
    <div
      className='
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col 
        pb-24
      '
    >
      <TopicSelector
        onSelectCard={handleTopicSelect}
        selectedCardId={selectedTopicFromParent}
        isDisabled={false}
      />
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\HeroSection.tsx
================

```
import React from 'react';
import tarkibkon from './../../../../assets/images/tarkibkon.webp';

const HeroSection = () => {
  return (
    <div className="flex justify-center items-center flex-col ">
      <img src={tarkibkon} className="w-[104px] h-[104px] mb-10 mt-5" />
      <h1 className="mb-10 text-[16px] font-extrabold">حالا بگو چه موضوعی رو از همه بیشتر دوست داری؟</h1>
    </div>
  );
};

export default HeroSection;

```

================
FILE: src\student\components\konjKav\welcome\HeroSection.tsx
================

```
import happyFace from './../../../../assets/images/happyFace.png'

const HeroSection = () => {
  return (
    <div className='mb-[32px] pt-[24px]'>
        <div className='flex justify-center   mb-[32px]'>
        <img src={happyFace}/>
      </div>
      <p className='text-center font-extrabold'>به کنج‌کـــاو خوش اومدی!</p>
    </div>
  )
}

export default HeroSection
```

================
FILE: src\student\components\konjKav\welcome\CardSection.tsx
================

```
import React from 'react'
import { konjkavWelcomeConstant } from '../../../../constants/konjkavWelcomConstant'


const CardSection:React.FC = () => {
  return (
  <div >
   {konjkavWelcomeConstant.map(study=>(
        <div className='card-box mb-[12px] gap-[12px] '>
        <div className=' flex justify-center flex-col bg-white rounded-[24px] gap-[8px] p-[16px] '>
            <div className='gap-[8px] flex items-center justify-start'>
               {study.logo}
                <h1 className='font-extrabold text-[14px]'> {study.title}   </h1>

            </div>
             <div>
           <p className=' text-justify  text-[14px]'>{study.description}</p>
        </div>
            
        </div>
       
     </div>
  )
   )}
  </div>)
}

export default CardSection
```

================
FILE: src\student\components\konjKav\topicSelection\TopicSelector.tsx
================

```
// src/student/components/konjKav/topicSelection/TopicSelector.tsx
import React from 'react';
import TopicCard from './TopicCard';

interface Card {
  id: string;
  title: string;
}

interface TopicSelectorProps {
  onSelectCard: (id: string | null) => void;
  selectedCardId: string | null;
  isDisabled: boolean;
}

const TopicSelector: React.FC<TopicSelectorProps> = ({ onSelectCard, selectedCardId, isDisabled }) => {
  const cards: Card[] = [
    { id: 'سیارات منظومه شمسی', title: 'سیارات منظومه شمسی' },
    { id: 'زنجیره غذایی', title: 'زنجیره غذایی' },
    { id: 'تاریخ ایران باستان', title: 'تاریخ ایران باستان' },
    { id: 'آب و هوای ایران', title: 'آب و هوای ایران' },
    { id: 'شاعران معروف فارسی', title: 'شاعران معروف فارسی' },
    { id: 'هنر اسلامی', title: 'هنر اسلامی' },
  ];

  const handleCardClick = (clickedId: string) => {
    if (!isDisabled) {
      onSelectCard(selectedCardId === clickedId ? null : clickedId);
    }
  };

  return (
    <div
      className={`
        flex flex-wrap gap-[12px]
        ${isDisabled ? 'opacity-60 pointer-events-none' : ''}
      `}
    >
      {cards.map((card) => (
        <TopicCard
          key={card.id}
          title={card.title}
          isSelected={selectedCardId === card.id}
          onClick={() => handleCardClick(card.id)}
          isDisabled={isDisabled}
        />
      ))}
    </div>
  );
};

export default TopicSelector;
```

================
FILE: src\student\components\konjKav\topicSelection\TopicSearchBox.tsx
================

```
import React from 'react';

interface TopicSearchBoxProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
}

const TopicSearchBox: React.FC<TopicSearchBoxProps> = ({ searchQuery, setSearchQuery }) => {
  return (
    <div className="mx-[16px] my-4 ">
      <div className="relative">
        <textarea
          rows={1}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder=" اینجا بنویس..."
          className="p-[16px] rounded-[16px] w-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-chatButton-1"
          style={{ direction: 'rtl' }}
        />
      </div>
    </div>
  );
};

export default TopicSearchBox;
```

================
FILE: src\student\components\konjKav\topicSelection\TopicCard.tsx
================

```
import React from "react";

interface TopicCardProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
  isDisabled?: boolean;
}

const TopicCard: React.FC<TopicCardProps> = ({ title, isSelected, onClick, isDisabled }) => {
  return (
    <div>
      <div
        className={`
          ${isSelected ? "onClickedButton-box " : "buttonClicked-box"}
          inline-block
          ${isDisabled ? 'pointer-events-none' : ''} // Prevent clicks when disabled
        `}
      >
        <div
          className={`
            py-[8px] px-[16px] rounded-[16px]
            ${isSelected ? "bg-backGroundCard" : "bg-white"}
            ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'} 
          `}
          onClick={onClick}
        >
          <div className="flex justify-start items-center">
            <h1 className="text-[14px] font-extrabold whitespace-nowrap">
              {title}
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TopicCard;
```

================
FILE: src\student\components\konjKav\topicSelection\Topic.tsx
================

```
import React, { useState } from "react";
import TopicCard from "./TopicCard"; // Make sure the path is correct
import TopicSelector from "./TopicSelector";

const Topic = () => {
  const [textAreaContent, setTextAreaContent] = useState<string>("");
  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setTextAreaContent(value);
    // If user starts typing, unselect any card
    if (value.length > 0) {
      setSelectedCardId(null);
    }
  };

  const handleCardSelection = (id: string | null) => {
    setSelectedCardId(id);
    // If a card is selected, clear the textarea
    if (id !== null) {
      setTextAreaContent("");
    }
  };

  // Determine if textarea should be disabled
  const isTextAreaDisabled = selectedCardId !== null;
  // Determine if TopicSelector (cards) should be disabled
  const isTopicSelectorDisabled = textAreaContent.length > 0;

  return (
    <div className="flex justify-center bg-white  rounded-[24px] rounded-b-none p-[16px] flex-col pb-20">
      <textarea
        placeholder="اینجا بنویس ... "
        className="p-[16px] border-[2px] border-backGround-1 rounded-[16px] w-full text-[14px] resize-none overflow-hidden" // Added resize-none
        rows={1} // Made textarea smaller by setting rows
        value={textAreaContent}
        onChange={handleTextAreaChange}
        disabled={isTextAreaDisabled}
        style={isTextAreaDisabled ? { opacity: 0.6, cursor: 'not-allowed' } : {}} 
        
      />
      <h1 className="font-extrabold text-[14px] mt-[16px] mb-[12px]">
        موضوعات پیشنهادی
      </h1>
      <div className="flex flex-wrap gap-[12px]">
        <TopicSelector
          onSelectCard={handleCardSelection}
          selectedCardId={selectedCardId}
          isDisabled={isTopicSelectorDisabled}
        />
      </div>
    </div>
  );
};

export default Topic;
```

================
FILE: src\student\components\konjKav\topicSelection\MainContent.tsx
================

```
// src/student/components/konjKav/topicSelection/MainContent.tsx
import React from 'react';
import { useDispatch } from 'react-redux';
import { activeButtonReducer, disableButtonReducer } from '../../../../slice/konjkavSlice';
import TopicSelector from './TopicSelector';

// This Topic interface isn't directly used by TopicSelector anymore,
// but it's good to keep if you plan to use these topics for filtering/search later.
interface Topic {
  id: string;
  title: string;
  description: string;
  emoji: string;
}

interface MainContentProps {
  onTopicSelect: (topicId: string | null) => void; // Now passes a single ID or null
  selectedTopicFromParent: string | null; // New prop to receive the currently selected topic
}

const MainContent: React.FC<MainContentProps> = ({ onTopicSelect, selectedTopicFromParent }) => {
  const dispatch = useDispatch();

 

  // handleTopicSelect now directly passes the selected ID to the parent via onTopicSelect
  const handleTopicSelect = (topicId: string | null) => {
    onTopicSelect(topicId); // Pass the ID directly to the parent
    
    // Logic for activating/deactivating button based on selection
    if (topicId) { // If something is selected
      dispatch(activeButtonReducer());
    } else { // If nothing is selected
      dispatch(disableButtonReducer());
    }
  };

  return (
    <div
      className='
        p-4 h-full w-full 
        overflow-y-auto flex flex-col pb-24
      '
    >
      <TopicSelector
        onSelectCard={handleTopicSelect}
        selectedCardId={selectedTopicFromParent} // Pass the selected ID from parent to TopicSelector
        isDisabled={false} // Assuming TopicSelector itself is not disabled
      />
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\konjKav\topicSelection\HeroSection.tsx
================

```
import React from 'react';
import konjkav from './../../../../assets/images/konjkav.webp';

const HeroSection = () => {
  return (
    <div className="flex justify-center items-center flex-col ">
      <img src={konjkav} className="w-[104px] h-[104px] mb-10 mt-5" />
      <h1 className="mb-10 text-[16px] font-extrabold">درباره چه چیزی کنج‌کاو شدی بدونی؟</h1>
    </div>
  );
};

export default HeroSection;

```

================
FILE: src\student\components\konjKav\studySelection\MainContent.tsx
================

```
import React from 'react';
import CardSelector from './CardSelector';

const MainContent: React.FC = () => {
  return (
    <div
      className='
        border-2 border-borderColor-1 bg-white rounded-[24px]
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col rounded-b-none border-b-0
      '
    >
      <div> 
        <CardSelector />
      </div>
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\konjKav\studySelection\HeroSection.tsx
================

```
import React from 'react'
import konjkav from './../../../../assets/images/konjkav.webp'

const HeroSection = () => {
  return (
    <div className='flex justify-center items-center flex-col '>
      <img src={konjkav} className='w-[104px] h-[104px] mb-10 mt-5'/>
      <h1 className='mb-10 text-[16px] font-extrabold'>
        اول یکی از کتاب‌هات رو انتخاب کن.
      </h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\konjKav\studySelection\CardSelector.tsx
================

```
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setSelectedStudy } from '../../../../slice/konjkavSlice';
import CardContent from './CardContent';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import LoadingIndicator from '../../../../components/common/LoadingIndicator';

interface Subject {
  id: string;
  name: string;
  image_url: string;
}

const CardSelector: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const selectedStudy = useSelector((state: any) => state.konjkav.selectedStudy);
  
  const [selectedCardId, setSelectedCardId] = useState<string | null>(selectedStudy?.id || null);

  useEffect(() => {
    if (selectedStudy?.id) {
      setSelectedCardId(selectedStudy.id);
    }
  }, [selectedStudy]);

  const { data: subjects, isLoading, isError } = useQuery<Subject[]>({
    queryKey: ['subjects'],
    queryFn: async () => {
      const response = await axios.get<Subject[]>(`https://kiddo2.pythonanywhere.com/api/v1/academics/subjects`);
    
      return response.data;
    },
  });

 if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[500px]">
        <LoadingIndicator className='w-10 h-10' />
      </div>
    );
  }
  const handleCardClick = (subject: Subject) => {
    // Only allow switching to a different card, not deselecting
    if (selectedCardId !== subject.id) {
      setSelectedCardId(subject.id);
      dispatch(setSelectedStudy(subject));
    }
  };

  if (isLoading) return <div>در حال بارگذاری دروس...</div>;
  if (isError) return <div>خطا در بارگذاری دروس.</div>;

  return (
    <div className="grid grid-cols-2 gap-[12px]">
      {subjects?.map((subject) => (
        <CardContent
          key={subject.id}
          title={subject.name}
          image={subject.image_url}
          isSelected={selectedCardId === subject.id}
          selectedCardId={selectedCardId}
          onClick={() => handleCardClick(subject)}
        />
      ))}
    </div>
  );
};

export default CardSelector;
```

================
FILE: src\student\components\konjKav\studySelection\CardContent.tsx
================

```
import React, { useEffect } from "react";
import { useDispatch } from "react-redux";
import riazi from "./../../../../assets/images/riazi.png";
import { activeButtonReducer, disableButtonReducer } from "../../../../slice/konjkavSlice";

interface CardContentProps {
  title: string;
  isSelected: boolean;
  image: string;
  selectedCardId: string | null;
  onClick: () => void;
}

const CardContent: React.FC<CardContentProps> = ({ image,title, isSelected, onClick,selectedCardId }) => {
  const dispatch = useDispatch();

  useEffect(() => {
    if (selectedCardId) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [selectedCardId, dispatch]);

  return (
    <div className={`${isSelected ? `onClickedCard-box` : "card-box"}`}>
      <div
        className={`rounded-[24px] cursor-pointer transition-colors duration-200 flex flex-col overflow-hidden h-full ${isSelected ? `bg-backGroundCard` : "bg-white"}`}
        onClick={onClick}
      >
        <img
          src={image || riazi}
          className="w-full h-auto object-contain"
          alt={title}
        />
        <div className="p-4 text-center">
          <h1 className="text-sm font-semibold">{title}</h1>
        </div>
      </div>
    </div>
  );
};

export default CardContent;
```

================
FILE: src\student\components\konjKav\recentChat\RecentChat.tsx
================

```

```

================
FILE: src\student\components\darsYar\studySelection\MainContent.tsx
================

```
// MainContent.tsx
import React from 'react';
import CardSelector from './CardSelector'; // CardContent is not directly used here


const MainContent: React.FC = () => {
  return (
    <div
      className='
        border-[2px] border-borderColor-1 bg-white rounded-[24px]
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col 
        gap-[12px] pt-[16px] rounded-b-none border-b-0'
    >
      {/* The `gap-[12px] pt-[16px] h-full` on the outer div were a bit ambiguous.
          Moved padding and adjusted gap/flex behavior here. */}
      <div> {/* This div acts as a wrapper for CardSelector */}
        <CardSelector />
      </div>
      
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\darsYar\studySelection\HeroSection.tsx
================

```
import React from 'react'
import darsYar from './../../../../assets/images/darsyar.webp'

const HeroSection = () => {
  return (
    <div className='flex justify-center items-center flex-col '>
      <img src={darsYar} className='w-[104px] h-[104px] mb-10 mt-5'/>
      <h1 className='mb-10 text-[16px] font-extrabold'>
       اول یکی از کتاب‌هات رو انتخاب کن.
      </h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\darsYar\studySelection\CardSelector.tsx
================

```
// src/student/components/darsYar/studySelection/CardSelector.tsx
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setSelectedStudy, clearSelections } from '../../../../slice/darsyarSlice';
import CardContent from './CardContent';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import LoadingIndicator from '../../../../components/common/LoadingIndicator';

interface Card {
  id: string;
  name: string;
  image_url: string;
}

const CardSelector: React.FC = () => {
  const dispatch = useDispatch();
  const selectedStudy = useSelector((state: any) => state.darsyar.selectedStudy);
  const [selectedCardId, setSelectedCardId] = useState<string | null>(selectedStudy?.id || null);

  const {
    data,
    isLoading,
    isError,
  } = useQuery<Card[]>({ 
    queryKey: ['subjectsForDarsyar'],
    queryFn: async () => { 
      console.log("API CALL: fetching subjects for Darsyar");
      const response = await axios.get<Card[]>('https://kiddo2.pythonanywhere.com/api/v1/academics/subjects');
      console.log("API RESPONSE: fetching subjects for Darsyar success", response.data);
      return response.data; 
    },
  });

  useEffect(() => {
    if (selectedStudy?.id) {
      setSelectedCardId(selectedStudy.id);
    }
  }, [selectedStudy]);

  const handleCardClick = (clickedId: string, name: string) => {
    const newSelectedId = selectedCardId === clickedId ? null : clickedId;
    setSelectedCardId(newSelectedId);
    
    if (newSelectedId) {
      dispatch(setSelectedStudy({
        id: clickedId,
        name: name
      }));
    } else {
      dispatch(clearSelections());
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[500px]">
        <LoadingIndicator className='w-10 h-10' />
      </div>
    );
  }

  if (isError) {
    return (
      <div className="text-center p-4 text-red-500">
        خطا در بارگذاری دروس.
      </div>
    );
  }

  return (
    <div className="grid grid-cols-2 gap-[12px]">
      {data?.map((card) => (
        <CardContent
          key={card.id}
          name={card.name}
          image={card.image_url}
          selectId={selectedCardId}
          isSelected={selectedCardId === card.id}
          onClick={() => handleCardClick(card.id, card.name)}
        />
      ))}
    </div>
  );
};

export default CardSelector;
```

================
FILE: src\student\components\darsYar\studySelection\CardContent.tsx
================

```
// CardContent.tsx
import React, { useEffect } from "react"; // Import useEffect
import riazi from "./../../../../assets/images/riazi.png";
import { useDispatch } from "react-redux";
import { activeButtonReducer, disableButtonReducer } from "../../../../slice/darsyarSlice";

interface CardContentProps {
  name: string;
  image:string;
  selectId: string|null;
  isSelected:boolean
  onClick: () => void;
}

const CardContent: React.FC<CardContentProps> = ({
  name,
  selectId,
  image,
  isSelected,
  onClick,
}) => {
  const dispatch = useDispatch();


  useEffect(() => {
    if (selectId) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [selectId, dispatch]); 

  return (
    <div className={`${isSelected ? `onClickedCard-box` : "card-box"}`}>
      {" "}
      <div
        className={`
          rounded-[24px] cursor-pointer
          transition-colors duration-200 
          flex flex-col 
          overflow-hidden 
          h-full 
          ${isSelected ? `bg-backGroundCard` : "bg-white"}
        `}
        onClick={onClick}
      >
        <img
          src={image || riazi}
          className=" w-full h-auto object-contain"
          alt={name}
        />

        <div
          className="
          p-4 
          text-center flex flex-col justify-center items-center 
        "
        >
          <h1
            className="
            text-sm 
            font-semibold
            pb-0 mt-0 
          "
          >
            {name}
          </h1>
        </div>
      </div>
    </div>
  );
};

export default CardContent;
```

================
FILE: src\student\components\darsYar\studyAssistant\HeroSection.tsx
================

```

import kiddoFace from './../../../../assets/images/happyFace.png'




const HeroSection = () => {
  return (
    <div className='mb-[32px] pt-[16px]'>
        <div className='flex justify-center  p-4'>
        <img src={kiddoFace}/>
      </div>
      <p className='text-center text-[16px] font-extrabold'>به درس‌یار خوش آمدی!</p>
    </div>
  )
}

export default HeroSection
```

================
FILE: src\student\components\darsYar\studyAssistant\CardSection.tsx
================

```
import React from 'react'
import { studyAssistantConstatnt } from '../../../../constants/studyAssistantConstant'

const CardSection:React.FC = () => {
  return (
  <div >
   {studyAssistantConstatnt.map((study,index)=>(
        <div className='card-box mb-[12px] gap-[12px] ' key={index}>
        <div className=' flex justify-center flex-col bg-white rounded-[24px] gap-[8px] p-[16px] '>
            <div className='gap-[8px] flex items-center justify-start'>
               {study.logo}
                <h1 className='font-extrabold text-[14px]'> {study.title}   </h1>

            </div>
             <div>
           <p className=' text-justify  text-[14px]'>{study.description}</p>
        </div>
            
        </div>
       
     </div>
  )
   )}
  </div>)
}

export default CardSection
```

================
FILE: src\student\components\darsYar\lessonSelection\MainContent.tsx
================

```
// MainContent.tsx
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { setSelectedLesson } from "../../../../slice/darsyarSlice";
import CardContent from "./CardContent";
import axios from "axios";
import { useQuery } from "@tanstack/react-query";
import LoadingIndicator from "../../../../components/common/LoadingIndicator";

// Interface for the API response
interface LessonResponse {
  id: string;
  title: string;
}


const MainContent: React.FC = () => {
  const dispatch = useDispatch();
  const [selectedLessons, setSelectedLessons] = useState<string[]>([]);
  const subject = useSelector((state: any) => state.darsyar.selectedStudy?.id);
  
   const {
    data,
    isLoading,
    isError, 
    error,   
  } = useQuery<LessonResponse[]>({ 
    queryKey: ['classes', subject],
    queryFn: async () => { 
      const response = await axios.get<LessonResponse[]>(`https://kiddo2.pythonanywhere.com/api/v1/academics/subjects/${subject}/chapters/`);
      return response.data; 
    },
    enabled: !!subject
    });
  

 if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[500px]">
        <LoadingIndicator className='w-10 h-10' />
      </div>
    );
  }

  const handleLessonSelect = (id: string) => {
    setSelectedLessons(prev => {
      const isSelected = prev.includes(id);
      const newSelection = isSelected 
        ? prev.filter(lessonId => lessonId !== id)
        : [...prev, id];
      
      // Update Redux state with selected lessons including both id and name
      const selectedLessonsData = newSelection
        .map(selectedId => data?.find(l => l.id === selectedId))
        .filter((lesson): lesson is LessonResponse => lesson !== undefined)
        .map(lesson => ({
          id: lesson.id,
          name: lesson.title
        }));
      
      const lessonData = selectedLessonsData.map(lesson => ({
        id: lesson.id,
        title: lesson.name // Map name to title to match Lesson interface
      }));
      dispatch(setSelectedLesson(lessonData));
      return newSelection;
    });
  };

  return (
    (!isLoading) && (
      <div className="border-borderColor-1 bg-white h-screen flex flex-col gap-[12px]">
        <div className="bg-white gap-[16px] mt-[16px] mx-[16px]">
          {data?.map((lesson) => (
            <CardContent
              key={lesson.id}
              title={lesson.title} // CardContent still expects title prop
              isSelected={selectedLessons.includes(lesson.id)}
              onClick={() => handleLessonSelect(lesson.id)}
            />
          ))}
        </div>
      </div>
    ) 
  );
};

export default MainContent;

```

================
FILE: src\student\components\darsYar\lessonSelection\HeroSection.tsx
================

```
import React from 'react'
import darsYar from './../../../../assets/images/darsyar.webp'

const HeroSection = () => {
  return (
    <div className='flex justify-center items-center flex-col gap-[32px] pt-[16px]'>
      <img src={darsYar} className='w-[104px] h-[104px]'/>
      <h1 className='mb-10 text-[16px]  font-extrabold'>
       حالا درس‌هایی که می‌خوای رو انتخاب کن!
      </h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\darsYar\lessonSelection\CardContent.tsx
================

```
import React, { useEffect, useState } from "react";
import { useDispatch } from "react-redux";
import { activeButtonReducer, disableButtonReducer } from "../../../../slice/darsyarSlice";

interface CardContentProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
}

const CardContent: React.FC<CardContentProps> = ({ title, isSelected, onClick }) => {
  const dispatch = useDispatch();
  const [isClicked, setIsClicked] = useState(false);
  
 

  const handleClick = () => {
    onClick();
    setIsClicked(!isClicked); // Toggles the state
  };

  useEffect(() => {
    if (isClicked) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [isClicked, dispatch]); 

  return (
    // Changed m-2 to mb-[16px] for a bottom margin of 16px
    <div className="flex flex-col justify-center mb-[12px] ">
      <div
        className={` ${
          isClicked ? "onClickedButton-box " : "buttonClicked-box"
        }  `}
      >
        <div
          className={`gap-[8px] p-[16px] rounded-[16px] cursor-pointer ${
            isClicked ? "bg-backGroundCard" : "bg-white"
          }`}
          onClick={handleClick}
        >
          <div className="flex justify-start items-center ">
            <h1 className="text-[14px] font-extrabold">{title}</h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CardContent;

```

================
FILE: src\student\components\darsYar\chatWithBot\LessonInformation.tsx
================

```
// src/student/components/darsYar/chatWithBot/LessonInformation.tsx
import React from "react";

interface LessonInformationProps {
  study: string;
  lesson: string;
}

const LessonInformation: React.FC<LessonInformationProps> = ({ study, lesson }) => {
 
  return (
    <div className="flex justify-between items-center py-[8px] infoGradient bg-backGround-1 px-[16px] fixed w-full top-[52px] z-40 mb-4">
      <div>
        <h1 className="text-[14px]">پاسخ گویی با توجه به کتاب {study}</h1>
      </div>
      <div className="bg-white rounded-[16px] px-[16px] py-[4px]">
        <h1 className="text-[14px] font-extrabold">{lesson}</h1>
      </div>
    </div>
  );
};

export default LessonInformation;
```

================
FILE: src\student\components\darsYar\chatWithBot\HeroSection.tsx
================

```
import React from 'react'
import happyFace from './../../../../assets/images/happyFace.png'

const HeroSection = () => {
  return (
    <div className='flex justify-center h-screen items-center flex-col'>
      <img src={happyFace} className='mb-[32px]'/>
      <h1 className='text-[16px] font-extrabold'>چطور میتونم کمکتون کنم</h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\darsYar\chatWithBot\ChatBot.tsx
================

```

```

================
FILE: src\teacher\components\contentContainer\reports\modals\ToolsModal.tsx
================

```
// src/teacher/components/contentContainer/reports/modals/ToolsModal.tsx
import React, { useState } from 'react';
import Modal from '../../Modal';
import Tools from './Tools';
import ChatButton from '../../../../../components/common/ChatButton';

interface ToolsModalProps {
  isModalOpen: boolean;
  handleCloseModal: () => void;
  initialSelection: string;
  onConfirm: (selection: string) => void;
}

const ToolsModal: React.FC<ToolsModalProps> = ({ isModalOpen, handleCloseModal, initialSelection, onConfirm }) => {
  const [activeTool, setActiveTool] = useState<string>(initialSelection);
console.log(activeTool)
  const toolsList = [
    { name: "درس‌یار" },
    { name: "کنجکاو شو" },
    { name: "ترکیب کن" },
    { name: "آزمون ساز" },
  ];
  const allToolsOptionName = "همه ابزارها";

  const handleConfirmClick = () => {
    onConfirm(activeTool);
  };

  return (
    <div>
      <Modal isOpen={isModalOpen} onClose={handleCloseModal}>
        <div className='flex flex-col pb-20'>
          <h2 className="text-center font-bold text-lg mb-4"> ابزار مد نظرتون رو انتخاب کنید.</h2>
          
          <Tools
            name={allToolsOptionName}
            isActive={activeTool === allToolsOptionName}
            onClick={setActiveTool}
          />

          {toolsList.map((tool) => (
            <Tools
              key={tool.name}
              name={tool.name}
              isActive={activeTool === tool.name}
              onClick={setActiveTool}
            />
          ))}

          <div onClick={handleConfirmClick}>
            <ChatButton textButton={'تایید'} />
          </div>
        </div>
      </Modal>
    </div>
  );
}

export default ToolsModal;
```

================
FILE: src\teacher\components\contentContainer\reports\modals\Tools.tsx
================

```
// src/components/ToolsModal/Tools.tsx
import React from 'react';

interface ToolsProps {
  name: string; // Add a name prop to identify each tool
  isActive: boolean;
  onClick: (name: string) => void;
}

const Tools: React.FC<ToolsProps> = ({ name, isActive, onClick }) => {
 
  const handleClick = () => {
    onClick(name);
  };

  return (
    <div className='mb-[12px] ' onClick={handleClick}>
      <div className={` ${isActive ? 'onClickedButton-box ' : 'buttonClicked-box'}  `}> {/* Added a class for active state */}
        <div className={`${isActive ? 'bg-backGroundCard' : 'bg-white'} flex justify-center items-center  rounded-[16px] p-[16px] `}>
          <h1 className='text-[14px] font-extrabold'>{name}</h1> 
        </div>
      </div>
    </div>
  );
};

export default Tools;
```

================
FILE: src\teacher\components\contentContainer\reports\modals\ReportDetailModal.tsx
================

```
// src/teacher/components/contentContainer/reports/modals/ReportDetailModal.tsx
import React from 'react'
import Modal from '../../Modal';
import ChatButton from '../../../../../components/common/ChatButton';
import { useQuery } from '@tanstack/react-query';
import { fetchEventDetails } from '../../../../../api-teacher';
import { useNavigate } from 'react-router-dom';
import { FluentEmoji } from '@lobehub/ui'
import LoadingIndicator from '../../../../../components/common/LoadingIndicator';
interface ReportDetailModalProps {
  eventId: string | null;
  onClose: () => void;
}

const ReportDetailModal: React.FC<ReportDetailModalProps> = ({ eventId, onClose }) => {
  const navigate = useNavigate();
  
  const { data: event, isLoading, isError } = useQuery({
    queryKey: ['eventDetails', eventId],
    queryFn: () => fetchEventDetails(eventId!), // The '!' asserts eventId is not null here
    enabled: !!eventId, // Only run query if eventId is not null
  });
  let level
  if(event?.level==='DANGER'){
    level='هشدار جدی'
  }else if(event?.level==='CONCERN'){
    level='نیاز به توجه'
  } else{
    level='اطلاع‌رسانی'
  }
  const handleViewChat = () => {
    if (event?.session_id) {
      // This route might need to be adjusted based on your final routing for specific chats
      navigate(`/teacher/chat/${event.session_id}`);
    }
    onClose(); // Close modal after navigation
  };
  
  return (
    <div>
      <Modal isOpen={!!eventId} onClose={onClose}>
        {isLoading &&  <div className="flex justify-center items-center text-center">
                  <LoadingIndicator className="w-10 h-10 " />
                </div>}
        {isError && <p className='text-center py-8 text-red-500'>خطا در دریافت جزئیات گزارش.</p>}
        {event && (
          <div className='flex flex-col justify-center gap-4 pb-20'>
            <div className='flex flex-col items-center gap-2'>
              <div className='p-2 bg-backGround-1 rounded-full'>
                 <FluentEmoji emoji={event.emoji} size={70} type="anim" />
              </div>
                <h1 className='font-bold text-lg'>{event.student_name}</h1>
                <div className='flex justify-center gap-2'>
                  <p className='bg-backGround-1 px-3 py-1 rounded-full text-xs'>{event.subject_name}</p>
                  <p className='bg-backGround-1 px-3 py-1 rounded-full text-xs'>{level}</p>
                </div>
            </div>
            
            <div className='text-right'>
                <h2 className='font-bold mb-1'>توضیحات</h2>
                <p className='text-sm text-gray-700'>{event.explanation}</p>
            </div>

            <div onClick={handleViewChat}>
              <ChatButton textButton={'مشاهده چت'} />
            </div>
          </div>
        )}
      </Modal>
    </div>
  )
}

export default ReportDetailModal;
```

================
FILE: src\teacher\components\contentContainer\reports\modals\Lessons.tsx
================

```
// src/components/ToolsModal/Tools.tsx
import React from 'react';

interface ToolsProps {
  name: string; // Add a name prop to identify each tool
  isActive: boolean;
  onClick: (name: string) => void;
}

const Tools: React.FC<ToolsProps> = ({ name, isActive, onClick }) => {

  const handleClick = () => {
    onClick(name);
  };

  return (
   <div >
     <div className='mb-[12px] ' onClick={handleClick}>
      <div className={` ${isActive ? 'onClickedButton-box ' : 'buttonClicked-box'}  `}> {/* Added a class for active state */}
        <div className={`${isActive ? 'bg-backGroundCard' : 'bg-white'} flex justify-center items-center  rounded-[16px] p-[16px] `}>
          <h1 className='font-extrabold text-[14px]'>{name}</h1> 
        </div>
      </div>
    </div>
  
   </div>
  )
};

export default Tools;
```

================
FILE: src\teacher\components\contentContainer\reports\modals\LessonModal.tsx
================

```
import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Modal from '../../Modal';
import Tools from './Tools';
import ChatButton from '../../../../../components/common/ChatButton';

// Interface for API response
interface Subject {
  id: string;
  name: string;
}

interface LessonModalProps {
  isModalOpen: boolean;
  handleCloseModal: () => void;
  initialSelection: string;
  onConfirm: (selection: string) => void;
}

const LessonModal: React.FC<LessonModalProps> = ({ isModalOpen, handleCloseModal, initialSelection, onConfirm }) => {
  const [activeLesson, setActiveLesson] = useState<string>(initialSelection);

  // Fetch subjects dynamically
  const { data: subjects, isLoading, isError } = useQuery<Subject[]>({
    queryKey: ['allSubjectsForFilter'], // Use a distinct query key
    queryFn: async () => {
      console.log("API CALL: fetching all subjects for LessonModal");
      const res = await axios.get('https://kiddo2.pythonanywhere.com/api/v1/academics/subjects/');
      console.log("API RESPONSE: fetching all subjects for LessonModal success", res.data);
      return res.data;
    },
    staleTime: 5 * 60 * 1000, // Cache for 5 minutes
    enabled: isModalOpen, // Only fetch when the modal is open
  });

  const allLessonsOptionName = "همه درس‌ها";
  const isAllLessonsSelected = activeLesson === allLessonsOptionName;

  const handleConfirmClick = () => {
    onConfirm(activeLesson);
  };

  const renderLessonList = () => {
    if (isLoading) {
      return <p className="text-center py-4">در حال بارگذاری دروس...</p>;
    }
    if (isError) {
      return <p className="text-center py-4 text-red-500">خطا در دریافت دروس.</p>;
    }
    return (
      <>
        <Tools
          name={allLessonsOptionName}
          isActive={activeLesson === allLessonsOptionName}
          onClick={setActiveLesson}
          isDisabled={false}
        />
        <div className='grid grid-cols-2 gap-x-3'>
          {subjects?.map((lesson) => (
            <Tools
              key={lesson.id}
              name={lesson.name}
              isActive={activeLesson === lesson.name}
              onClick={setActiveLesson}
              isDisabled={isAllLessonsSelected}
            />
          ))}
        </div>
      </>
    );
  };

  return (
    <div>
      <Modal isOpen={isModalOpen} onClose={handleCloseModal}>
        <div className='flex flex-col pb-20'>
          <h2 className="text-center font-bold text-lg mb-4">لطفا درس مورد نظر را انتخاب نمایید</h2>
          
          {renderLessonList()}

          <div onClick={handleConfirmClick}>
            <ChatButton textButton={'تایید'} />
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default LessonModal;
```

