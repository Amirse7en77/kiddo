PROJECT CONTEXT

================
DIRECTORY STRUCTURE
================

kiddo
├── README.md
├── backend
│   └── api-docs.md
├── eslint.config.js
├── index.html
├── package.json
├── public
│   └── vite.svg
├── src
│   ├── App.tsx
│   ├── api
│   ├── api-chat-details.ts
│   ├── api-chat.ts
│   ├── api.ts
│   ├── assets
│   │   ├── fonts
│   │   │   ├── Yekan Bakh 3.1 Help Fa.pdf
│   │   │   ├── Yekan Bakh 3.1 Licenses.pdf
│   │   │   ├── Yekan Bakh Family
│   │   │   │   ├── otf
│   │   │   │   ├── ttf
│   │   │   │   └── webfonts
│   │   │   ├── Yekan Bakh NoEn
│   │   │   │   ├── otf
│   │   │   │   ├── ttf
│   │   │   │   └── webfonts
│   │   │   └── YekanBakhFaNum
│   │   │       ├── otf
│   │   │       ├── ttf
│   │   │       └── webfonts
│   │   ├── images
│   │   │   ├── DarsYar.png
│   │   │   ├── book.png
│   │   │   ├── farsi.png
│   │   │   ├── happyFace.png
│   │   │   ├── header.png
│   │   │   ├── hediye.png
│   │   │   ├── heroSection.png
│   │   │   ├── konjkav.png
│   │   │   ├── logos
│   │   │   │   ├── alienLogo.png
│   │   │   │   ├── emojiLogo.png
│   │   │   │   └── rocketLogo.png
│   │   │   ├── oloom.png
│   │   │   ├── regularBook.png
│   │   │   └── riazi.png
│   │   └── react.svg
│   ├── components
│   │   ├── RecentChats.tsx
│   │   ├── common
│   │   │   ├── Chat.tsx
│   │   │   ├── ChatButton.tsx
│   │   │   ├── DisableChatButton.tsx
│   │   │   ├── Header.tsx
│   │   │   ├── RecentChatCard.tsx
│   │   │   └── Toast.tsx
│   │   └── login
│   ├── constants
│   │   └── studyAssistantConstant.ts
│   ├── hooks
│   │   ├── useChatSessions.ts
│   │   └── useClientInfo.ts
│   ├── index.css
│   ├── layout
│   │   └── ClassLayout.tsx
│   ├── login
│   │   ├── HeroSection.tsx
│   │   ├── InputGroup.tsx
│   │   ├── Login.tsx
│   │   └── LoginButton.tsx
│   ├── main.tsx
│   ├── router
│   │   └── index.tsx
│   ├── slice
│   │   ├── chatSlice.ts
│   │   ├── darsyarSlice.ts
│   │   ├── konjkavSlice.ts
│   │   ├── tarkibkonSlice.ts
│   │   └── userSlice.ts
│   ├── store
│   │   └── index.ts
│   ├── student
│   │   ├── components
│   │   │   ├── darsYar
│   │   │   │   ├── chatWithBot
│   │   │   │   ├── lessonSelection
│   │   │   │   ├── studyAssistant
│   │   │   │   └── studySelection
│   │   │   ├── home
│   │   │   │   ├── Header.tsx
│   │   │   │   ├── HeroSection.tsx
│   │   │   │   ├── RecentItem.tsx
│   │   │   │   └── ToolCard.tsx
│   │   │   ├── konjKav
│   │   │   │   ├── chatWithBot
│   │   │   │   ├── recentChat
│   │   │   │   ├── studySelection
│   │   │   │   ├── topicSelection
│   │   │   │   └── welcome
│   │   │   └── tarkibKon
│   │   │       ├── favoriteTopic
│   │   │       ├── learnTopic
│   │   │       ├── studySelection
│   │   │       └── welcome
│   │   └── pages
│   │       ├── StudentHome.tsx
│   │       ├── darsYar
│   │       │   ├── DarsyarChatWithBot.tsx
│   │       │   ├── DarsyarLessonSelection.tsx
│   │       │   ├── DarsyarRecentChat.tsx
│   │       │   ├── DarsyarStudyAssistant.tsx
│   │       │   └── DarsyarStudySelection.tsx
│   │       ├── konjKav
│   │       │   ├── KonjkavRecentChat.tsx
│   │       │   ├── KonjkavStudySelection.tsx
│   │       │   ├── KonjkavTopicBot.tsx
│   │       │   ├── KonjkavTopicSelection.tsx
│   │       │   └── KonjkavWelcome.tsx
│   │       └── tarkibKon
│   │           ├── TarkibkonChatBot.tsx
│   │           ├── TarkibkonFavoriteTopic.tsx
│   │           ├── TarkibkonLearnTopic.tsx
│   │           ├── TarkibkonRecentChat.tsx
│   │           ├── TarkibkonStudySelection.tsx
│   │           └── TarkibkonWelcome.tsx
│   ├── teacher
│   │   ├── components
│   │   │   ├── contentContainer
│   │   │   │   ├── Modal.tsx
│   │   │   │   ├── Navbar.tsx
│   │   │   │   ├── StudentAlert.tsx
│   │   │   │   ├── reports
│   │   │   │   └── students
│   │   │   └── home
│   │   │       ├── Classes.tsx
│   │   │       ├── ProgressQuestion.tsx
│   │   │       ├── RecentChat.tsx
│   │   │       └── ToolCard.tsx
│   │   └── pages
│   │       ├── ClassChat.tsx
│   │       ├── ContentContainer.tsx
│   │       ├── ReportsPage.tsx
│   │       └── TeacherHome.tsx
│   ├── types
│   │   ├── api.ts
│   │   └── state.ts
│   └── vite-env.d.ts
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
├── vite.config.ts
└── watch-context.js

================
FILE: package.json
================

```
{
  "name": "kiddo-project",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@react-spring/web": "^10.0.1",
    "@reduxjs/toolkit": "^2.8.2",
    "@tailwindcss/vite": "^4.1.11",
    "@tanstack/react-query": "^5.82.0",
    "@use-gesture/react": "^10.3.1",
    "axios": "^1.10.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-draggable": "^4.5.0",
    "react-redux": "^9.2.0",
    "react-router-dom": "^7.6.3",
    "tailwindcss": "^4.1.11"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "chokidar": "^4.0.3",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "glob": "^11.0.3",
    "globals": "^15.15.0",
    "tree-node-cli": "^1.6.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}

```

================
FILE: tsconfig.json
================

```
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

```

================
FILE: README.md
================

```
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
#   k i d d o  
 
```

================
FILE: src\vite-env.d.ts
================

```
/// <reference types="vite/client" />

```

================
FILE: src\main.tsx
================

```
// src/main.tsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { RouterProvider } from 'react-router-dom'
import { router } from './router' // Removed App import as it's handled by router
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { Provider } from 'react-redux'
import { store } from './store'
import { setupAxiosInterceptors } from './api' // Import the setup function

// Call the setup function once when the app starts
setupAxiosInterceptors();

const queryClient = new QueryClient();

createRoot(document.getElementById('root')!).render(
  <StrictMode>
     <QueryClientProvider client={queryClient}>
      <Provider store={store}>
        <RouterProvider router={router}/>
      </Provider>
    </QueryClientProvider>
  </StrictMode>,
)
```

================
FILE: src\index.css
================

```
@import "tailwindcss";

@font-face {
  font-family: "YekanBakh";
  src: url("./assets/fonts/YekanBakhFaNum/webfonts/woff/YekanBakhFaNum-Regular.woff")
    format("woff");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@font-face {
  font-family: "YekanBakhText";
  src: url("./assets/fonts/YekanBakhFaNum/webfonts/woff2/YekanBakhFaNum-ExtraBlack.woff2")
    format("woff");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}

@theme {
  --color-custom-purple: rgba(98, 72, 255, 1);
  --color-custom-orange-1: rgba(255, 107, 72, 1);
  --color-custom-orange-2: rgba(254, 76, 74, 1);
  --color-backGround-1: #f1f0ee;
  --color-borderColor-1: #dcdcdc;
  --color-chatButton-1: #6248ff;
  --color-backGroundButton: #4432b3;
  --color-backGroundCard: #f2efff;

  /* Declare your custom font here */
  --font-yekanBakh: YekanBakh, sans-serif;
  --font-yekanBakhText: YekanBakhText, sans-serif;

  /* Your gradients are CSS variables, which is fine, but they don't directly create utility classes */
  --gradient-border-main: linear-gradient(
    to right,
    var(--color-custom-purple),
    var(--color-custom-orange-1)
  );
  --gradient-border-alt: linear-gradient(
    135deg,
    var(--color-custom-purple) 0%,
    var(--color-custom-orange-2) 100%
  );
}

.image-with-border {
  border: 2px solid #3498db; /* 2px solid blue border */
  padding: 5px; /* Optional: adds space between the image and the border */
  border-radius: 8px; /* Optional: rounds the corners of the border */
}
.card-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  padding-bottom: 4px;
  background-color: #dcdcdc;
  border-radius: 24px;
}
.buttonClicked-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  padding-bottom: 4px;
  background-color: #dcdcdc;
  border-radius: 18px;
}
.chat-button {
  background-color: #4432b3;


  padding-bottom: 4px;
  border-radius: 20px;
}
.button-box {
 
  background-color: #6248ff;
  border-radius: 16px;
}
.disableButton-box {
 
  background-color: #dcdcdc;
  border-radius: 16px;
}
.disableChat-button {
  background-color: white;
  
  padding-bottom: 4px;
  border-radius: 20px;
}
.onClickedCard-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  padding-bottom: 4px;
  background-color: #6248ff;
  border-radius: 24px;
}
.onClickedButton-box {
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  padding-bottom: 4px;
  background-color: #6248ff;
  border-radius: 18px;
}
.alert-box{
  padding-top: 2px;
  padding-right: 2px;
  padding-left: 2px;
  padding-bottom: 4px;
  background-color: #FE4C4A;
  border-radius: 18px;
}

.infoGradient {
  background-image: linear-gradient(
    to left,
    rgba(98, 72, 255, 0.1),
    /* #6248FF with 10% opacity */ rgba(254, 76, 74, 0.1),
    /* #FE4C4A with 10% opacity */ rgba(255, 107, 72, 0.1)
      /* #FF6B48 with 10% opacity */
  );
}

```

================
FILE: src\App.tsx
================

```




import { Outlet } from 'react-router-dom'


function App() {

  return (
    <div className='font-yekanBakh'>
    
<Outlet/>

    </div>
  )
}

export default App

```

================
FILE: src\api.ts
================

```
// src/api.ts
import axios, { AxiosError } from 'axios';
import { router } from './router'; // Import router for navigation
import { store } from './store'; // Import store to dispatch actions
import { clearUser } from './slice/userSlice'; // Import the action to clear user data

const API_BASE_URL = 'https://kiddo2.pythonanywhere.com';

interface LoginResponse {
  token: string;
  user: {
    id: string;
    username: string;
    first_name: string;
    last_name: string;
    role: 'STUDENT' | 'STAFF';
  };
}

export const login = async (username: string, password: string): Promise<LoginResponse> => {
  console.log("API CALL: login", { username });
  try {
    const response = await axios.post<LoginResponse>(`${API_BASE_URL}/api/v1/accounts/login/`, {
      username,
      password,
    });
    // Store token for future requests
    axios.defaults.headers.common['Authorization'] = `Token ${response.data.token}`;
    console.log("API RESPONSE: login success", response.data.user);
    return response.data;
  } catch (error) {
    const axiosError = error as AxiosError;
     console.error("API ERROR: login", axiosError.response?.data);
    if (axiosError.response?.status === 400) { // Django REST Framework returns 400 for bad credentials
      throw new Error('نام کاربری یا رمز عبور اشتباه است');
    }
    throw new Error('خطا در ارتباط با سرور');
  }
};

// This function sets up the global interceptor
export const setupAxiosInterceptors = () => {
  axios.interceptors.response.use(
    // On successful response, just return it
    (response) => response,
    // On error, check for 401
    (error: AxiosError) => {
      if (error.response?.status === 401) {
        console.log('Global 401 Unauthorized error detected. Logging out and redirecting.');
        // Clear user data from Redux
        store.dispatch(clearUser());
        // Clear auth header
        delete axios.defaults.headers.common['Authorization'];
        // Redirect to login page
        router.navigate('/');
      }
      // Important: return the error so that the original caller (e.g., useQuery) can handle it too
      return Promise.reject(error);
    }
  );
};
```

================
FILE: src\api-chat.ts
================

```
// src/api-chat.ts
import axios from 'axios';
import { ApiMessage, ChatSession } from './types/api';

const API_BASE_URL = 'https://kiddo2.pythonanywhere.com/api/v1';

// Remember that the auth token is set globally in api.ts after login

/**
 * Starts a new DarsYar chat session.
 * @param subjectId The ID of the selected subject.
 * @param chapterIds An array of chapter IDs.
 * @returns The newly created chat session.
 */
export const startDarsYarSession = async (subjectId: string, chapterIds: string[]): Promise<ChatSession> => {
  console.log('API CALL: startDarsYarSession', { subjectId, chapterIds });
  try {
    const response = await axios.post<ChatSession>(`${API_BASE_URL}/tools/dars-yar/start/`, {
      subject_id: subjectId,
      chapter_ids: chapterIds,
    });
    console.log('API RESPONSE: startDarsYarSession', response.data);
    return response.data;
  } catch (error) {
    console.error('API ERROR: startDarsYarSession', error);
    throw error;
  }
};

/**
 * Starts a new Konjkav Sho chat session.
 * @param subjectId The ID of the selected subject.
 * @param initialTopic The initial topic from the user.
 * @returns The newly created chat session.
 */
export const startKonjkavSession = async (subjectId: string, initialTopic: string): Promise<ChatSession> => {
    console.log('API CALL: startKonjkavSession', { subjectId, initialTopic });
    try {
        const response = await axios.post<ChatSession>(`${API_BASE_URL}/tools/konjkav-sho/start/`, {
            subject_id: subjectId,
            initial_topic: initialTopic,
        });
        console.log('API RESPONSE: startKonjkavSession', response.data);
        return response.data;
    } catch (error) {
        console.error('API ERROR: startKonjkavSession', error);
        throw error;
    }
};

/**
 * Starts a new Tarkib Kon chat session.
 * @param subjectId The ID of the selected subject.
 * @param topic The topic to learn.
 * @param theme The theme for the explanation.
 * @returns The newly created chat session.
 */
export const startTarkibkonSession = async (subjectId: string, topic: string, theme: string): Promise<ChatSession> => {
    console.log('API CALL: startTarkibkonSession', { subjectId, topic, theme });
    try {
        const response = await axios.post<ChatSession>(`${API_BASE_URL}/tools/tarkib-kon/start/`, {
            subject_id: subjectId,
            topic: topic,
            theme: theme,
        });
        console.log('API RESPONSE: startTarkibkonSession', response.data);
        return response.data;
    } catch (error) {
        console.error('API ERROR: startTarkibkonSession', error);
        throw error;
    }
};

/**
 * Sends a message to an existing chat session.
 * @param sessionId The ID of the chat session.
 * @param content The text of the message to send.
 * @returns The message object created for the user.
 */
export const sendMessage = async (sessionId: string, content: string): Promise<ApiMessage> => {
  console.log('API CALL: sendMessage', { sessionId, content });
  try {
    const response = await axios.post<ApiMessage>(`${API_BASE_URL}/chat/sessions/${sessionId}/messages/`, {
      content,
    });
    console.log('API RESPONSE: sendMessage', response.data);
    return response.data;
  } catch (error) {
    console.error('API ERROR: sendMessage', error);
    throw error;
  }
};

/**
 * Fetches the details and all messages for a given session.
 * @param sessionId The ID of the chat session.
 * @returns The full session details with all messages.
 */
export const getSessionDetails = async (sessionId: string): Promise<ChatSession> => {
  console.log('API CALL: getSessionDetails', { sessionId });
  try {
    const response = await axios.get<ChatSession>(`${API_BASE_URL}/chat/sessions/${sessionId}/`);
    console.log('API RESPONSE: getSessionDetails', response.data);
    return response.data;
  } catch(error) {
    console.error('API ERROR: getSessionDetails', error);
    throw error;
  }
}
```

================
FILE: src\api-chat-details.ts
================

```

```

================
FILE: backend\api-docs.md
================

```
# مستندات API کیدو

## فهرست
- [احراز هویت](#احراز-هویت)
- [مدیریت جلسات گفتگو](#مدیریت-جلسات-گفتگو)
- [ابزارهای آموزشی](#ابزارهای-آموزشی)
- [پنل کارکنان](#پنل-کارکنان)
- [کدهای خطا](#کدهای-خطا)

## احراز هویت

تمامی درخواست‌ها به API (به جز Login) نیاز به توکن احراز هویت دارند. توکن باید در هدر درخواست به شکل زیر ارسال شود:

```
Authorization: Token YOUR_TOKEN_HERE
```

### ورود به سیستم
`POST /api/v1/accounts/login/`

برای ورود به سیستم و دریافت توکن.

**ورودی:**
```json
{
    "username": "student_user",
    "password": "password123"
}
```

**خروجی موفق:**
```json
{
    "token": "9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b",
    "user": {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "username": "student_user",
        "first_name": "سارا",
        "last_name": "دانش‌آموز",
        "role": "STUDENT"
    }
}
```

**خطاهای احتمالی:**
- `401 Unauthorized`: اطلاعات ورود نامعتبر
- `400 Bad Request`: فیلدهای ضروری ارسال نشده‌اند

### خروج از سیستم
`POST /api/v1/accounts/logout/`

برای خروج و باطل کردن توکن فعلی.

**نیازمند توکن:** بله

**خروجی موفق:**
- `204 No Content`

### مشاهده پروفایل کاربری
`GET /api/v1/accounts/me/`

برای دریافت اطلاعات کاربر فعلی.

**نیازمند توکن:** بله

**خروجی موفق:**
```json
{
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "username": "student_user",
    "first_name": "سارا",
    "last_name": "دانش‌آموز",
    "role": "STUDENT"
}
```

## مدیریت جلسات گفتگو

### لیست جلسات گفتگو
`GET /api/v1/chat/sessions/`

برای دریافت لیست جلسات گفتگوی کاربر.

**نیازمند توکن:** بله

**خروجی موفق:**
```json
[
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "tool": "DARS_YAR",
        "title": "درس یار on علوم تجربی",
        "subject": "علوم تجربی",
        "updated_at": "2025-07-10T12:00:00Z"
    }
]
```

### جزئیات یک جلسه
`GET /api/v1/chat/sessions/{session_id}/`

برای دریافت جزئیات کامل یک جلسه گفتگو به همراه پیام‌ها.

**نیازمند توکن:** بله

**خروجی موفق:**
```json
{
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "tool": "DARS_YAR",
    "title": "درس یار on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "SYSTEM",
            "content": "CONTEXT:\n--- متن از فصل: اتم‌ها ---\nمحتوای فصل...",
            "timestamp": "2025-07-10T12:00:00Z"
        },
        {
            "id": "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b",
            "sender_type": "USER",
            "content": "اتم چیست؟",
            "timestamp": "2025-07-10T12:01:00Z"
        },
        {
            "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
            "sender_type": "AI",
            "content": "اتم کوچک‌ترین ذره...",
            "timestamp": "2025-07-10T12:01:01Z",
            "raw_ai_response": {
                "answer": "اتم کوچک‌ترین ذره...",
                "student_mood": {
                    "emoji": "🤔",
                    "text": "کنجکاو"
                }
            }
        }
    ]
}
```

### ارسال پیام در جلسه
`POST /api/v1/chat/sessions/{session_id}/messages/`

برای ارسال پیام جدید در یک جلسه گفتگو.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "content": "سوال من در مورد اتم‌ها این است..."
}
```

**خروجی موفق:**
```json
{
    "id": "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b",
    "sender_type": "USER",
    "content": "سوال من در مورد اتم‌ها این است...",
    "timestamp": "2025-07-10T12:01:00Z"
}
```

**خطاهای احتمالی:**
- `404 Not Found`: جلسه مورد نظر یافت نشد
- `403 Forbidden`: کاربر به این جلسه دسترسی ندارد
- `400 Bad Request`: محتوای پیام خالی است

## ابزارهای آموزشی

### شروع جلسه درس‌یار
`POST /api/v1/tools/dars-yar/start/`

برای شروع یک جلسه جدید با ابزار درس‌یار.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "subject_id": "550e8400-e29b-41d4-a716-446655440000",
    "chapter_ids": [
        "7d793789-c00c-4c91-99fb-89e1ba7562e4",
        "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b"
    ]
}
```

**خروجی موفق:**
```json
{
    "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "tool": "DARS_YAR",
    "title": "درس یار on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "SYSTEM",
            "content": "CONTEXT:\n--- متن از فصل: اتم‌ها ---\nمحتوای فصل...",
            "timestamp": "2025-07-10T12:00:00Z"
        }
    ]
}
```

**خطاهای احتمالی:**
- `400 Bad Request`: 
  - درس یا فصل‌های انتخابی نامعتبر هستند
  - فصل‌های انتخابی متعلق به درس انتخاب شده نیستند
  - کاربر به درس انتخابی دسترسی ندارد
- `403 Forbidden`: کاربر اجازه استفاده از این ابزار را ندارد

### شروع جلسه آزمون‌ساز
`POST /api/v1/tools/azmoon-saz/start/`

برای شروع یک جلسه جدید با ابزار آزمون‌ساز.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "subject_id": "550e8400-e29b-41d4-a716-446655440000",
    "chapter_ids": ["7d793789-c00c-4c91-99fb-89e1ba7562e4"],
    "difficulty": "متوسط",
    "num_questions": 10
}
```

**محدودیت‌های ورودی:**
- `difficulty`: یکی از مقادیر "آسان"، "متوسط" یا "سخت"
- `num_questions`: یکی از مقادیر 5، 10 یا 20

**خروجی موفق:**
```json
{
    "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "tool": "AZMOON_SAZ",
    "title": "آزمون ساز on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "SYSTEM",
            "content": "CONTEXT:\n--- متن از فصل: اتم‌ها ---\nمحتوای فصل...",
            "timestamp": "2025-07-10T12:00:00Z"
        },
        {
            "id": "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b",
            "sender_type": "SYSTEM",
            "content": "بر اساس محتوای ارائه شده، لطفاً 10 سوال چهارگزینه‌ای در سطح دشواری 'متوسط' طراحی کن.",
            "timestamp": "2025-07-10T12:00:01Z"
        },
        {
            "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
            "sender_type": "AI",
            "content": "بسیار خب! این هم آزمون شما:",
            "timestamp": "2025-07-10T12:00:02Z",
            "raw_ai_response": {
                "questions": [
                    {
                        "question_text": "کدام گزینه درباره اتم درست است؟",
                        "options": ["گزینه 1", "گزینه 2", "گزینه 3", "گزینه 4"],
                        "correct_answer": "گزینه 2"
                    }
                ]
            }
        }
    ]
}
```

### شروع جلسه کنجکاو شو
`POST /api/v1/tools/konjkav-sho/start/`

برای شروع یک جلسه جدید با ابزار کنجکاو شو.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "subject_id": "550e8400-e29b-41d4-a716-446655440000",
    "initial_topic": "چرا آسمان آبی است؟"
}
```

**خروجی موفق:**
```json
{
    "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "tool": "KONJKAV_SHO",
    "title": "کنجکاو شو on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "USER",
            "content": "چرا آسمان آبی است؟",
            "timestamp": "2025-07-10T12:00:00Z"
        },
        {
            "id": "9d8e3af1-96d4-4c4c-8f9a-2b6a8f5e9c3b",
            "sender_type": "AI",
            "content": "آسمان به دلیل پراکندگی نور...",
            "timestamp": "2025-07-10T12:00:01Z",
            "raw_ai_response": {
                "explanation": "آسمان به دلیل پراکندگی نور...",
                "follow_up_questions": [
                    "چرا در غروب آسمان قرمز می‌شود؟",
                    "آیا در ماه هم آسمان آبی است؟",
                    "نور چگونه در جو پراکنده می‌شود؟"
                ],
                "student_mood": {
                    "emoji": "🤔",
                    "text": "کنجکاو"
                }
            }
        }
    ]
}
```

### شروع جلسه ترکیب کن
`POST /api/v1/tools/tarkib-kon/start/`

برای شروع یک جلسه جدید با ابزار ترکیب کن.

**نیازمند توکن:** بله

**ورودی:**
```json
{
    "subject_id": "550e8400-e29b-41d4-a716-446655440000",
    "topic": "اهرم‌ها",
    "theme": "ماینکرفت"
}
```

**خروجی موفق:**
```json
{
    "id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "tool": "TARKIB_KON",
    "title": "ترکیب کن on علوم تجربی",
    "messages": [
        {
            "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
            "sender_type": "USER",
            "content": "موضوع «اهرم‌ها» را در فضا و لحن «ماینکرفت» توضیح بده.",
            "timestamp": "2025-07-10T12:00:00Z"
        }
    ]
}
```

## پنل کارکنان

### لیست کلاس‌ها
`GET /api/v1/academics/classes/`

برای دریافت لیست کلاس‌های مدرسه کارمند.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**خروجی موفق:**
```json
[
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "name": "ششم - الف",
        "grade_level": 6
    }
]
```

### لیست دانش‌آموزان کلاس
`GET /api/v1/academics/classes/{class_id}/students/`

برای دریافت لیست و وضعیت دانش‌آموزان یک کلاس.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**خروجی موفق:**
```json
[
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "full_name": "سارا دانش‌آموز",
        "last_activity_at": "2025-07-10T12:00:00Z",
        "activity_status": "Active",
        "current_mood": {
            "emoji": "🤔",
            "text": "کنجکاو"
        }
    }
]
```

### لیست و فیلتر رویدادها
`GET /api/v1/chat/events/`

برای دریافت لیست رویدادهای دانش‌آموزان مدرسه.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**پارامترهای Query:**
- `level`: فیلتر بر اساس سطح رویداد (INFO, CONCERN, DANGER)
- `is_resolved`: فیلتر بر اساس وضعیت رسیدگی (true/false)

**خروجی موفق:**
```json
[
    {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "student_name": "سارا دانش‌آموز",
        "overview": "دانش‌آموز از کلمات نگران‌کننده استفاده کرد",
        "emoji": "🚨",
        "level": "DANGER",
        "subject_name": "علوم تجربی",
        "created_at": "2025-07-10T12:00:00Z",
        "is_resolved": false
    }
]
```

### جزئیات رویداد
`GET /api/v1/chat/events/{event_id}/`

برای دریافت جزئیات کامل یک رویداد.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**خروجی موفق:**
```json
{
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "student_name": "سارا دانش‌آموز",
    "overview": "دانش‌آموز از کلمات نگران‌کننده استفاده کرد",
    "emoji": "🚨",
    "level": "DANGER",
    "subject_name": "علوم تجربی",
    "created_at": "2025-07-10T12:00:00Z",
    "is_resolved": false,
    "explanation": "دانش‌آموز در پیام خود از عبارت 'خطرناک' استفاده کرد که نیاز به بررسی دارد.",
    "session_id": "1a2b3c4d-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
    "resolved_by": null
}
```

### تغییر وضعیت رویداد
`PATCH /api/v1/chat/events/{event_id}/`

برای تغییر وضعیت رسیدگی به یک رویداد.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**ورودی:**
```json
{
    "is_resolved": true
}
```

**خروجی موفق:**
```json
{
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "is_resolved": true,
    "resolved_by": {
        "id": "7d793789-c00c-4c91-99fb-89e1ba7562e4",
        "username": "staff_user"
    },
    ...
}
```

### بازنشانی رمز عبور دانش‌آموز
`POST /api/v1/accounts/students/{student_user_id}/reset-password/`

برای بازنشانی رمز عبور یک دانش‌آموز.

**نیازمند توکن:** بله  
**نیازمند نقش:** STAFF

**ورودی:**
```json
{
    "new_password": "new_secure_password_123"
}
```

**محدودیت‌های ورودی:**
- طول رمز عبور حداقل 8 کاراکتر

**خروجی موفق:**
```json
{
    "message": "رمز عبور دانش‌آموز سارا دانش‌آموز با موفقیت تغییر کرد."
}
```

**خطاهای احتمالی:**
- `404 Not Found`: دانش‌آموز مورد نظر یافت نشد
- `403 Forbidden`: کارمند اجازه تغییر رمز این دانش‌آموز را ندارد
- `400 Bad Request`: رمز عبور انتخابی معتبر نیست

## کدهای خطا

### خطاهای عمومی
- `400 Bad Request`: درخواست نامعتبر
- `401 Unauthorized`: عدم احراز هویت
- `403 Forbidden`: عدم دسترسی
- `404 Not Found`: منبع مورد نظر یافت نشد
- `405 Method Not Allowed`: متد HTTP نامعتبر
- `500 Internal Server Error`: خطای داخلی سرور

### نمونه خطا
```json
{
    "error": "Permission denied.",
    "detail": "You do not have permission to perform this action."
}
```

### نکات مهم
1. تمامی درخواست‌ها باید با `Content-Type: application/json` ارسال شوند.
2. تمامی timestamp‌ها در فرمت UTC هستند.
3. شناسه‌های منابع (id) از نوع UUID هستند.
4. در صورت بروز خطا، همیشه یک پیام خطای معنادار برگردانده می‌شود.

```

================
FILE: src\types\state.ts
================

```
export interface RootState {
  darsyar: {
    studySelectionButton: boolean;
    selectedStudy: string | null;
    selectedLesson: string | null;
  };
  konjkav: {
    studySelectionButton: boolean;
    selectedStudy: string | null;
    selectedTopics: string[];
    hasSelectedTopics: boolean;
  };
}

export interface Lesson {
  id: string;
  title: string;
}

export interface Study {
  id: string;
  title: string;
}

export interface Topic {
  id: string;
  title: string;
  description: string;
  emoji: string;
}

```

================
FILE: src\types\api.ts
================

```
// src/types/api.ts

// Based on GET /api/v1/chat/sessions/{session_id}/
export interface ApiMessage {
  id: string;
  sender_type: 'SYSTEM' | 'USER' | 'AI';
  content: string;
  timestamp: string;
  raw_ai_response?: any; // Define more strictly if needed
}

// Based on POST /api/v1/tools/dars-yar/start/
export interface ChatSession {
  id: string; // This is the crucial session_id
  tool: string;
  title: string;
  messages: ApiMessage[];
}
```

================
FILE: src\store\index.ts
================

```
import { configureStore } from '@reduxjs/toolkit';
import { useDispatch } from 'react-redux';
import darsyarReducer from './../slice/darsyarSlice';
import konjkavReducer from './../slice/konjkavSlice';
import tarkibkonReducer from './../slice/tarkibkonSlice';
import userReducer from './../slice/userSlice';

export const store = configureStore({
  reducer: {
    darsyar: darsyarReducer,
    konjkav: konjkavReducer,
    tarkibkon:tarkibkonReducer,
    user:userReducer
  },
});

export type RootState = ReturnType<typeof store.getState>;

export type AppDispatch = typeof store.dispatch;

export const useAppDispatch = () => useDispatch<AppDispatch>();
```

================
FILE: src\slice\userSlice.ts
================

```
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

export interface UserState {
  id: string | null;
  username: string | null;
  first_name: string | null;
  last_name: string | null;
  role: 'STUDENT' | 'STAFF' | null;
  token: string | null;
}

const initialState: UserState = {
  id: null,
  username: null,
  first_name: null,
  last_name: null,
  role: null,
  token: null,
};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<UserState>) => {
      return { ...action.payload };
    },
    clearUser: () => initialState,
  },
  
});


export const { setUser, clearUser } = userSlice.actions;
export default userSlice.reducer;

```

================
FILE: src\slice\tarkibkonSlice.ts
================

```
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface Study {
    id: string;
    name: string;
}

interface TarkibkonState {
  selectedStudy: Study | null;
  learnTopic: string;
  favoriteTopic: string;
  studySelectionButton: boolean;
}

const initialState: TarkibkonState = {
  selectedStudy: null,
  learnTopic: "",
  favoriteTopic: '',
  studySelectionButton: false,
};

const tarkibkonSlice = createSlice({
  name: "tarkibkon",
  initialState,
  reducers: {
    setSelectedStudy: (state, action: PayloadAction<Study | null>) => {
      state.selectedStudy = action.payload;
      state.studySelectionButton = !!action.payload;
    },
    setLearnTopic: (state, action: PayloadAction<string>) => {
      state.learnTopic = action.payload;
    },
     setFavoriteTopic: (state, action: PayloadAction<string>) => {
      state.favoriteTopic = action.payload;
    },
    resetSelection: (state) => {
      state.selectedStudy = null;
      state.learnTopic = "";
      state.favoriteTopic='';
      state.studySelectionButton = false;
    },
    activeButtonReducer: (state) => {
      state.studySelectionButton = true;
    },
    disableButtonReducer: (state) => {
      state.studySelectionButton = false;
    },
  },
});

export const {
  setSelectedStudy,
  setLearnTopic,
  setFavoriteTopic,
  resetSelection,
  activeButtonReducer,
  disableButtonReducer,
} = tarkibkonSlice.actions;

export default tarkibkonSlice.reducer;
```

================
FILE: src\slice\konjkavSlice.ts
================

```
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface Study {
  id: string;
  name: string;
}

interface KonjkavState {
  selectedStudy: Study | null;
  selectedTopic: string;
  studySelectionButton: boolean;
}

const initialState: KonjkavState = {
  selectedStudy: null,
  selectedTopic: "",
  studySelectionButton: false,
};

const konjkavSlice = createSlice({
  name: "konjkav",
  initialState,
  reducers: {
    setSelectedStudy: (state, action: PayloadAction<Study | null>) => {
      state.selectedStudy = action.payload;
      if (action.payload) {
        state.studySelectionButton = true;
      } else {
        state.studySelectionButton = false;
      }
    },
    setSelectedTopic: (state, action: PayloadAction<string>) => {
      state.selectedTopic = action.payload;
    },
    resetSelection: (state) => {
      state.selectedStudy = null;
      state.selectedTopic = "";
      state.studySelectionButton = false;
    },
    activeButtonReducer: (state) => {
      state.studySelectionButton = true;
    },
    disableButtonReducer: (state) => {
      state.studySelectionButton = false;
    },
  },
});

export const {
  setSelectedStudy,
  setSelectedTopic,
  resetSelection,
  activeButtonReducer,
  disableButtonReducer,
} = konjkavSlice.actions;

export default konjkavSlice.reducer;
```

================
FILE: src\slice\darsyarSlice.ts
================

```
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface Study {
  id: string;
  name: string;
}

interface Lesson {
  id: string;
  title: string;
}

interface DarsyarState {
  studySelectionButton: boolean;
  selectedStudy: Study | null;
  studyName: string | null;
  selectedLessons: Lesson[];
  hasSelectedLessons: boolean;
}

const initialState: DarsyarState = {
  studySelectionButton: false,
  selectedStudy: null,
  studyName: null,
  selectedLessons: [],
  hasSelectedLessons: false
};

const darsyarSlice = createSlice({
  name: 'darsyar',
  initialState,
  reducers: {
    activeButtonReducer: (state) => {
      state.studySelectionButton = true;
    },
    disableButtonReducer: (state) => {
      state.studySelectionButton = false;
    },
    setSelectedStudy: (state, action: PayloadAction<Study>) => {
      state.selectedStudy = action.payload;
      state.studyName = action.payload.name;
    },
    setSelectedLesson: (state, action: PayloadAction<Lesson[]>) => {
      state.selectedLessons = action.payload;
      state.hasSelectedLessons = action.payload.length > 0;
    },
    clearSelections: (state) => {
      state.selectedStudy = null;
      state.studyName = null;
      state.selectedLessons = [];
      state.studySelectionButton = false;
      state.hasSelectedLessons = false;
    }
  }
});

export const {
  activeButtonReducer,
  disableButtonReducer,
  setSelectedStudy,
  setSelectedLesson,
  clearSelections
} = darsyarSlice.actions;

export default darsyarSlice.reducer;
```

================
FILE: src\slice\chatSlice.ts
================

```

```

================
FILE: src\router\index.tsx
================

```
// src/router/index.tsx
import { createBrowserRouter, Outlet } from "react-router-dom";

// ... (all other imports remain the same)
import App from "../App";
import Login from "../login/Login";

// ... (import all your other components)
import TeacherHome from "../teacher/pages/TeacherHome";
import StudentHome from "../student/pages/StudentHome";
import ClassLayout from "../layout/ClassLayout";
import StudentsActivities from "../teacher/components/contentContainer/students/StudentsActivities";
import ClassChat from "../teacher/pages/ClassChat";
import DarsyarRecentChat from "../student/pages/darsYar/DarsyarRecentChat";
import DarsyarWelcome from "../student/pages/darsYar/DarsyarStudyAssistant";
import DarsyarStudySelection from "../student/pages/darsYar/DarsyarStudySelection";
import DarsyarLessonSelection from "../student/pages/darsYar/DarsyarLessonSelection";
import DarsyarChatWithBot from "../student/pages/darsYar/DarsyarChatWithBot";
import KonjkavWelcome from "../student/pages/konjKav/KonjkavWelcome";
import KonjkavRecentChat from "../student/pages/konjKav/KonjkavRecentChat";
import KonjkavStudySelection from "../student/pages/konjKav/KonjkavStudySelection";
import KonjkavTopicSelection from "../student/pages/konjKav/KonjkavTopicSelection";
import KonjkavTopicBot from "../student/pages/konjKav/KonjkavTopicBot";
import TarkibkonWelcome from "../student/pages/tarkibKon/TarkibkonWelcome";
import TarkibkonRecentChat from "../student/pages/tarkibKon/TarkibkonRecentChat";
import TarkibkonLearnTopic from "../student/pages/tarkibKon/TarkibkonLearnTopic";
import TarkibkonFavoriteTopic from "../student/pages/tarkibKon/TarkibkonFavoriteTopic";
import TarkibkonChatBot from "../student/pages/tarkibKon/TarkibkonChatBot";
import TarkibkonStudySelection from "../student/pages/tarkibKon/TarkibkonStudySelection";
import ReportsPage from "../teacher/pages/ReportsPage";

// The only change is to export the router instance
export const router = createBrowserRouter([
  {
    path: "/",
    element: <App />, 
    children: [
      {
        index: true,
        element: <Login />,
      },
      // ... (all other routes remain exactly the same)
      {
        path: "teacher", 
        element: <TeacherHome />,
      },
      {
        path: "teacher", 
        element: <ClassLayout />,
        children: [
          {
            path: "students", 
            element: <StudentsActivities />,
          },
          {
            path: "reports",
            element: <ReportsPage />,
          },
          {
            path: "chat", 
            element: <ClassChat />,
          },
          
        ],
      },
      {
        path: "student",
        children: [
          {
            index: true,
            element: <StudentHome />,
          },
          {
            path: "darsyar",
            element: <Outlet />,
            children: [
              { path: "recent-chat", element: <DarsyarRecentChat /> },
              { path: "study-assistant", element: <DarsyarWelcome /> },
              { path: "study-selection", element: <DarsyarStudySelection /> },
              { path: "lesson-selection", element: <DarsyarLessonSelection /> },
              { path: "chat", element: <DarsyarChatWithBot /> },
            ],
          },
          {
            path: "konjkav",
            element: <Outlet />,
            children: [
              { path: "welcome", element: <KonjkavWelcome /> },
              { path: "recent-chat", element: <KonjkavRecentChat /> },
              { path: "study-selection", element: <KonjkavStudySelection /> },
              { path: "topic-selection", element: <KonjkavTopicSelection /> },
              { path: "chat", element: <KonjkavTopicBot /> },
            ],
          },
          {
            path: "tarkibkon",
            element: <Outlet />,
            children: [
              { path: "welcome", element: <TarkibkonWelcome /> },
              { path: "recent-chat", element: <TarkibkonRecentChat /> },
              { path: "study-selection", element: <TarkibkonStudySelection /> },
              { path: "learn-topic-selection", element: <TarkibkonLearnTopic /> },
              { path: "favorite-topic-selection", element: <TarkibkonFavoriteTopic /> },
              { path: "chat", element: <TarkibkonChatBot /> },
            ],
          },
        ],
      },
    ],
  },
]);
```

================
FILE: src\login\LoginButton.tsx
================

```
import React from 'react'

interface LoginButtonProps {
  disabled?: boolean
}

const LoginButton: React.FC<LoginButtonProps> = ({ disabled }) => {
  return (
    <div className="flex justify-center items-center bg-white w-full">
      <div className={`chat-button border-2 border-backGroundButton w-full ${disabled ? 'opacity-50' : ''}`}>
        <button 
          type="submit"
          disabled={disabled}
          className="button-box text-white cursor-pointer p-[16px] w-full disabled:cursor-not-allowed"
        >
          {disabled ? 'در حال ورود...' : 'ورود'}
        </button>
      </div>
    </div>
  )
}

export default LoginButton

```

================
FILE: src\login\Login.tsx
================

```
import React from 'react'
import HeroSection from './HeroSection'
import InputGroup from './InputGroup'

const Login = () => {
  return (
    <div className='bg-backGround-1 '>
      <HeroSection/>
      <InputGroup/>
    </div>
  )
}

export default Login

```

================
FILE: src\login\InputGroup.tsx
================

```
import { useState } from 'react'
import { useDispatch } from 'react-redux'
import LoginButton from './LoginButton'
import { login } from '../api'
import { setUser } from '../slice/userSlice'
import { useNavigate } from 'react-router-dom'

const InputGroup = () => {
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const dispatch = useDispatch()
  const navigate = useNavigate()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    setLoading(true)

    try {
      const response = await login(username, password)
      console.log(response.user)
      dispatch(setUser({
        id: response.user.id,
        username: response.user.username,
        first_name: response.user.first_name,
        last_name: response.user.last_name,
        role: response.user.role,
        token: response.token
      }))
      
      // Navigate based on role
      if (response.user.role === 'STUDENT') {
        navigate('/student')
      } else if (response.user.role === 'STAFF') {
        navigate('/teacher')
      }
    } catch (err: any) {
      setError(err.response?.data?.message || 'خطا در ورود به سیستم')
    } finally {
      setLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className='flex flex-col justify-center items-center rounded-[24px] p-[40px] space-y-6 bg-white border-[2px] border-borderColor-1 rounded-b-none'>
      {error && (
        <div className='w-full text-right text-red-500 text-sm mb-4'>
          {error}
        </div>
      )}
      <div className='w-full mb-[16px]'>
        <p className='mb-[12px] text-right text-[14px] font-extrabold'>نام کاربری</p>
        <input
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className='p-[16px] rounded-[16px] w-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-chatButton-1'
          required
        />
      </div>
      <div className='w-full mb-[40px]'>
        <p className='mb-[12px] text-right text-[14px] font-extrabold'>کد ورود</p>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className='p-[16px] rounded-[16px] border border-gray-300 w-full focus:outline-none focus:ring-2 focus:ring-chatButton-1'
          required
        />
      </div>
      <LoginButton disabled={loading} />
    </form>
  )
}

export default InputGroup
```

================
FILE: src\login\HeroSection.tsx
================

```
import happyFace from './../assets/images/happyFace.png'

const HeroSection = () => {
  return (
    <div className='pb-[32px] pt-[16px]  h-[50vh]'>
        <div className='flex justify-center  p-4'>
        <img src={happyFace}/>
      </div>
      <p className='text-center font-extrabold'>به کیدو خوش آمدی!</p>
    </div>
  )
}

export default HeroSection
```

================
FILE: src\layout\ClassLayout.tsx
================

```
import React from 'react';
import { Outlet } from 'react-router-dom'; // Import Outlet
import Header from '../components/common/Header';
import Navbar from '../teacher/components/contentContainer/Navbar';
import StudentAlert from '../teacher/components/contentContainer/StudentAlert';

const ClassLayout = () => {
  return (
    <div>
      <Header title={'کلاس ششم'} />
      <Navbar />
      <div className='bg-backGround-1 min-h-screen'>
        <div className='mx-[16px] '>
          <StudentAlert />
          <main>
            <Outlet />
          </main>
        </div>
      </div>
    </div>
  );
};

export default ClassLayout;
```

================
FILE: src\hooks\useClientInfo.ts
================

```
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

interface ClientInfo {
  id: string;
  username: string;
  first_name: string;
  last_name: string;
  role: string;
}

const fetchClientInfo = async (): Promise<ClientInfo> => {
  const response = await axios.get('/api/v1/accounts/me/', {
    headers: {
      Authorization: `Token ${localStorage.getItem('token')}`,
    },
  });
  console.log(response)
  return response.data;
};

export const useClientInfo = () => {
  return useQuery({
    queryKey: ['clientInfo'],
    queryFn: fetchClientInfo,
  });
};

```

================
FILE: src\hooks\useChatSessions.ts
================

```
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

interface ChatSession {
  id: string;
  tool: string;
  title: string;
  subject: string;
  updated_at: string;
}

const fetchChatSessions = async (): Promise<ChatSession[]> => {
  const response = await axios.get('/api/v1/chat/sessions/', {
    headers: {
      Authorization: `Token ${localStorage.getItem('token')}`,
    },
  });
  // Ensure we always return an array
  return Array.isArray(response.data) ? response.data : [];
};

export const useChatSessions = () => {
  return useQuery({
    queryKey: ['chatSessions'],
    queryFn: fetchChatSessions,
    // Initialize with an empty array
    initialData: [],
  });
};

```

================
FILE: src\constants\studyAssistantConstant.ts
================

```
import rocketlogo from './../assets/images/logos/rocketLogo.png'
import emojiLogo from './../assets/images/logos/emojiLogo.png'
import alienLogo from './../assets/images/logos/alienLogo.png'

export const studyAssistantConstatnt:studyAssistantType[] = [
  {
    logo: rocketlogo,
    title: "هیچ درسی دیگه سخت نیست",
    description:
      "با درس‌یـــار هر مبحث سختی از کتاب رو اینجا به زبون ساده و سریع یاد بگیر.",
  },
  {
    logo:emojiLogo,
    title: "معلم خصوصی ۲۴ ساعته",
    description:
      "درس‌یـــار همیشه همراه تو! هر زمان و هرکجا، برای سوالاتت جواب فوری بگیر.",
  },
  {
    logo: alienLogo,
    title: "جمع‌بندی آسون برای امتحانات",
    description:
      "با خلاصه‌های دقیق و نکته‌های امتحانی، سریع‌تر از همیشه برای امتحانات آماده شو.",
  },
];
export interface studyAssistantType{
   logo:string ,
    title: string,
    description:string
}

```

================
FILE: src\components\RecentChats.tsx
================

```
import React from 'react';
import { useChatSessions } from '../hooks/useChatSessions';
import RecentChatCard from './common/RecentChatCard';

const RecentChats: React.FC = () => {
  const { data: chatSessions, isLoading, isError } = useChatSessions();

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (isError) {
    return <div>Error loading recent chats</div>;
  }

  if (!chatSessions || chatSessions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center p-6 text-center">
        <p className="text-gray-500">There are no recent chats here.</p>
      </div>
    );
  }

  return (
    <div className="grid gap-4">
      {chatSessions.map((session) => (
        <RecentChatCard
          key={session.id}
          title={session.title}
          tool={session.tool}
          subject={session.subject}
          updatedAt={session.updated_at}
        />
      ))}
    </div>
  );
};

export default RecentChats;

```

================
FILE: src\teacher\pages\TeacherHome.tsx
================

```
import React from "react";
import Header from "../../student/components/home/Header";
import Classes from "../components/home/Classes";
import ToolCard from "../../student/components/home/ToolCard";
import RecentChatCard from "../../components/common/RecentChatCard";
import ProgressQuestion from "../components/home/ProgressQuestion";
import { useChatSessions } from "../../hooks/useChatSessions";
import { useNavigate } from "react-router-dom";

const TeacherHome = () => {
  const navigate=useNavigate()
  const { data: chatSessions = [], isLoading, isError } = useChatSessions();

  const hasRecentChatsForTool = (tool: string) => {
    return chatSessions.some((session) => session.tool === tool);
  };
  const handleClasses=()=>{
    navigate('/teacher/students')
  }

  return (
    <div>
      <Header />
      <div className="bg-backGround-1 h-full">
        <div className="p-[24px] gap-[16px]">
          <div >
            <h1 className="pb-[16px]">کلاس‌ها</h1>
            <div onClick={handleClasses}>
              <Classes />
            </div>
           
          </div>
          <div>
            <h1 className="pt-[20px] pb-[32px]">ابزار‌ها</h1>
            <div className="mb-[24px]">
              <div className="flex justify-center items-center mb-[40px] gap-[12px]">
                <ToolCard
                  title="ترکیب‌کن"
                  description="درسا رو همونطوری که دوست داری یاد بگیر."
                  tool="TARKIB_KON"
                  hasRecentChats={hasRecentChatsForTool("DARS_YAR")}
                />
                <ToolCard
                  title="کنج‌کاو"
                  description="درسا رو همونطوری که دوست داری یاد بگیر."
                  tool="KONJKAV"
                  hasRecentChats={hasRecentChatsForTool("KONJKAV")}
                />
              </div>
              <div className="flex justify-center items-center gap-[12px]">
                <ToolCard
                  title="درس‌یار"
                  description="درسا رو همونطوری که دوست داری یاد بگیر."
                  tool="DARS_YAR"
                  hasRecentChats={hasRecentChatsForTool("SOALYAR")}
                />
                <ToolCard
                  title="آزمون‌ساز"
                  description="درسا رو همونطوری که دوست داری یاد بگیر."
                  tool="AZMOON_SAZ"
                  hasRecentChats={hasRecentChatsForTool("AZMOON_SAZ")}
                />
              </div>
            </div>
          </div>
          <div>
            <h1 className="mb-[16px]">وضعیت مصرف</h1>
            <ProgressQuestion progress={50} />
          </div>

          <h3 className="font-extrabold text-right text-[14px] mt-[32px] mb-[16px]">
            چت‌های اخیر
          </h3>
          <div className="space-y-[12px]">
            {isLoading ? (
              <div className="text-center py-4">در حال بارگذاری...</div>
            ) : isError ? (
              <div className="text-center text-red-500 py-4">
                خطا در بارگذاری چت‌ها
              </div>
            ) : chatSessions.length === 0 ? (
              <div className="text-center text-gray-500 py-4">
                هیچ چت اخیری وجود ندارد
              </div>
            ) : (
              chatSessions.map((session) => (
                <RecentChatCard
                  key={session.id}
                  title={session.title}
                  tool={session.tool}
                  subject={session.subject}
                  updatedAt={session.updated_at}
                />
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TeacherHome;

```

================
FILE: src\teacher\pages\ReportsPage.tsx
================

```
import React from 'react';
import ReportTools from '../components/contentContainer/reports/ReportTools';
import StudentReports from '../components/contentContainer/reports/StudentReports';

const ReportsPage = () => {
  return (
    <>
      <div className='flex justify-center items-center gap-[12px] mb-[16px]'>
        <ReportTools title={'همه درس ها'} />
        <ReportTools title={'همه ابزار ها'} />
      </div>
      <div className='border-[2px] border-borderColor-1 rounded-[24px] bg-white p-[16px]'>
        <StudentReports />
        <StudentReports />
        <StudentReports />
      </div>
    </>
  );
};

export default ReportsPage;
```

================
FILE: src\teacher\pages\ContentContainer.tsx
================

```

import StudentsActivities from '../components/contentContainer/students/StudentsActivities'


const ContentContainer = () => {
  return (
    <div>
     
      <StudentsActivities/>
      
     
    </div>
  )
}

export default ContentContainer

```

================
FILE: src\teacher\pages\ClassChat.tsx
================

```
import React from 'react'
import Header from '../../components/common/Header'
import Navbar from '../components/contentContainer/Navbar'
import StudentAlert from '../components/contentContainer/StudentAlert'
import RecentChatCard from '../components/home/RecentChat'

const ClassChat = () => {
  return (
     <div>
        
          <RecentChatCard/>
          <RecentChatCard/>
          <RecentChatCard/>
          
    </div>
  )
}

export default ClassChat

```

================
FILE: src\student\pages\StudentHome.tsx
================

```
import Header from "../components/home/Header";
import ToolCard from "../components/home/ToolCard";
import { useClientInfo } from "../../hooks/useClientInfo";
import RecentChatCard from "../../components/common/RecentChatCard";
import { useChatSessions } from "../../hooks/useChatSessions";

const StudentHome = () => {
  const { data: chatSessions = [], isLoading: chatsLoading } = useChatSessions();

  const hasRecentChatsForTool = (tool: string) => {
    return chatSessions.some(session => session.tool === tool);
  };

  return (
    <div className="h-screen bg-backGround-1">
      <Header />

      <div className="bg-backGround-1 pb-4">
        <div className="p-[16px]">
          <h1 className="mb-[40px] font-extrabold text-[14px]">ابزار‌ها</h1>

          <div className="mb-[24px]">
            <div className="flex justify-center items-center mb-[40px] gap-[12px]">
              <ToolCard
                title="ترکیب‌کن"
                description="درسا رو همونطوری که دوست داری یاد بگیر."
                tool="TARKIB_KON"
                hasRecentChats={hasRecentChatsForTool("DARS_YAR")}
              />
              <ToolCard
                title="کنج‌کاو"
                description="درسا رو همونطوری که دوست داری یاد بگیر."
                tool="KONJKAV"
                hasRecentChats={hasRecentChatsForTool("KONJKAV")}
              />
            </div>
            <div className="flex justify-center items-center gap-[12px]">
              <ToolCard
                title="درس‌یار"
                description="درسا رو همونطوری که دوست داری یاد بگیر."
                tool="DARS_YAR"
                hasRecentChats={hasRecentChatsForTool("SOALYAR")}
              />
              <ToolCard
                title="آزمون‌ساز"
                description="درسا رو همونطوری که دوست داری یاد بگیر."
                tool="AZMOON_SAZ"
                hasRecentChats={hasRecentChatsForTool("AZMOON_SAZ")}
              />
            </div>
          </div>
        </div>

        <h3 className="font-extrabold text-right text-[14px] mr-[16px] mb-[16px]">
          چت‌های اخیر
        </h3>
        <div className="space-y-[12px] mx-[24px]">
          {chatsLoading ? (
            <div className="text-center py-4">در حال بارگذاری...</div>
          ) : chatSessions.length === 0 ? (
            <div className="text-center text-gray-500 py-4">هیچ چت اخیری وجود ندارد</div>
          ) : (
            chatSessions.map((session) => (
              <RecentChatCard
                key={session.id}
                title={session.title}
                tool={session.tool}
                subject={session.subject}
                updatedAt={session.updated_at}
              />
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default StudentHome;

```

================
FILE: src\components\common\Toast.tsx
================

```
import React, { useEffect } from 'react';

interface ToastProps {
  message: string;
  type: 'success' | 'error';
  onClose: () => void;
}

const Toast: React.FC<ToastProps> = ({ message, type, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      onClose();
    }, 5000); // Close after 5 seconds

    return () => {
      clearTimeout(timer);
    };
  }, [onClose]);

  const baseClasses = 'fixed top-5 right-5 p-4 rounded-lg shadow-lg text-white z-50 animate-pulse';
  const typeClasses = type === 'success' ? 'bg-green-500' : 'bg-red-500';

  return (
    <div className={`${baseClasses} ${typeClasses}`}>
      <span>{message}</span>
      <button onClick={onClose} className="ml-4 font-bold">X</button>
    </div>
  );
};

export default Toast;
```

================
FILE: src\components\common\RecentChatCard.tsx
================

```
import React from 'react'
import darsYar from './../../assets/images/DarsYar.png'

interface RecentChatCardProps {
  title: string;
  tool: string;
  subject: string;
  updatedAt: string;
}

const RecentChatCard: React.FC<RecentChatCardProps> = ({ title, tool, subject, updatedAt }) => {
  const formatDate = (dateString: string) => {
    try {
      // Make sure we have a valid date string
      if (!dateString) return '';

      const date = new Date(dateString);
      
      // Check if date is valid
      if (isNaN(date.getTime())) {
        return '';
      }

      // Format options for Persian date
      const options: Intl.DateTimeFormatOptions = {
        month: 'long',
        day: 'numeric',
      };

      return new Intl.DateTimeFormat('fa-IR', options).format(date);
    } catch (error) {
      console.error('Error formatting date:', error);
      return '';
    }
  };

  return (
    <div>
         <div className='card-box'>
            <div className='flex justify-start items-center bg-white rounded-[22px] p-[16px] gap-[16px] pl-[24px]'>
                <div>
                    <img className='w-[56px] h-[56px] ' src={darsYar} alt={tool} />
                </div>
                <div className='flex flex-col gap-[4px] '>
                    <h1 className='font-extrabold line-clamp-1 w-[215px] text-[14px]'>{title}</h1>
                    <div className='flex justify-start items-start gap-[4px]'>
                        <p className=' bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'>{tool}</p>
                    <p className='bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'>{subject}</p>
                    <p className='bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'>
                        {formatDate(updatedAt)}
                    </p>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
  )
}

export default RecentChatCard

```

================
FILE: src\components\common\Header.tsx
================

```
import { FC } from "react";
import React from "react"; // Import React for inline SVG
import { useNavigate } from "react-router-dom";

interface ButtonType {
  title: string;
  onBackClick?: () => void; // Optional prop for handling back button click
}

const Header: FC<ButtonType> = ({ title }) => {
  const navigate = useNavigate(); // Initialize useNavigate hook

  const handleBackClick = () => {
    navigate(-1); // Go back one step in history
  };
  return (
    <div>
      <header
        className={`
          flex items-center justify-between bg-white py-[24px] px-[16px] h-[52px]
          fixed top-0 w-full z-100
        `}
      >
        {/* Back Button on the left */}
        <div className="flex items-center ">
            <button onClick={handleBackClick} className="mr-4 ">
              {/* Rotated SVG for a left arrow */}
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
               
              >
                <path d="M9.29289 4.29289C9.68342 3.90237 10.3166 3.90237 10.7071 4.29289L16.7071 10.2929C17.0976 10.6834 17.0976 11.3166 16.7071 11.7071L10.7071 17.7071C10.3166 18.0976 9.68342 18.0976 9.29289 17.7071C8.90237 17.3166 8.90237 16.6834 9.29289 16.2929L14.5858 11L9.29289 5.70711C8.90237 5.31658 8.90237 4.68342 9.29289 4.29289Z" fill="#333333"/> {/* Adjust fill color if needed */}
             </svg>
            </button>
          
        </div>

        {/* Title in the center */}
        <div className="text-[16px] font-extrabold absolute left-1/2 -translate-x-1/2">
          {title}
        </div>

        {/* Right-hand side (can be used for other elements if needed) */}
        <div className="w-[24px]"></div> {/* Placeholder to balance the left button if no other content */}
      </header>

      <div className="h-[52px]"></div>
      <hr className="border-[2px] border-borderColor-1 w-full" />
    </div>
  );
};

export default Header;
```

================
FILE: src\components\common\DisableChatButton.tsx
================

```
import React from 'react';

interface ButtonType {
  textButton: string;
}

const DisableChatButton: React.FC<ButtonType> = ({ textButton }) => {
  return (
    <>
      {/*
        The main container for the button needs to be positioned.
        `fixed` for staying in the viewport, `bottom-0` to stick to the bottom,
        `left-0` and `right-0` (or `w-full`) to span the width.
        We'll include the `hr` directly within this fixed container if you want it to
        be part of the sticky bottom bar.
        `bg-white` and `z-50` are good for visibility and layering.
      */}
      <div
        className="
          fixed bottom-0 left-0 right-0
          bg-white z-50
          shadow-lg 
        "
      >
        <hr className="border-[1.5px] border-borderColor-1 w-full" />
        <div className="h-[70px] px-[24px] py-[16px] flex justify-center items-center">
          <div className="card-box rounded-[24px] border-2 border-backGround-1 mx-[16px]">
            <button className="disableChat-button text-borderColor-1 w-[327px] h-[50px] cursor-pointer">
              {textButton}
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

export default DisableChatButton;
```

================
FILE: src\components\common\ChatButton.tsx
================

```
import React from 'react';

interface ButtonType {
  textButton: string;
  onClick?: () => void;
}

const ChatButton: React.FC<ButtonType> = ({ textButton, onClick }) => {
  return (
    <div
      className="
        fixed bottom-0 left-0 right-0
        bg-white z-50
        shadow-lg 
      "
    >
      <hr className="border-[1.5px] border-borderColor-1 w-full" />
      <div className="h-[70px] px-[24px] py-[16px] flex justify-center items-center">
        <div className="chat-button rounded-[24px] border-2 border-backGroundButton mx-[16px]">
          <button
            className="button-box text-borderColor-1 w-[327px] h-[50px] cursor-pointer"
            onClick={onClick}
          >
            {textButton}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatButton;
```

================
FILE: src\components\common\Chat.tsx
================

```
// src/components/common/Chat.tsx
import React, { useState, useEffect, useRef } from "react";
import { sendMessage, getSessionDetails } from "../../api-chat";
import { ApiMessage, ChatSession } from "../../types/api";
import Toast from "./Toast";

interface Message {
  id: string;
  sender: "user" | "bot";
  text: string;
}

interface ChatProps {
  startSession: () => Promise<ChatSession>;
  setIsChatting: React.Dispatch<React.SetStateAction<boolean>>;
  onTypingStateChange: (isTyping: boolean) => void;
}

const mapApiMessageToUiMessage = (apiMessage: ApiMessage): Message => ({
  id: apiMessage.id,
  sender: apiMessage.sender_type === 'USER' ? 'user' : 'bot',
  text: apiMessage.content,
});

const Chat: React.FC<ChatProps> = ({ startSession, setIsChatting,  }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [sessionId, setSessionId] = useState<string | null>(null);

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);



  useEffect(() => {
    const initChat = async () => {
      setIsChatting(true);
      setIsLoading(true);
      try {
        const response = await startSession();
        setSessionId(response.id);
        setMessages(response.messages.map(mapApiMessageToUiMessage));
      } catch (err) {
        setError("خطا در شروع گفتگو. لطفاً دوباره تلاش کنید.");
        console.error('Failed to start chat session:', err);
      } finally {
        setIsLoading(false);
      }
    };
    initChat();
  }, [startSession, setIsChatting]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [inputMessage]);

  const pollForResponse = (sid: string, originalMessageCount: number) => {
    const timeout = 20000;
    const interval = 1000;
    let pollTimeoutId: NodeJS.Timeout;

    const poller = setInterval(async () => {
      try {
        const sessionDetails = await getSessionDetails(sid);
        if (sessionDetails.messages.length > originalMessageCount) {
          const lastMessage = sessionDetails.messages[sessionDetails.messages.length - 1];
          if (lastMessage.sender_type === 'AI') {
            clearInterval(poller);
            clearTimeout(pollTimeoutId);
            setMessages(sessionDetails.messages.map(mapApiMessageToUiMessage));
            setIsLoading(false);
          }
        }
      } catch (err) {
        console.error("Polling error:", err);
      }
    }, interval);

    pollTimeoutId = setTimeout(() => {
      clearInterval(poller);
      if (isLoading) {
          setError("پاسخی از سرور دریافت نشد. لطفاً دوباره تلاش کنید.");
          setIsLoading(false);
      }
    }, timeout);
  };

  const handleSendMessage = async () => {
    if (!sessionId || inputMessage.trim() === "") return;

    const userMessageText = inputMessage.trim();
    const currentMessageCount = messages.length;
    
    const tempUserMessage: Message = {
        id: `temp-${Date.now()}`,
        sender: "user",
        text: userMessageText,
    };
    setMessages(prev => [...prev, tempUserMessage]);
    setInputMessage("");
    setIsLoading(true);

    try {
      await sendMessage(sessionId, userMessageText);
      pollForResponse(sessionId, currentMessageCount + 1);
    } catch (err) {
      setError("خطا در ارسال پیام.");
      setIsLoading(false);
      setMessages(prev => prev.filter(m => m.id !== tempUserMessage.id));
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey && !isLoading) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const systemMessage = messages.find(m => m.sender === 'bot' && m.text.startsWith('CONTEXT:'));

  return (
    <div className='flex flex-col flex-grow bg-backGround-1'>
      {error && <Toast message={error} type="error" onClose={() => setError(null)} />}
      
      <div className="flex-1 overflow-y-auto p-4">
        {systemMessage && (
            <div className="text-xs text-gray-500 bg-gray-100 p-2 rounded-lg my-2 mx-2 whitespace-pre-wrap">
                {systemMessage.text}
            </div>
        )}
        {messages.filter(msg => msg.id !== systemMessage?.id).map((msg) => (
          <div key={msg.id} className={`flex my-2 ${msg.sender === "user" ? "justify-start" : "justify-end"}`}>
            <div className={`max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg p-3 rounded-2xl mx-2 ${msg.sender === "user" ? "bg-custom-purple text-white" : "bg-white text-gray-800 border border-borderColor-1"}`}>
              <p className="text-sm sm:text-base whitespace-pre-wrap">{msg.text}</p>
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="flex justify-start mx-2 my-2">
            <div className="p-3 rounded-2xl bg-white border border-borderColor-1">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-gray-600 rounded-full animate-bounce" style={{ animationDelay: "0s" }}></div>
                <div className="w-2 h-2 bg-gray-600 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                <div className="w-2 h-2 bg-gray-600 rounded-full animate-bounce" style={{ animationDelay: "0.4s" }}></div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="bg-white p-4 w-full border-t border-borderColor-1">
        <div className="relative flex items-center">
          <textarea ref={textareaRef} rows={1} className="w-full py-3 pl-4 pr-14 rounded-full focus:outline-none bg-backGround-1 resize-none overflow-y-auto max-h-40" placeholder="اینجا بنویس ... " value={inputMessage} onChange={(e) => setInputMessage(e.target.value)} onKeyPress={handleKeyPress} disabled={isLoading || !sessionId} />
          <button onClick={handleSendMessage} disabled={isLoading || inputMessage.trim() === "" || !sessionId} className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center justify-center bg-custom-purple text-white w-10 h-10 rounded-full shadow-lg transition duration-200 ease-in-out transform hover:scale-105 disabled:bg-gray-400 disabled:cursor-not-allowed rotate-90">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" transform="rotate(180)">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

export default Chat;
```

================
FILE: src\teacher\components\home\ToolCard.tsx
================

```
import { FC } from "react";
import icon from './../../../assets/images/DarsYar.png'
 
interface ToolCardProps {
  
  title: string;
  description: string;
}

const ToolCard: FC<ToolCardProps> = ({  title, description }) => {
  return (
  <div >
   
   <div className="card-box cursor-pointer hover:transform hover:translate-y-1">
     <div className="flex flex-col items-center text-center  rounded-[24px] bg-white    p-[16px]  ">
      <img src={icon} className="   h-[56px] w-[56px]"/>
      <h3 className="font-extrabold text-[18px] mt-[16px]">{title}</h3>
      <p className="text-[10px] ">{description}</p>
    </div>
   </div>
  </div>
  );
};

export default ToolCard;

```

================
FILE: src\teacher\components\home\RecentChat.tsx
================

```
import React from 'react'
import darsyar from './../../../assets/images/DarsYar.png'

const RecentChatCard = () => {
  return (
    <div>
         <div className='card-box'>
            <div className='flex justify-start items-center bg-white rounded-[22px] p-[16px] gap-[16px] pl-[24px]'>
                <div>
                    <img className='w-[56px] h-[56px] ' src={darsyar}/>
                </div>
                <div className='flex flex-col gap-[4px] '>
                    <h1 className='font-extrabold line-clamp-1 w-[215px] text-[14px]'>توضیحات مربوط به فتوسنتز و بقیه اطلاعات مهم و کاربری</h1>
                    <div className='flex justify-start items-start gap-[4px]'>
                        <p className=' bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'>د‌رس‌یار</p>
                    <p className='bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'> فارسی</p>
                    <p className='bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]' >19 خرداد</p>
                    </div>
                </div>
                
            </div>
        </div>
    </div>
  )
}

export default RecentChatCard

```

================
FILE: src\teacher\components\home\ProgressQuestion.tsx
================

```
import React from 'react'
interface ProgressBarProps {
  progress: number; // The current progress percentage (0-100)
}

const ProgressQuestion:React.FC<ProgressBarProps> = ({ progress }) => {
     const clampedProgress = Math.max(0, Math.min(100, progress));
  return (
        <div className='mb-[12px]'>
         <div className='card-box'>
            <div className='flex flex-col items-center bg-white rounded-[22px] p-[16px] gap-[16px] pl-[24px]'>
             <div className='flex justify-between items-center'>
                <div>
                    <h1 className='text-[12px]'>
                        سوالات باقی مانده
                </h1>
                </div>
                <div className='mr-10 '>
                    <h1 className='bg-[#F2EFFF] rounded-[24px] text-backGroundButton py-[2px] px-[8px]'>
 50 از 100
                </h1>
                </div>
             </div>
                <div className="w-full  rounded-full h-4 bg-backGround-1 overflow-hidden ">
      <div
        className="bg-gradient-to-l from-custom-purple via-custom-orange-1 to-custom-orange-2 h-4 rounded-full transition-all duration-500 ease-out"
        style={{ width: `${clampedProgress}%` }}
        role="progressbar"
        aria-valuenow={clampedProgress}
        aria-valuemin={0}
        aria-valuemax={100}
      ></div>
    </div>
            </div>
        </div>
    </div>
    
  )
}

export default ProgressQuestion

```

================
FILE: src\teacher\components\home\Classes.tsx
================

```
import React from 'react';
import darsYar from './../../../assets/images/DarsYar.png';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

// 1. Define an interface for the structure of each class item
//    It's important to know what properties your API response objects have.
//    Assuming your API returns an array of objects like:
//    [{ id: '...', name: '...', length: ... }, ...]
interface ClassItem {
  id: string | number; // Assuming 'id' can be string or number based on backend
  name: string;
  length: number; // Assuming this represents the number of students
  // Add any other properties that your class objects might have from the API
}

const Classes: React.FC = () => {
  // Use a type assertion or provide a generic type to useQuery for better type inference
  const {
    data,
    isLoading,
    isError, // Add isError to handle fetch errors
    error,   // Add error to get the error object
  } = useQuery<ClassItem[]>({ // Expecting an array of ClassItem
    queryKey: ['classes'],
    queryFn: async () => { // Make queryFn async
      const response = await axios.get<ClassItem[]>(`https://kiddo2.pythonanywhere.com/api/v1/academics/classes`);
      return response.data; // TanStack Query expects the actual data, not the full Axios response
    },
    // Optional: add refetchOnWindowFocus: false if you don't want it refetching on tab focus
    // refetchOnWindowFocus: false,
  });

  // Log data when not loading, for debugging (can be removed in production)
  // Check if data exists before logging its structure, as it's undefined initially
  if (!isLoading && data) {
    console.log("Fetched Data:", data);
  }

  // 2. Handle different states: Loading, Error, and Success

  // Loading state
  if (isLoading) {
    return <div className="p-4 text-center text-gray-600">در حال بارگذاری کلاس‌ها...</div>; // "Loading classes..."
  }

  // Error state
  if (isError) {
    console.error("Error fetching classes:", error); // Log the error for debugging
    return <div className="p-4 text-center text-red-500">خطا در بارگذاری کلاس‌ها: {error?.message || 'نامشخص'}</div>; // "Error loading classes: ..."
  }

  // Success state: Data is available
  return (
    <>
      <div className="bg-backGround-1 p-4"> {/* A general container for the whole section */}
        {/* Check if data is an array and not empty before mapping */}
        {data && data.length > 0 ? (
          <div className=""> {/* Added space-y for consistent vertical spacing */}
            {data.map((classItem) => (
              <div key={classItem.id} className='mb-[12px]'> {/* key prop is essential */}
                <div className='card-box'> {/* Ensure .card-box is defined in your CSS */}
                  <div className='flex justify-start items-center bg-white rounded-[22px] p-[16px] gap-[16px] '>
                    <div>
                      <img className='w-[56px] h-[56px]' src={darsYar} alt={`تصویر ${classItem.name}`} /> {/* Dynamic alt text */}
                    </div>
                    <div className='flex flex-col '>
                      <h1 className='font-extrabold line-clamp-1 text-[14px]'>{classItem.name}</h1>
                      <div className='flex justify-start items-start'>
                        <p className='bg-backGround-1 px-[8px] rounded-[16px] text-[10px] py-[2px]'>
                          {classItem.length} دانش آموز
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          // Handle case where data is empty after loading
          <div className="p-4 text-center text-gray-500">کلاسی برای نمایش وجود ندارد.</div> // "No classes to display."
        )}
      </div>
    </>
  );
};

export default Classes;
```

================
FILE: src\teacher\components\contentContainer\StudentAlert.tsx
================

```
import React from 'react'

const StudentAlert = () => {
  return (
    <div className='py-[16px]'>
         <div className='alert-box '>
            <div className='flex justify-between items-center bg-[#FFF0F0] rounded-[16px] px-[16px] py-[12px] gap-[16px] pl-[24px] text-[#FE4C4A] text-[12px]'>
              
                <div className='flex flex-col gap-[4px] '>
                    <h1 className=' line-clamp-1 '>علی رفتار های خطرناکی دارد</h1>
                   
                </div>
                 <div className='flex flex-col gap-[4px] '>
                    <h1 className='font-extrabold line-clamp-1  '>بررسی</h1>
                   
                </div>
                
            </div>
        </div>
        
    </div>
  )
}

export default StudentAlert
```

================
FILE: src\teacher\components\contentContainer\Navbar.tsx
================

```
import React from 'react';
import { NavLink } from 'react-router-dom';

const Navbar = () => {
  // This function will be called by NavLink to determine the className
  const getNavLinkClass = ({ isActive }) => {
    // Add a bold style or a different color if the link is active
    return isActive ? 'font-extrabold text-blue-600' : 'font-extrabold';
  };

  return (
    <div>
      <div className='flex justify-between items-center bg-white py-[8px] px-[16px] text-[12px]'>
        <div>
          <NavLink to="/teacher/students" className={getNavLinkClass}>
            دانش آموزان
          </NavLink>
        </div>
        <div>
          <NavLink to="/teacher/reports" className={getNavLinkClass}>
            گزارشات
          </NavLink>
        </div>
        <div>
          <NavLink to="/teacher/chat" className={getNavLinkClass}>
            چت ها
          </NavLink>
        </div>
      </div>
      <hr className="border-[2px] border-borderColor-1 w-full" />
    </div>
  );
};

export default Navbar;
```

================
FILE: src\teacher\components\contentContainer\Modal.tsx
================

```
// src/components/Modal.tsx
import React, { FC, useEffect, useRef } from 'react';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
  title?: string; // Optional title for the modal
}

const Modal: FC<ModalProps> = ({ isOpen, onClose, children, title }) => {
  const modalRef = useRef<HTMLDivElement>(null);

  // Close modal on escape key press
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    } else {
      document.removeEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  // Click outside to close (optional, if you want to explicitly close on backdrop click)
  const handleBackdropClick = (event: React.MouseEvent<HTMLDivElement>) => {
    if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    // Backdrop
    <div
      className="fixed inset-0 bg-opacity-25 flex items-center justify-center "
      onClick={handleBackdropClick} // Only close if clicking on the backdrop, not the modal content itself
      aria-modal="true"
      role="dialog"
      aria-labelledby={title ? "modal-title" : undefined}
    >
      {/* Modal content */}
      <div
        ref={modalRef}
        className="bg-white rounded-[24px] p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto transform transition-all  rounded-b-none"
      >
        <div className="flex justify-center items-center pb-3 mb-4">
          {title && (
            <h2 id="modal-title" className="text-xl font-semibold text-gray-900">
              {title}
            </h2>
          )}
        </div>
        {children}
      </div>
    </div>
  );
};

export default Modal;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonWelcome.tsx
================

```
import { FC } from "react";
import Header from "../../../components/common/Header";

import ChatButton from "../../../components/common/ChatButton";
import HeroSection from "../../../student/components/tarkibKon/welcome/HeroSection";
import CardSection from "../../../student/components/tarkibKon/welcome/CardSection";
import { useNavigate } from "react-router-dom";
;



const TarkibkonWelcome:FC = () => {
    const navigate=useNavigate()
    const handleNewChat=()=>{
        navigate('/student/tarkibkon/study-selection')
    }
    return <div >
        <Header title={'ترکیب‌کن'}/>
        <div className="bg-backGround-1 h-full pb-10 ">
  <div className="mx-[32px] ">
      <HeroSection/>
    <CardSection/>
    
  </div>
        </div>
       
        <ChatButton textButton='ساخت چت جدید' onClick={handleNewChat}/>
    </div>
};

export default TarkibkonWelcome;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonStudySelection.tsx
================

```
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { RootState } from "../../../store";
import Header from "../../../components/common/Header";
import DisableChatButton from "../../../components/common/DisableChatButton";
import ChatButton from "../../../components/common/ChatButton";
import HeroSection from "../../components/tarkibKon/studySelection/HeroSection";
import MainContent from "../../components/tarkibKon/studySelection/MainContent";

const TarkibkonStudySelection = () => {
  const navigate = useNavigate();
  const infoButton = useSelector((state: RootState) => state.tarkibkon.studySelectionButton);

  const handleNext = () => {
    navigate('/student/tarkibkon/learn-topic-selection');
  };

  return (
    <div className="h-screen">
      <Header title={'ترکیب‌کن'} />
      <div className='font-yekanBakh bg-backGround-1 pb-20'>
        <HeroSection />
        <MainContent />
      </div>
      {infoButton ? (
        <ChatButton textButton='بعدی' onClick={handleNext} />
      ) : (
        <DisableChatButton textButton='بعدی' />
      )}
    </div>
  );
};

export default TarkibkonStudySelection;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonRecentChat.tsx
================

```

import Header from '../../../components/common/Header'
import ChatButton from '../../../components/common/ChatButton'
import RecentChatCard from '../../../components/common/RecentChatCard'
import RecentChats from '../../../components/RecentChats'

const TarkibkonRecentChat = () => {
  return (
    <>
      <div className='bg-backGround-1'>
        <Header title={'ترکیب‌کن'}/>
        {/* Changed gap to 16px here */}
        <div className='gap-[16px] m-[16px]'> 
          <h1 className=' font-extrabold text-[14px] '>چت های اخیر</h1>
        </div>
        <div className=' flex flex-col gap-[12px] mx-[16px]'>
          <RecentChats/>
           
        </div>
      </div>
      <ChatButton textButton='ساخت چت جدید'/>
    </>
  )
}

export default TarkibkonRecentChat
```

================
FILE: src\student\pages\tarkibKon\TarkibkonLearnTopic.tsx
================

```
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { RootState } from "../../../store";
import { useEffect, useState } from "react";
import { activeButtonReducer, disableButtonReducer, setLearnTopic } from "../../../slice/tarkibkonSlice";
import Header from "../../../components/common/Header";
import ChatButton from "../../../components/common/ChatButton";
import DisableChatButton from "../../../components/common/DisableChatButton";
import MainContent from "../../components/tarkibKon/learnTopic/MainContent";
import TopicSearchBox from "../../components/tarkibKon/learnTopic/TopicSearchBox";
import HeroSection from "../../components/tarkibKon/learnTopic/HeroSection";

const TarkibkonLearnTopic = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const selectedStudy = useSelector((state: RootState) => state.tarkibkon.selectedStudy);
  // selectedTopic from Redux now represents the ID of the selected card
  const learnTopic = useSelector((state: RootState) => state.tarkibkon.learnTopic); 

  const [searchQuery, setSearchQuery] = useState<string>('');

  // Redirect if no study is selected
  useEffect(() => {
    if (!selectedStudy) {
      navigate('/student/tarkibkon/study-selection');
    }
  }, [selectedStudy, navigate]);

  // Combined effect for button activation based on selection OR search query
  useEffect(() => {
    const isActive = (learnTopic !== null && learnTopic !== "") || (searchQuery.trim() !== "");
    if (isActive) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [learnTopic, searchQuery, dispatch]); // Depend on selectedTopic and searchQuery

  const handleStartChat = () => {
    // Before navigating, you might want to decide if the chat is based on a selected topic
    // or the search query. This logic depends on your backend expectations.
    // For now, we'll just navigate if *either* is active.
    if ((learnTopic && learnTopic !== "") || searchQuery.trim() !== "") {
      navigate('/student/tarkibkon/favorite-topic-selection');
    }
  };

  const handleTopicSelect = (topicId: string | null) => {
    // If a topic card is selected, clear the search query.
    // This ensures only one mode of input (selection or search) triggers the button.
    if (topicId) {
      setSearchQuery(""); 
      dispatch(setLearnTopic(topicId));
    } else {
      dispatch(setLearnTopic("")); // Deselect
    }
  };

  const handleSearchQueryChange = (query: string) => {
    setSearchQuery(query);
    // If the user types in the search box, deselect any topic card.
    if (query.trim() !== "") {
      dispatch(setLearnTopic("")); 
    }
  };

  // Get button activation state from Redux (if you want to control it that way)
  const isButtonActive = useSelector((state: RootState) => state.tarkibkon.studySelectionButton);

  return (
    <div className="h-screen">
      <Header title={'کنج‌کاو'}/>
      <div className='font-yekanBakh bg-backGround-1 pb-20'>
        
        <HeroSection />
        <div className="bg-white rounded-[24px] rounded-b-none pb-40 border-[2px] border-borderColor-1">
          <TopicSearchBox 
            searchQuery={searchQuery} 
            setSearchQuery={handleSearchQueryChange} // Use the new handler
          />
          <MainContent 
            onTopicSelect={handleTopicSelect} 
            selectedTopicFromParent={learnTopic} // Pass the selected topic to MainContent
          />
        </div>
      </div>
      {isButtonActive ? (
        <ChatButton textButton='ساخت چت جدید' onClick={handleStartChat} />
      ) : (
        <DisableChatButton textButton='ساخت چت جدید' />
      )}
    </div>
  );
};

export default TarkibkonLearnTopic;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonFavoriteTopic.tsx
================

```
// src/pages/StudySelection.tsx

import { useEffect, useState } from "react"; // Import useState
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import ChatButton from "../../../components/common/ChatButton";
import DisableChatButton from "../../../components/common/DisableChatButton";
import Header from "../../../components/common/Header";

import {  activeButtonReducer, disableButtonReducer, setFavoriteTopic } from "../../../slice/tarkibkonSlice"; // Import reducers
import { RootState } from "../../../store";
import HeroSection from "../../components/tarkibKon/favoriteTopic/HeroSection";
import TopicSearchBox from "../../components/tarkibKon/favoriteTopic/TopicSearchBox";
import MainContent from "../../components/tarkibKon/favoriteTopic/MainContent";


const TarkibkonFavoriteTopic = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const selectedStudy = useSelector((state: RootState) => state.tarkibkon.selectedStudy);
  // selectedTopic from Redux now represents the ID of the selected card
  const favoriteTopic = useSelector((state: RootState) => state.tarkibkon.favoriteTopic); 

  const [searchQuery, setSearchQuery] = useState<string>('');

  // Redirect if no study is selected
  useEffect(() => {
    if (!selectedStudy) {
      navigate('/student/tarkibkon/study-selection');
    }
  }, [selectedStudy, navigate]);

  // Combined effect for button activation based on selection OR search query
  useEffect(() => {
    const isActive = (favoriteTopic !== null && favoriteTopic !== "") || (searchQuery.trim() !== "");
    if (isActive) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [favoriteTopic, searchQuery, dispatch]); // Depend on selectedTopic and searchQuery

  const handleStartChat = () => {
    // Before navigating, you might want to decide if the chat is based on a selected topic
    // or the search query. This logic depends on your backend expectations.
    // For now, we'll just navigate if *either* is active.
    if ((favoriteTopic && favoriteTopic !== "") || searchQuery.trim() !== "") {
      navigate('/student/tarkibkon/chat');
    }
  };

  const handleTopicSelect = (topicId: string | null) => {
    // If a topic card is selected, clear the search query.
    // This ensures only one mode of input (selection or search) triggers the button.
    if (topicId) {
      setSearchQuery(""); 
      dispatch(setFavoriteTopic(topicId));
    } else {
      dispatch(setFavoriteTopic("")); // Deselect
    }
  };

  const handleSearchQueryChange = (query: string) => {
    setSearchQuery(query);
    // If the user types in the search box, deselect any topic card.
    if (query.trim() !== "") {
      dispatch(setFavoriteTopic("")); 
    }
  };

  // Get button activation state from Redux (if you want to control it that way)
  const isButtonActive = useSelector((state: RootState) => state.tarkibkon.studySelectionButton);

  return (
    <div className="h-screen">
      <Header title={'کنج‌کاو'}/>
      <div className='font-yekanBakh bg-backGround-1 pb-20'>
        
        <HeroSection />
        <div className="bg-white rounded-[24px] rounded-b-none pb-40 border-[2px] border-borderColor-1">
          <TopicSearchBox
            searchQuery={searchQuery} 
            setSearchQuery={handleSearchQueryChange} // Use the new handler
          />
          <MainContent 
            onTopicSelect={handleTopicSelect} 
            selectedTopicFromParent={favoriteTopic} // Pass the selected topic to MainContent
          />
        </div>
      </div>
      {isButtonActive ? (
        <ChatButton textButton='ساخت چت جدید' onClick={handleStartChat} />
      ) : (
        <DisableChatButton textButton='ساخت چت جدید' />
      )}
    </div>
  );
};

export default TarkibkonFavoriteTopic;
```

================
FILE: src\student\pages\tarkibKon\TarkibkonChatBot.tsx
================

```
import { useState, useEffect, useCallback } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import Header from "../../../components/common/Header";
import Chat from "../../../components/common/Chat";
import { startTarkibkonSession } from "../../../api-chat";
import { ChatSession } from "../../../types/api";

interface Study {
    id: string;
    name: string;
}

interface RootState {
  tarkibkon: {
    selectedStudy: Study | null;
    learnTopic: string;
    favoriteTopic: string;
  };
}

const TarkibkonChatBot = () => {
  const navigate = useNavigate();
  const [isChatting, setIsChatting] = useState(false);
  const { selectedStudy, learnTopic, favoriteTopic } = useSelector((state: RootState) => state.tarkibkon);

  useEffect(() => {
    if (!selectedStudy || !learnTopic || !favoriteTopic) {
      navigate('/student/tarkibkon/study-selection');
    }
  }, [selectedStudy, learnTopic, favoriteTopic, navigate]);
  
  const startSessionCallback = useCallback((): Promise<ChatSession> => {
    if (!selectedStudy || !learnTopic || !favoriteTopic) {
      return Promise.reject("Selections are not valid.");
    }
    return startTarkibkonSession(selectedStudy.id, learnTopic, favoriteTopic);
  }, [selectedStudy, learnTopic, favoriteTopic]);

  if (!selectedStudy || !learnTopic || !favoriteTopic) {
    return null;
  }

  return (
    <div className="bg-backGround-1 h-screen flex flex-col">
      <Header title={'ترکیب‌کن'} />
      <div className="flex-grow flex flex-col">
          <Chat 
            startSession={startSessionCallback}
            setIsChatting={setIsChatting} 
          />
      </div>
    </div>
  );
};

export default TarkibkonChatBot;
```

================
FILE: src\student\pages\darsYar\DarsyarStudySelection.tsx
================

```
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Header from '../../../components/common/Header';
import HeroSection from '../../components/darsYar/studySelection/HeroSection';
import MainContent from '../../components/darsYar/studySelection/MainContent';
import ChatButton from '../../../components/common/ChatButton';
import DisableChatButton from '../../../components/common/DisableChatButton';


const DarsyarStudySelection = () => {
  const navigate = useNavigate();
  const infoButton: boolean = useSelector((state: any) => state?.darsyar?.studySelectionButton);
   
  const handleNext = () => {
    navigate('/student/darsyar/lesson-selection');
  };

  return (
    <div className="h-screen">
      <Header title={'درس‌یار'} />
      <div className='font-yekanBakh bg-backGround-1 pb-20'> {/* Increased pb to avoid overlap with draggable MainContent */}
        <HeroSection />
         <MainContent />
      </div>
      {infoButton ? (
        <ChatButton textButton='بعدی' onClick={handleNext} />
      ) : (
        <DisableChatButton textButton='بعدی' />
      )}
    </div>
  );
};

export default DarsyarStudySelection;
```

================
FILE: src\student\pages\darsYar\DarsyarStudyAssistant.tsx
================

```
import { FC } from "react";
import { useNavigate } from "react-router-dom";
import Header from "../../../components/common/Header";
import HeroSection from "../../components/darsYar/studyAssistant/HeroSection";
import CardSection from "../../components/darsYar/studyAssistant/CardSection";
import ChatButton from "../../../components/common/ChatButton";

const DarsyarWelcome: FC = () => {
  const navigate = useNavigate();
  

  const handleNewChat = () => {
    navigate("/student/darsyar/study-selection");
  };

  return (
    <div>
      <Header title={'درس‌یار'} />
      <div className="bg-backGround-1 h-full pb-10">
        <div className="mx-[32px]">
          <HeroSection />
          <CardSection />
        </div>
      </div>
      <ChatButton textButton='ساخت چت جدید' onClick={handleNewChat} />
    </div>
  );
};

export default DarsyarWelcome;
```

================
FILE: src\student\pages\darsYar\DarsyarRecentChat.tsx
================

```
import ChatButton from "../../../components/common/ChatButton"
import Header from "../../../components/common/Header"
import RecentChatCard from "../../../components/common/RecentChatCard"
import RecentChats from "../../../components/RecentChats"


const DarsyarRecentChat = () => {
  return (
    <>
      <div className='bg-backGround-1'>
        <Header title={'درس‌یار'}/>
        {/* Changed gap to 16px here */}
        <div className='gap-[16px] m-[16px]'> 
          <h1 className=' font-extrabold text-[14px] '>چت های اخیر</h1>
        </div>
        <div className=' flex flex-col gap-[12px] mx-[16px]'>
         <RecentChats/>
        </div>
      </div>
      <ChatButton textButton='ساخت چت جدید'/>
    </>
  )
}

export default DarsyarRecentChat
```

================
FILE: src\student\pages\darsYar\DarsyarLessonSelection.tsx
================

```
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { useState, useEffect } from "react";
import ChatButton from "../../../components/common/ChatButton";
import DisableChatButton from "../../../components/common/DisableChatButton";
import Header from "../../../components/common/Header";
import MainContent from "../../components/darsYar/lessonSelection/MainContent";
import HeroSection from "../../components/darsYar/lessonSelection/HeroSection";

interface RootState {
  darsyar: {
    studySelectionButton: boolean;
    selectedStudy: string | null;
    selectedLessons: string[];
    hasSelectedLessons: boolean;
  };
}

const DarsyarLessonSelection = () => {
  const navigate = useNavigate();
  const [shouldNavigate, setShouldNavigate] = useState(false);
  const selectedStudy = useSelector((state: RootState) => state.darsyar.selectedStudy);
  const selectedLessons = useSelector((state: RootState) => state.darsyar.selectedLessons);

    useEffect(() => {
    // Navigate to login page if selections are missing
    if (!selectedStudy ) {
      navigate('/'); 
    }
  }, [selectedStudy, navigate]);
  useEffect(() => {
    if (shouldNavigate && selectedStudy && selectedLessons.length > 0) {
      navigate('/student/darsyar/chat');
    }
  }, [shouldNavigate, selectedStudy, selectedLessons, navigate]);

  const handleStartChat = () => {
    setShouldNavigate(true);
  };

  // Check both conditions for button activation
  const isButtonActive = selectedStudy !== null && selectedLessons.length > 0;

  return (
    <div>
      <div>
        <Header title={'درس‌یار'} />
        <div className='bg-backGround-1'>
          <HeroSection />
          <MainContent />
        </div>
        {isButtonActive ? (
          <ChatButton textButton='ساخت چت جدید' onClick={handleStartChat} />
        ) : (
          <DisableChatButton textButton='ساخت چت جدید' />
        )}
      </div>
    </div>
  );
};

export default DarsyarLessonSelection;

```

================
FILE: src\student\pages\darsYar\DarsyarChatWithBot.tsx
================

```
// src/student/pages/darsYar/DarsyarChatWithBot.tsx
import { useState, useEffect, useCallback } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import LessonInformation from "../../components/darsYar/chatWithBot/LessonInformation";
import Header from "../../../components/common/Header";
import Chat from "../../../components/common/Chat";
import { startDarsYarSession } from "../../../api-chat";
import { ChatSession } from "../../../types/api";

interface Study {
  id: string;
  name: string;
}

interface RootState {
  darsyar: {
    selectedStudy: Study | null;
    selectedLessons: { id: string; name: string; }[];
  };
}

const DarsyarChatWithBot = () => {
  const navigate = useNavigate();
  const [isChatting, setIsChatting] = useState(false);
  const [showLessonInfo, setShowLessonInfo] = useState(true);
  const selectedStudy = useSelector((state: RootState) => state.darsyar.selectedStudy);
  const selectedLessons = useSelector((state: RootState) => state.darsyar.selectedLessons);

  useEffect(() => {
    // Navigate to login page if selections are missing
    if (!selectedStudy || selectedLessons.length === 0) {
      navigate('/'); 
    }
  }, [selectedStudy, selectedLessons, navigate]);
  
  const startSessionCallback = useCallback((): Promise<ChatSession> => {
    if (!selectedStudy || selectedLessons.length === 0) {
      return Promise.reject("Selections are not valid.");
    }
    return startDarsYarSession(
      selectedStudy.id,
      selectedLessons.map(lesson => lesson.id)
    );
  }, [selectedStudy, selectedLessons]);

  // const handleTypingStateChange = (isTyping: boolean) => {
  //   if(isTyping){
  //     setShowLessonInfo(!isTyping);
  //   }
  // };

  // Render nothing while redirecting
  if (!selectedStudy || selectedLessons.length === 0) {
    return null;
  }

  return (
    <div className="bg-backGround-1 h-screen flex flex-col">
      <Header title={'درس‌یار'} />
      {showLessonInfo && (
        <LessonInformation 
          study={selectedStudy.name}
          lesson={selectedLessons.map(l => l.name).join('، ')}
        />
      )}
      <main className={`flex-grow flex flex-col transition-all duration-300 ${showLessonInfo ? 'pt-[92px]' : 'pt-[52px]'}`}>
          <Chat 
            startSession={startSessionCallback}
            setIsChatting={setIsChatting} 
            // onTypingStateChange={handleTypingStateChange}
          />
      </main>
    </div>
  );
};

export default DarsyarChatWithBot;
```

================
FILE: src\student\pages\konjKav\KonjkavWelcome.tsx
================

```
import { FC } from "react";
import Header from "../../../components/common/Header";

import ChatButton from "../../../components/common/ChatButton";
import HeroSection from "../../../student/components/konjKav/welcome/HeroSection";
import CardSection from "../../../student/components/konjKav/welcome/CardSection";
import { useNavigate } from "react-router-dom";



const KonjkavWelcome:FC = () => {
    const navigate=useNavigate()
    const handleNavigate=()=>{
        navigate('/student/konjkav/study-selection')
    }

    return <div >
        <Header title={'کنج‌کاو'}/>
        <div className="bg-backGround-1 h-full pb-10 ">
  <div className="mx-[32px] ">
      <HeroSection/>
    <CardSection/>
    
  </div>
        </div>
       
        <ChatButton textButton='ساخت چت جدید' onClick={handleNavigate}/>
    </div>
};

export default KonjkavWelcome;
```

================
FILE: src\student\pages\konjKav\KonjkavTopicSelection.tsx
================

```
// src/pages/StudySelection.tsx

import { useEffect, useState } from "react"; // Import useState
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import ChatButton from "../../../components/common/ChatButton";
import DisableChatButton from "../../../components/common/DisableChatButton";
import Header from "../../../components/common/Header";
import HeroSection from "../../components/konjKav/topicSelection/HeroSection";
import MainContent from "../../components/konjKav/topicSelection/MainContent";
import { setSelectedTopic, activeButtonReducer, disableButtonReducer } from "../../../slice/konjkavSlice"; // Import reducers
import { RootState } from "../../../store";
import TopicSearchBox from "../../components/konjKav/topicSelection/TopicSearchBox";

const KonjkavTopicSelection = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const selectedStudy = useSelector((state: RootState) => state.konjkav.selectedStudy);
  // selectedTopic from Redux now represents the ID of the selected card
  const selectedTopic = useSelector((state: RootState) => state.konjkav.selectedTopic); 

  const [searchQuery, setSearchQuery] = useState<string>('');

  // Redirect if no study is selected
  useEffect(() => {
    if (!selectedStudy) {
      navigate('/student/konjkav/study-selection');
    }
  }, [selectedStudy, navigate]);

  // Combined effect for button activation based on selection OR search query
  useEffect(() => {
    const isActive = (selectedTopic !== null && selectedTopic !== "") || (searchQuery.trim() !== "");
    if (isActive) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [selectedTopic, searchQuery, dispatch]); // Depend on selectedTopic and searchQuery

  const handleStartChat = () => {
    // Before navigating, you might want to decide if the chat is based on a selected topic
    // or the search query. This logic depends on your backend expectations.
    // For now, we'll just navigate if *either* is active.
    if ((selectedTopic && selectedTopic !== "") || searchQuery.trim() !== "") {
      navigate('/student/konjkav/chat');
    }
  };

  const handleTopicSelect = (topicId: string | null) => {
    // If a topic card is selected, clear the search query.
    // This ensures only one mode of input (selection or search) triggers the button.
    if (topicId) {
      setSearchQuery(""); 
      dispatch(setSelectedTopic(topicId));
    } else {
      dispatch(setSelectedTopic("")); // Deselect
    }
  };

  const handleSearchQueryChange = (query: string) => {
    setSearchQuery(query);
    // If the user types in the search box, deselect any topic card.
    if (query.trim() !== "") {
      dispatch(setSelectedTopic("")); 
    }
  };

  // Get button activation state from Redux (if you want to control it that way)
  const isButtonActive = useSelector((state: RootState) => state.konjkav.studySelectionButton);

  return (
    <div className="h-screen">
      <Header title={'کنج‌کاو'}/>
      <div className='font-yekanBakh bg-backGround-1 pb-20'>
        
        <HeroSection />
        <div className="bg-white rounded-[24px] rounded-b-none pb-40 border-[2px] border-borderColor-1">
          <TopicSearchBox 
            searchQuery={searchQuery} 
            setSearchQuery={handleSearchQueryChange} // Use the new handler
          />
          <MainContent 
            onTopicSelect={handleTopicSelect} 
            selectedTopicFromParent={selectedTopic} // Pass the selected topic to MainContent
          />
        </div>
      </div>
      {isButtonActive ? (
        <ChatButton textButton='ساخت چت جدید' onClick={handleStartChat} />
      ) : (
        <DisableChatButton textButton='ساخت چت جدید' />
      )}
    </div>
  );
};

export default KonjkavTopicSelection;
```

================
FILE: src\student\pages\konjKav\KonjkavTopicBot.tsx
================

```
import { useState, useEffect, useCallback } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import Header from "../../../components/common/Header";
import Chat from "../../../components/common/Chat";
import { startKonjkavSession } from "../../../api-chat";
import { ChatSession } from "../../../types/api";

interface Study {
    id: string;
    name: string;
}

interface RootState {
  konjkav: {
    selectedStudy: Study | null;
    selectedTopic: string;
  };
}

const KonjkavTopicBot = () => {
  const navigate = useNavigate();
  const [isChatting, setIsChatting] = useState(false);
  const { selectedStudy, selectedTopic } = useSelector((state: RootState) => state.konjkav);

  useEffect(() => {
    if (!selectedStudy || !selectedTopic) {
      navigate('/student/konjkav/study-selection');
    }
  }, [selectedStudy, selectedTopic, navigate]);
  
  const startSessionCallback = useCallback((): Promise<ChatSession> => {
    if (!selectedStudy || !selectedTopic) {
      return Promise.reject("Selections are not valid.");
    }
    return startKonjkavSession(selectedStudy.id, selectedTopic);
  }, [selectedStudy, selectedTopic]);

  if (!selectedStudy || !selectedTopic) {
    return null;
  }

  return (
    <div className="bg-backGround-1 h-screen flex flex-col">
      <Header title={'کنج‌کاو'} />
      <div className="flex-grow flex flex-col">
          <Chat 
            startSession={startSessionCallback}
            setIsChatting={setIsChatting} 
          />
      </div>
    </div>
  );
};

export default KonjkavTopicBot;
```

================
FILE: src\student\pages\konjKav\KonjkavStudySelection.tsx
================

```
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Header from '../../../components/common/Header';
import HeroSection from '../../components/konjKav/studySelection/HeroSection';
import MainContent from '../../components/konjKav/studySelection/MainContent';
import ChatButton from '../../../components/common/ChatButton';
import DisableChatButton from '../../../components/common/DisableChatButton';
import { RootState } from '../../../store';

const KonjkavStudySelection = () => {
  const navigate = useNavigate();
  const infoButton = useSelector((state: RootState) => state.konjkav.studySelectionButton);

  const handleNext = () => {
    navigate('/student/konjkav/topic-selection');
  };

  return (
    <div className="h-screen">
      <Header title={'کنجکاو'} />
      <div className='font-yekanBakh bg-backGround-1 pb-20'>
        <HeroSection />
        <MainContent />
      </div>
      {infoButton ? (
        <ChatButton textButton='بعدی' onClick={handleNext} />
      ) : (
        <DisableChatButton textButton='بعدی' />
      )}
    </div>
  );
};

export default KonjkavStudySelection;
```

================
FILE: src\student\pages\konjKav\KonjkavRecentChat.tsx
================

```
import ChatButton from "../../../components/common/ChatButton"
import Header from "../../../components/common/Header"

import RecentChats from "../../../components/RecentChats"

const KonjkavRecentChat = () => {
  return (
    <>
      <div className='bg-backGround-1'>
        <Header title={'کنج‌کاو'}/>
        {/* Changed gap to 16px here */}
        <div className='gap-[16px] m-[16px]'> 
          <h1 className=' font-extrabold text-[14px] '>چت های اخیر</h1>
        </div>
        <div className=' flex flex-col gap-[12px] mx-[16px]'>
          <RecentChats/>
          
        </div>
      </div>
      <ChatButton textButton='ساخت چت جدید'/>
    </>
  )
}

export default KonjkavRecentChat
```

================
FILE: src\student\components\home\ToolCard.tsx
================

```
import { FC } from "react";
import { useNavigate } from "react-router-dom";
import icon from './../../../assets/images/DarsYar.png';
 
interface ToolCardProps {
  
  title: string;
  description: string;
  tool: "DARS_YAR" | "KONJKAV" | "SOALYAR" | "AZMOON_SAZ" | "TARKIB_KON";
  hasRecentChats?: boolean;
}

const getToolRoute = (tool: string, hasRecentChats: boolean) => {
  switch (tool) {
    case "DARS_YAR":
      return hasRecentChats ? "/student/darsyar/recent-chat" : "/student/darsyar/study-assistant";
    case "KONJKAV":
      return hasRecentChats ? "/student/konjkav/recent-chat" : "/student/konjkav/welcome";
    case "TARKIB_KON":
      return hasRecentChats ? "/student/tarkibkon/recent-chat" : "/student/tarkibkon/welcome";
    case "SOALYAR":
      return hasRecentChats ? "/student/soalyar/recent-chat" : "/student/soalyar/welcome";
    case "AZMOON_SAZ":
      return hasRecentChats ? "/student/azmoon/recent-chat" : "/student/azmoon/welcome";
    default:
      return "/student";
  }
};

const ToolCard: FC<ToolCardProps> = ({  title, description, tool, hasRecentChats = false }) => {
  const navigate = useNavigate();

  const handleClick = () => {
    const route = getToolRoute(tool, hasRecentChats);
    navigate(route);
  };

  return (
  <div onClick={handleClick} >
   
   <div className="card-box cursor-pointer hover:transform hover:translate-y-1">
     <div className="flex flex-col items-center text-center  rounded-[24px] bg-white   relative p-[16px]  ">
      <img src={icon} className=" absolute -translate-y-11 h-[56px] w-[56px]" alt={title} />
      <h3 className="font-extrabold text-[18px] mt-[16px]">{title}</h3>
      <p className="text-[10px] ">{description}</p>
    </div>
   </div>
  </div>
  );
};

export default ToolCard;

```

================
FILE: src\student\components\home\RecentItem.tsx
================

```
import { FC } from "react";

interface RecentItemProps {
  icon: React.ReactNode;
  title: string;
  date: string;
}

const RecentItem: FC<RecentItemProps> = ({ icon, title, date }) => {
  return (
    <div className="flex items-center justify-between bg-white p-3 rounded-lg shadow">
      <div className="flex items-center gap-2">
        <div className="text-2xl">{icon}</div>
        <div className="flex flex-col">
          <span className="text-sm font-medium truncate">{title}</span>
          <span className="text-xs text-gray-500">{date}</span>
        </div>
      </div>
    </div>
  );
};

export default RecentItem;

```

================
FILE: src\student\components\home\HeroSection.tsx
================

```
import { FC } from "react";
import book from './../../../assets/images/book.png'
import hero from './../../../assets/images/heroSection.png'

const HeroSection: FC = () => {
  return (
   <div  className="bg-gradient-to-l from-custom-purple via-custom-orange-1 to-custom-orange-2 p-[2px] rounded-[18px] flex items-center justify-between h-25 ">
        <div className="flex h-full w-full bg-gradient-to-l from-purple-100 to-orange-100 rounded-[16px] ">
            <div className="flex flex-3/4 justify-center items-center flex-col">
       <div className="flex justify-center">
         <img src={book}/>
          <h2 className="font-bold text-lg text-center">درس‌یار</h2>
       </div>
          <p className="text-sm text-gray-700">بهت کمک می‌کنه، درسا رو بهتر بفهمی!</p>
        </div>
        <div className="text-4xl flex flex-1/4 justify-end ml-4">
        <img  src={hero}/>
        </div>
        </div>
        
      </div>
  );
};

export default HeroSection;

```

================
FILE: src\student\components\home\Header.tsx
================

```
import { FC, useState, useEffect } from "react";
import darsYar from './../../../assets/images/DarsYar.png'
const Header: FC = () => {
  const [isSticky, setIsSticky] = useState(false); // State to track stickiness

  useEffect(() => {
    const handleScroll = () => {
      // Determine the scroll position at which the header should become sticky.
      // A common approach is to make it sticky once it scrolls past its initial position.
      // For simplicity, let's say 10 pixels from the top. You might adjust this.
      const offset = window.scrollY;
      if (offset > 10) { // Or headerRef.current.offsetTop if you want it exact
        setIsSticky(true);
      } else {
        setIsSticky(false);
      }
    };

    // Add the scroll event listener when the component mounts
    window.addEventListener("scroll", handleScroll);

    // Clean up the event listener when the component unmounts
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []); // Empty dependency array means this effect runs once on mount and cleans up on unmount

  return (
    <div>
      <header
        className={`
          flex items-center justify-center bg-white py-[24px] px-[16px] h-[52px]
          transition-all duration-300 ease-in-out z-50
          ${isSticky ? "fixed top-0 w-full shadow-md" : ""}
        `}
      >
        <div className="rounded-md flex items-center justify-center ">
          {/* Your left content (e.g., menu icon) */}
        </div>
        <img src={darsYar} className="h-[24px] w-[24px] ml-[8px]"/>
        <div className="text-xl font-bold">کیدو</div>
        
        {/* Your right content (e.g., user icon) */}
      </header>
      {/*
        This div acts as a "spacer" to prevent content from jumping up
        when the header becomes `position: fixed`.
        Its height should match the header's height (52px in your case).
      */}
      {isSticky && <div className="h-[52px]"></div>}
      <hr className="border-[1.5px] border-borderColor-1 w-full" />
    </div>
  );
};

export default Header;
```

================
FILE: src\teacher\components\contentContainer\students\StudentsActivities.tsx
================

```
import React from "react";
import StudentActivity from "./StudentActivity";

const StudentsActivities = () => {
  return (
    <div className="border-[2px] border-borderColor-1 rounded-[24px] bg-white">
      <StudentActivity/>
      <StudentActivity/>
      <StudentActivity/>

      <StudentActivity/>
       
    </div>
  );
};

export default StudentsActivities;

```

================
FILE: src\teacher\components\contentContainer\students\StudentActivity.tsx
================

```
import React from "react";
import darsyar from "./../../../../assets/images/DarsYar.png";
const StudentActivity = () => {
  return (
    <div >
      <div className="flex  p-[16px] gap-[16px]  items-center">
        <div >
          <img className="w-[32px] h-[32px] " src={darsyar} />
        </div>
        <div  className="flex flex-col">
          <div className="flex justify-between mb-[8px]">
           <div className="flex ">
             <h1 className="font-extrabold text-[14px]">امیر علی رستمی</h1>
           </div>

           <div className="flex mr-10">
             <p className=" bg-backGround-1  px-[8px] rounded-[16px] text-[10px] py-[2px] mx-[2px]">
              فعال
            </p>
            <p className=" bg-backGround-1  px-[8px] rounded-[16px] text-[10px] py-[2px]">
              خوشحال
            </p>
           </div>
          </div>
          <div className="flex justify-between ">
           <div className="flex ">
             <h1 className="font-extrabold text-[10px]"> آخرین فعالیت : 22 خرداد </h1>
           </div>

           <div className="flex mr-10">
            
            <p className=" bg-[#F2EFFF]  px-[8px] rounded-[16px] text-[10px] py-[2px]">
              خوب
            </p>
           </div>
          </div>
        </div>
        
      </div>
    </div>
  );
};

export default StudentActivity;

```

================
FILE: src\teacher\components\contentContainer\reports\StudentReports.tsx
================

```
import React, { useState } from "react";

import StudentModal from "./modals/StudentModal";

const StudentReports = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleOpenModal = () => {
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };
  return (
    <div className="mb-[32px]">
      <div className="mb-[8px] flex justify-between">
        <h1> امیر علی</h1>
        <img src={""} />
        <button className="rounded-[24px] px-[8px] py-[2px] " onClick={handleOpenModal}>  مشاهده</button>
      </div>
      <div>
        <h1 className="text-[12px]">
          دانش آموز دنبال تقلب کردن در امتحانات است و میخواد هرجور شده درس نخونه
          وگرنه تهدید به خودکشی میکنه!
        </h1>
    
      </div>
      <StudentModal handleCloseModal={handleCloseModal} isModalOpen={isModalOpen}/>
    </div>
  );
};

export default StudentReports;

```

================
FILE: src\teacher\components\contentContainer\reports\ReportTools.tsx
================

```
import React, { useState } from "react";
import LessonModal from "./modals/LessonModal";
import ToolsModal from "./modals/ToolsModal";

interface ReportType {
  title: string;
}

const ReportTools: React.FC<ReportType> = ({ title }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  
    const handleOpenModal = () => {
      setIsModalOpen(true);
    };
  
    const handleCloseModal = () => {
      setIsModalOpen(false);
    };
  return (
    <div className="card-box">
      <div className="flex justify-start items-center bg-white rounded-[22px] p-[16px]  ">
       <button onClick={handleOpenModal}>
         <div className="flex   ">
          <h1 className="font-extrabold  text-[14px]"> {title}</h1>
        </div>
       </button>
       {title==='همه درس ها' ? (<LessonModal handleCloseModal={handleCloseModal} isModalOpen={isModalOpen}/>) :(<ToolsModal handleCloseModal={handleCloseModal} isModalOpen={isModalOpen}/>)}
       
      </div>
    </div>
  );
};

export default ReportTools;

```

================
FILE: src\student\components\tarkibKon\welcome\HeroSection.tsx
================

```
import happyFace from './../../../../assets/images/happyFace.png'

const HeroSection = () => {
  return (
    <div className='mb-[32px] pt-[16px]'>
        <div className='flex justify-center  p-4'>
        <img src={happyFace}/>
      </div>
      <p className='text-center font-extrabold'>به ترکیب‌کن خوش آمدی!</p>
    </div>
  )
}

export default HeroSection
```

================
FILE: src\student\components\tarkibKon\welcome\CardSection.tsx
================

```
import React from 'react'
import { studyAssistantConstatnt } from '../../../../constants/studyAssistantConstant'


const CardSection:React.FC = () => {
  return (
  <div className='h-screen'>
   {studyAssistantConstatnt.map(study=>(
        <div className='card-box mb-[12px] gap-[12px] '>
        <div className=' flex justify-center flex-col bg-white rounded-[22px] gap-[8px] p-[16px] '>
            <div className='gap-[8px] flex items-center justify-start'>
               <img src={study.logo}/>
                <h1 className='font-extrabold text-[14px]'> {study.title}   </h1>

            </div>
             <div>
           <p className=' text-justify  text-[14px]'>{study.description}</p>
        </div>
            
        </div>
       
     </div>
  )
   )}
  </div>)
}

export default CardSection
```

================
FILE: src\student\components\tarkibKon\studySelection\MainContent.tsx
================

```
import React from 'react';
import CardSelector from './CardSelector';

const MainContent: React.FC = () => {
  return (
    <div className='border-2 border-borderColor-1 bg-white rounded-[16px] p-4 h-full w-full overflow-y-auto flex flex-col'>
      <div> 
        <CardSelector />
      </div>
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\tarkibKon\studySelection\HeroSection.tsx
================

```
import React from 'react'
import darsYar from './../../../../assets/images/DarsYar.png'

const HeroSection = () => {
  return (
    <div className='flex justify-center items-center flex-col '>
      <img src={darsYar} className='w-[104px] h-[104px] mb-10 mt-5'/>
      <h1 className='mb-10'>
        لطفا یکی از درس ها را انتخاب کنید
      </h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\tarkibKon\studySelection\CardSelector.tsx
================

```
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { setSelectedStudy } from '../../../../slice/tarkibkonSlice';
import CardContent from './CardContent';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

interface Subject {
  id: string;
  name: string;
}

const CardSelector: React.FC = () => {
    const dispatch = useDispatch();
    const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

    const { data: subjects, isLoading, isError } = useQuery<Subject[]>({
        queryKey: ['subjects'],
        queryFn: async () => {
            const response = await axios.get<Subject[]>(`https://kiddo2.pythonanywhere.com/api/v1/academics/subjects`);
            return response.data;
        },
    });

    const handleCardClick = (subject: Subject) => {
        if (selectedCardId === subject.id) {
            setSelectedCardId(null);
            dispatch(setSelectedStudy(null));
        } else {
            setSelectedCardId(subject.id);
            dispatch(setSelectedStudy(subject));
        }
    };

    if (isLoading) return <div>در حال بارگذاری دروس...</div>;
    if (isError) return <div>خطا در بارگذاری دروس.</div>;

    return (
        <div className="grid grid-cols-2 gap-[12px]">
            {subjects?.map((subject) => (
                <CardContent
                    key={subject.id}
                    name={subject.name}
                    isSelected={selectedCardId === subject.id}
                    onClick={() => handleCardClick(subject)}
                />
            ))}
        </div>
    );
};

export default CardSelector;
```

================
FILE: src\student\components\tarkibKon\studySelection\CardContent.tsx
================

```
import React, { useEffect } from "react";
import { useDispatch } from "react-redux";
import riazi from "./../../../../assets/images/riazi.png";
import { activeButtonReducer, disableButtonReducer } from "../../../../slice/tarkibkonSlice";

interface CardContentProps {
  name: string;
  isSelected: boolean;
  onClick: () => void;
}

const CardContent: React.FC<CardContentProps> = ({ name, isSelected, onClick }) => {
  const dispatch = useDispatch();

  useEffect(() => {
    if (isSelected) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [isSelected, dispatch]);

  return (
    <div className={`${isSelected ? `onClickedCard-box transform translate-y-1` : "card-box"}`}>
      <div
        className={`rounded-[22px] cursor-pointer transition-colors duration-200 flex flex-col overflow-hidden h-full ${isSelected ? `bg-backGroundCard` : "bg-white"}`}
        onClick={onClick}
      >
        <img src={riazi} className="w-full h-auto object-contain" alt={name}/>
        <div className="p-4 text-center">
          <h1 className="text-sm font-semibold">{name}</h1>
        </div>
      </div>
    </div>
  );
};

export default CardContent;
```

================
FILE: src\student\components\tarkibKon\learnTopic\TopicSelector.tsx
================

```
// src/student/pages/konjKav/topicSelection/TopicSelector.tsx
import React from 'react';
import TopicCard from './TopicCard'; // Assuming TopicCard is in the same directory

interface Card {
  id: string;
  title: string;
}

interface TopicSelectorProps {
  onSelectCard: (id: string | null) => void;
  selectedCardId: string | null; // This will now reflect the single selected card
  isDisabled: boolean;
}

const TopicSelector: React.FC<TopicSelectorProps> = ({ onSelectCard, selectedCardId, isDisabled }) => {
  const cards: Card[] = [
    { id: 'math', title: 'ریاضی' },
    { id: 'science', title: 'علوم' },
    { id: 'history', title: 'تاریخ' },
    { id: 'geography', title: 'جغرافیا' },
    { id: 'literature', title: 'ادبیات فارسی طولانی تر' },
    { id: 'art', title: 'هنر' },
  ];

  const handleCardClick = (clickedId: string) => {
    if (!isDisabled) {
      // If the clicked card is already selected, deselect it. Otherwise, select it.
      onSelectCard(selectedCardId === clickedId ? null : clickedId);
    }
  };

  return (
    <div
      className={`
        flex flex-wrap gap-[12px]
        ${isDisabled ? 'opacity-60 pointer-events-none' : ''} // Visual feedback and prevent clicks
      `}
    >
      {cards.map((card) => (
        <TopicCard
          key={card.id}
          title={card.title}
          isSelected={selectedCardId === card.id} // Pass down the actual selected ID
          onClick={() => handleCardClick(card.id)}
          isDisabled={isDisabled}
        />
      ))}
    </div>
  );
};

export default TopicSelector;
```

================
FILE: src\student\components\tarkibKon\learnTopic\TopicSearchBox.tsx
================

```
import React from 'react';

interface TopicSearchBoxProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
}

const TopicSearchBox: React.FC<TopicSearchBoxProps> = ({ searchQuery, setSearchQuery }) => {
  return (
    <div className="mx-[16px] my-4 ">
      <div className="relative">
        <textarea
          rows={1}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder=" اینجا بنویس..."
          className="w-full bg-white text-[12px] border-borderColor-1 border-[2px] rounded-[24px] p-[16px] "
          style={{ direction: 'rtl' }}
        />
      </div>
    </div>
  );
};

export default TopicSearchBox;
```

================
FILE: src\student\components\tarkibKon\learnTopic\TopicCard.tsx
================

```
import React from "react";

interface TopicCardProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
  isDisabled?: boolean;
}

const TopicCard: React.FC<TopicCardProps> = ({ title, isSelected, onClick, isDisabled }) => {
  return (
    <div>
      <div
        className={`
          ${isSelected ? "onClickedButton-box transform translate-y-1" : "buttonClicked-box"}
          inline-block
          ${isDisabled ? 'pointer-events-none' : ''} // Prevent clicks when disabled
        `}
      >
        <div
          className={`
            py-[8px] px-[16px] rounded-[16px]
            ${isSelected ? "bg-backGroundCard" : "bg-white"}
            ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'} 
          `}
          onClick={onClick}
        >
          <div className="flex justify-start items-center">
            <h1 className="text-[14px] font-extrabold whitespace-nowrap">
              {title}
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TopicCard;
```

================
FILE: src\student\components\tarkibKon\learnTopic\Topic.tsx
================

```
import React, { useState } from "react";

import TopicSelector from "./TopicSelector";

const Topic = () => {
  const [textAreaContent, setTextAreaContent] = useState<string>("");
  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setTextAreaContent(value);
    // If user starts typing, unselect any card
    if (value.length > 0) {
      setSelectedCardId(null);
    }
  };

  const handleCardSelection = (id: string | null) => {
    setSelectedCardId(id);
    // If a card is selected, clear the textarea
    if (id !== null) {
      setTextAreaContent("");
    }
  };

  // Determine if textarea should be disabled
  const isTextAreaDisabled = selectedCardId !== null;
  // Determine if TopicSelector (cards) should be disabled
  const isTopicSelectorDisabled = textAreaContent.length > 0;

  return (
    <div className="flex justify-center bg-white  rounded-[24px] rounded-b-none p-[16px] flex-col pb-20">
      <textarea
        placeholder="اینجا بنویس ... "
        className="p-[16px] border-[2px] border-backGround-1 rounded-[16px] w-full text-[14px] resize-none overflow-hidden" // Added resize-none
        rows={1} // Made textarea smaller by setting rows
        value={textAreaContent}
        onChange={handleTextAreaChange}
        disabled={isTextAreaDisabled}
        style={isTextAreaDisabled ? { opacity: 0.6, cursor: 'not-allowed' } : {}} 
        
      />
      <h1 className="font-extrabold text-[14px] mt-[16px] mb-[12px]">
        موضوعات پیشنهادی
      </h1>
      <div className="flex flex-wrap gap-[12px]">
        <TopicSelector
          onSelectCard={handleCardSelection}
          selectedCardId={selectedCardId}
          isDisabled={isTopicSelectorDisabled}
        />
      </div>
    </div>
  );
};

export default Topic;
```

================
FILE: src\student\components\tarkibKon\learnTopic\MainContent.tsx
================

```
// src/student/pages/konjKav/topicSelection/MainContent.tsx
import React from 'react';
import { useDispatch } from 'react-redux';
import { activeButtonReducer, disableButtonReducer } from '../../../../slice/konjkavSlice';
import TopicSelector from './TopicSelector'

// This Topic interface isn't directly used by TopicSelector anymore,
// but it's good to keep if you plan to use these topics for filtering/search later.
interface Topic {
  id: string;
  title: string;
  description: string;
  emoji: string;
}

interface MainContentProps {
  onTopicSelect: (topicId: string | null) => void; // Now passes a single ID or null
  selectedTopicFromParent: string | null; // New prop to receive the currently selected topic
}

const MainContent: React.FC<MainContentProps> = ({ onTopicSelect, selectedTopicFromParent }) => {
  const dispatch = useDispatch();

 

  // handleTopicSelect now directly passes the selected ID to the parent via onTopicSelect
  const handleTopicSelect = (topicId: string | null) => {
    onTopicSelect(topicId); // Pass the ID directly to the parent
    
    // Logic for activating/deactivating button based on selection
    if (topicId) { // If something is selected
      dispatch(activeButtonReducer());
    } else { // If nothing is selected
      dispatch(disableButtonReducer());
    }
  };

  return (
    <div
      className='
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col 
      '
    >
      <TopicSelector
        onSelectCard={handleTopicSelect}
        selectedCardId={selectedTopicFromParent} // Pass the selected ID from parent to TopicSelector
        isDisabled={false} // Assuming TopicSelector itself is not disabled
      />
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\tarkibKon\learnTopic\HeroSection.tsx
================

```
import React from 'react';
import konjkav from './../../../../assets/images/konjkav.png';

const HeroSection = () => {
  return (
    <div className="flex justify-center items-center flex-col ">
      <img src={konjkav} className="w-[104px] h-[104px] mb-10 mt-5" />
      <h1 className="mb-10">لطفا موضوع مورد نظر را انتخاب کنید</h1>
    </div>
  );
};

export default HeroSection;

```

================
FILE: src\student\components\tarkibKon\favoriteTopic\TopicSelector.tsx
================

```
// src/student/pages/konjKav/topicSelection/TopicSelector.tsx
import React from 'react';
import TopicCard from './TopicCard'; // Assuming TopicCard is in the same directory

interface Card {
  id: string;
  title: string;
}

interface TopicSelectorProps {
  onSelectCard: (id: string | null) => void;
  selectedCardId: string | null; // This will now reflect the single selected card
  isDisabled: boolean;
}

const TopicSelector: React.FC<TopicSelectorProps> = ({ onSelectCard, selectedCardId, isDisabled }) => {
  const cards: Card[] = [
    { id: 'math', title: 'ریاضی' },
    { id: 'science', title: 'علوم' },
    { id: 'history', title: 'تاریخ' },
    { id: 'geography', title: 'جغرافیا' },
    { id: 'literature', title: 'ادبیات فارسی طولانی تر' },
    { id: 'art', title: 'هنر' },
  ];

  const handleCardClick = (clickedId: string) => {
    if (!isDisabled) {
      // If the clicked card is already selected, deselect it. Otherwise, select it.
      onSelectCard(selectedCardId === clickedId ? null : clickedId);
    }
  };

  return (
    <div
      className={`
        flex flex-wrap gap-[12px]
        ${isDisabled ? 'opacity-60 pointer-events-none' : ''} // Visual feedback and prevent clicks
      `}
    >
      {cards.map((card) => (
        <TopicCard
          key={card.id}
          title={card.title}
          isSelected={selectedCardId === card.id} // Pass down the actual selected ID
          onClick={() => handleCardClick(card.id)}
          isDisabled={isDisabled}
        />
      ))}
    </div>
  );
};

export default TopicSelector;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\TopicSearchBox.tsx
================

```
import React from 'react';

interface TopicSearchBoxProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
}

const TopicSearchBox: React.FC<TopicSearchBoxProps> = ({ searchQuery, setSearchQuery }) => {
  return (
    <div className="mx-[16px] my-4 ">
      <div className="relative">
        <textarea
          rows={1}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder=" اینجا بنویس..."
          className="w-full bg-white text-[12px] border-borderColor-1 border-[2px] rounded-[24px] p-[16px] "
          style={{ direction: 'rtl' }}
        />
      </div>
    </div>
  );
};

export default TopicSearchBox;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\TopicCard.tsx
================

```
import React from "react";

interface TopicCardProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
  isDisabled?: boolean;
}

const TopicCard: React.FC<TopicCardProps> = ({ title, isSelected, onClick, isDisabled }) => {
  return (
    <div>
      <div
        className={`
          ${isSelected ? "onClickedButton-box transform translate-y-1" : "buttonClicked-box"}
          inline-block
          ${isDisabled ? 'pointer-events-none' : ''} // Prevent clicks when disabled
        `}
      >
        <div
          className={`
            py-[8px] px-[16px] rounded-[16px]
            ${isSelected ? "bg-backGroundCard" : "bg-white"}
            ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'} 
          `}
          onClick={onClick}
        >
          <div className="flex justify-start items-center">
            <h1 className="text-[14px] font-extrabold whitespace-nowrap">
              {title}
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TopicCard;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\Topic.tsx
================

```
import React, { useState } from "react";

import TopicSelector from "./TopicSelector";

const Topic = () => {
  const [textAreaContent, setTextAreaContent] = useState<string>("");
  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setTextAreaContent(value);
    // If user starts typing, unselect any card
    if (value.length > 0) {
      setSelectedCardId(null);
    }
  };

  const handleCardSelection = (id: string | null) => {
    setSelectedCardId(id);
    // If a card is selected, clear the textarea
    if (id !== null) {
      setTextAreaContent("");
    }
  };

  // Determine if textarea should be disabled
  const isTextAreaDisabled = selectedCardId !== null;
  // Determine if TopicSelector (cards) should be disabled
  const isTopicSelectorDisabled = textAreaContent.length > 0;

  return (
    <div className="flex justify-center bg-white  rounded-[24px] rounded-b-none p-[16px] flex-col pb-20">
      <textarea
        placeholder="اینجا بنویس ... "
        className="p-[16px] border-[2px] border-backGround-1 rounded-[16px] w-full text-[14px] resize-none overflow-hidden" // Added resize-none
        rows={1} // Made textarea smaller by setting rows
        value={textAreaContent}
        onChange={handleTextAreaChange}
        disabled={isTextAreaDisabled}
        style={isTextAreaDisabled ? { opacity: 0.6, cursor: 'not-allowed' } : {}} 
        
      />
      <h1 className="font-extrabold text-[14px] mt-[16px] mb-[12px]">
        موضوعات پیشنهادی
      </h1>
      <div className="flex flex-wrap gap-[12px]">
        <TopicSelector
          onSelectCard={handleCardSelection}
          selectedCardId={selectedCardId}
          isDisabled={isTopicSelectorDisabled}
        />
      </div>
    </div>
  );
};

export default Topic;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\MainContent.tsx
================

```
// src/student/pages/konjKav/topicSelection/MainContent.tsx
import React from 'react';
import { useDispatch } from 'react-redux';
import { activeButtonReducer, disableButtonReducer } from '../../../../slice/konjkavSlice';
import TopicSelector from './TopicSelector'

// This Topic interface isn't directly used by TopicSelector anymore,
// but it's good to keep if you plan to use these topics for filtering/search later.
interface Topic {
  id: string;
  title: string;
  description: string;
  emoji: string;
}

interface MainContentProps {
  onTopicSelect: (topicId: string | null) => void; // Now passes a single ID or null
  selectedTopicFromParent: string | null; // New prop to receive the currently selected topic
}

const MainContent: React.FC<MainContentProps> = ({ onTopicSelect, selectedTopicFromParent }) => {
  const dispatch = useDispatch();

 

  // handleTopicSelect now directly passes the selected ID to the parent via onTopicSelect
  const handleTopicSelect = (topicId: string | null) => {
    onTopicSelect(topicId); // Pass the ID directly to the parent
    
    // Logic for activating/deactivating button based on selection
    if (topicId) { // If something is selected
      dispatch(activeButtonReducer());
    } else { // If nothing is selected
      dispatch(disableButtonReducer());
    }
  };

  return (
    <div
      className='
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col 
      '
    >
      <TopicSelector
        onSelectCard={handleTopicSelect}
        selectedCardId={selectedTopicFromParent} // Pass the selected ID from parent to TopicSelector
        isDisabled={false} // Assuming TopicSelector itself is not disabled
      />
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\tarkibKon\favoriteTopic\HeroSection.tsx
================

```
import React from 'react';
import konjkav from './../../../../assets/images/konjkav.png';

const HeroSection = () => {
  return (
    <div className="flex justify-center items-center flex-col ">
      <img src={konjkav} className="w-[104px] h-[104px] mb-10 mt-5" />
      <h1 className="mb-10">لطفا موضوع مورد نظر را انتخاب کنید</h1>
    </div>
  );
};

export default HeroSection;

```

================
FILE: src\student\components\konjKav\welcome\HeroSection.tsx
================

```
import happyFace from './../../../../assets/images/happyFace.png'

const HeroSection = () => {
  return (
    <div className='mb-[32px] pt-[16px]'>
        <div className='flex justify-center  p-4'>
        <img src={happyFace}/>
      </div>
      <p className='text-center font-extrabold'>به کنج‌کاو خوش آمدی!</p>
    </div>
  )
}

export default HeroSection
```

================
FILE: src\student\components\konjKav\welcome\CardSection.tsx
================

```
import React from 'react'
import { studyAssistantConstatnt } from '../../../../constants/studyAssistantConstant'


const CardSection:React.FC = () => {
  return (
  <div className='h-screen'>
   {studyAssistantConstatnt.map(study=>(
        <div className='card-box mb-[12px] gap-[12px] '>
        <div className=' flex justify-center flex-col bg-white rounded-[22px] gap-[8px] p-[16px] '>
            <div className='gap-[8px] flex items-center justify-start'>
               <img src={study.logo}/>
                <h1 className='font-extrabold text-[14px]'> {study.title}   </h1>

            </div>
             <div>
           <p className=' text-justify  text-[14px]'>{study.description}</p>
        </div>
            
        </div>
       
     </div>
  )
   )}
  </div>)
}

export default CardSection
```

================
FILE: src\student\components\konjKav\topicSelection\TopicSelector.tsx
================

```
// src/student/pages/konjKav/topicSelection/TopicSelector.tsx
import React from 'react';
import TopicCard from './TopicCard'; // Assuming TopicCard is in the same directory

interface Card {
  id: string;
  title: string;
}

interface TopicSelectorProps {
  onSelectCard: (id: string | null) => void;
  selectedCardId: string | null; // This will now reflect the single selected card
  isDisabled: boolean;
}

const TopicSelector: React.FC<TopicSelectorProps> = ({ onSelectCard, selectedCardId, isDisabled }) => {
  const cards: Card[] = [
    { id: 'math', title: 'ریاضی' },
    { id: 'science', title: 'علوم' },
    { id: 'history', title: 'تاریخ' },
    { id: 'geography', title: 'جغرافیا' },
    { id: 'literature', title: 'ادبیات فارسی طولانی تر' },
    { id: 'art', title: 'هنر' },
  ];

  const handleCardClick = (clickedId: string) => {
    if (!isDisabled) {
      // If the clicked card is already selected, deselect it. Otherwise, select it.
      onSelectCard(selectedCardId === clickedId ? null : clickedId);
    }
  };

  return (
    <div
      className={`
        flex flex-wrap gap-[12px]
        ${isDisabled ? 'opacity-60 pointer-events-none' : ''} // Visual feedback and prevent clicks
      `}
    >
      {cards.map((card) => (
        <TopicCard
          key={card.id}
          title={card.title}
          isSelected={selectedCardId === card.id} // Pass down the actual selected ID
          onClick={() => handleCardClick(card.id)}
          isDisabled={isDisabled}
        />
      ))}
    </div>
  );
};

export default TopicSelector;
```

================
FILE: src\student\components\konjKav\topicSelection\TopicSearchBox.tsx
================

```
import React from 'react';

interface TopicSearchBoxProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
}

const TopicSearchBox: React.FC<TopicSearchBoxProps> = ({ searchQuery, setSearchQuery }) => {
  return (
    <div className="mx-[16px] my-4 ">
      <div className="relative">
        <textarea
          rows={1}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder=" اینجا بنویس..."
          className="w-full bg-white text-[12px] border-borderColor-1 border-[2px] rounded-[24px] p-[16px] "
          style={{ direction: 'rtl' }}
        />
      </div>
    </div>
  );
};

export default TopicSearchBox;
```

================
FILE: src\student\components\konjKav\topicSelection\TopicCard.tsx
================

```
import React from "react";

interface TopicCardProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
  isDisabled?: boolean;
}

const TopicCard: React.FC<TopicCardProps> = ({ title, isSelected, onClick, isDisabled }) => {
  return (
    <div>
      <div
        className={`
          ${isSelected ? "onClickedButton-box transform translate-y-1" : "buttonClicked-box"}
          inline-block
          ${isDisabled ? 'pointer-events-none' : ''} // Prevent clicks when disabled
        `}
      >
        <div
          className={`
            py-[8px] px-[16px] rounded-[16px]
            ${isSelected ? "bg-backGroundCard" : "bg-white"}
            ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'} 
          `}
          onClick={onClick}
        >
          <div className="flex justify-start items-center">
            <h1 className="text-[14px] font-extrabold whitespace-nowrap">
              {title}
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TopicCard;
```

================
FILE: src\student\components\konjKav\topicSelection\Topic.tsx
================

```
import React, { useState } from "react";
import TopicCard from "./TopicCard"; // Make sure the path is correct
import TopicSelector from "./TopicSelector";

const Topic = () => {
  const [textAreaContent, setTextAreaContent] = useState<string>("");
  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

  const handleTextAreaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setTextAreaContent(value);
    // If user starts typing, unselect any card
    if (value.length > 0) {
      setSelectedCardId(null);
    }
  };

  const handleCardSelection = (id: string | null) => {
    setSelectedCardId(id);
    // If a card is selected, clear the textarea
    if (id !== null) {
      setTextAreaContent("");
    }
  };

  // Determine if textarea should be disabled
  const isTextAreaDisabled = selectedCardId !== null;
  // Determine if TopicSelector (cards) should be disabled
  const isTopicSelectorDisabled = textAreaContent.length > 0;

  return (
    <div className="flex justify-center bg-white  rounded-[24px] rounded-b-none p-[16px] flex-col pb-20">
      <textarea
        placeholder="اینجا بنویس ... "
        className="p-[16px] border-[2px] border-backGround-1 rounded-[16px] w-full text-[14px] resize-none overflow-hidden" // Added resize-none
        rows={1} // Made textarea smaller by setting rows
        value={textAreaContent}
        onChange={handleTextAreaChange}
        disabled={isTextAreaDisabled}
        style={isTextAreaDisabled ? { opacity: 0.6, cursor: 'not-allowed' } : {}} 
        
      />
      <h1 className="font-extrabold text-[14px] mt-[16px] mb-[12px]">
        موضوعات پیشنهادی
      </h1>
      <div className="flex flex-wrap gap-[12px]">
        <TopicSelector
          onSelectCard={handleCardSelection}
          selectedCardId={selectedCardId}
          isDisabled={isTopicSelectorDisabled}
        />
      </div>
    </div>
  );
};

export default Topic;
```

================
FILE: src\student\components\konjKav\topicSelection\MainContent.tsx
================

```
// src/student/pages/konjKav/topicSelection/MainContent.tsx
import React from 'react';
import { useDispatch } from 'react-redux';
import { activeButtonReducer, disableButtonReducer } from '../../../../slice/konjkavSlice';
import TopicSelector from './TopicSelector';

// This Topic interface isn't directly used by TopicSelector anymore,
// but it's good to keep if you plan to use these topics for filtering/search later.
interface Topic {
  id: string;
  title: string;
  description: string;
  emoji: string;
}

interface MainContentProps {
  onTopicSelect: (topicId: string | null) => void; // Now passes a single ID or null
  selectedTopicFromParent: string | null; // New prop to receive the currently selected topic
}

const MainContent: React.FC<MainContentProps> = ({ onTopicSelect, selectedTopicFromParent }) => {
  const dispatch = useDispatch();

 

  // handleTopicSelect now directly passes the selected ID to the parent via onTopicSelect
  const handleTopicSelect = (topicId: string | null) => {
    onTopicSelect(topicId); // Pass the ID directly to the parent
    
    // Logic for activating/deactivating button based on selection
    if (topicId) { // If something is selected
      dispatch(activeButtonReducer());
    } else { // If nothing is selected
      dispatch(disableButtonReducer());
    }
  };

  return (
    <div
      className='
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col 
      '
    >
      <TopicSelector
        onSelectCard={handleTopicSelect}
        selectedCardId={selectedTopicFromParent} // Pass the selected ID from parent to TopicSelector
        isDisabled={false} // Assuming TopicSelector itself is not disabled
      />
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\konjKav\topicSelection\HeroSection.tsx
================

```
import React from 'react';
import konjkav from './../../../../assets/images/konjkav.png';

const HeroSection = () => {
  return (
    <div className="flex justify-center items-center flex-col ">
      <img src={konjkav} className="w-[104px] h-[104px] mb-10 mt-5" />
      <h1 className="mb-10">لطفا موضوع مورد نظر را انتخاب کنید</h1>
    </div>
  );
};

export default HeroSection;

```

================
FILE: src\student\components\konjKav\studySelection\MainContent.tsx
================

```
import React from 'react';
import CardSelector from './CardSelector';

const MainContent: React.FC = () => {
  return (
    <div
      className='
        border-2 border-borderColor-1 bg-white rounded-[16px]
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col 
      '
    >
      <div> 
        <CardSelector />
      </div>
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\konjKav\studySelection\HeroSection.tsx
================

```
import React from 'react'
import konjkav from './../../../../assets/images/konjkav.png'

const HeroSection = () => {
  return (
    <div className='flex justify-center items-center flex-col '>
      <img src={konjkav} className='w-[104px] h-[104px] mb-10 mt-5'/>
      <h1 className='mb-10'>
        لطفا یکی از درس ها را انتخاب کنید
      </h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\konjKav\studySelection\CardSelector.tsx
================

```
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { setSelectedStudy } from '../../../../slice/konjkavSlice';
import CardContent from './CardContent';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

interface Subject {
  id: string;
  name: string;
}

const CardSelector: React.FC = () => {
  const navigate=useNavigate()
  const dispatch = useDispatch();
  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

  const { data: subjects, isLoading, isError } = useQuery<Subject[]>({
    queryKey: ['subjects'],
    queryFn: async () => {
      const response = await axios.get<Subject[]>(`https://kiddo2.pythonanywhere.com/api/v1/academics/subjects`);
      console.log(response)
      return response.data;
    },
  });

  // if(subjects?.status===401){
     
  //     // Navigate to login page if selections are missing
     
  //       navigate('/'); 
    
  // }

  const handleCardClick = (subject: Subject) => {
    if (selectedCardId === subject.id) {
      setSelectedCardId(null);
      dispatch(setSelectedStudy(null));
    } else {
      setSelectedCardId(subject.id);
      dispatch(setSelectedStudy(subject));
    }
  };

  if (isLoading) return <div>در حال بارگذاری دروس...</div>;
  if (isError) return <div>خطا در بارگذاری دروس.</div>;

  return (
    <div className="grid grid-cols-2 gap-[12px]">
      {subjects?.map((subject) => (
        <CardContent
          key={subject.id}
          title={subject.name}
          isSelected={selectedCardId === subject.id}
          onClick={() => handleCardClick(subject)}
        />
      ))}
    </div>
  );
};

export default CardSelector;
```

================
FILE: src\student\components\konjKav\studySelection\CardContent.tsx
================

```
import React, { useEffect } from "react";
import { useDispatch } from "react-redux";
import riazi from "./../../../../assets/images/riazi.png";
import { activeButtonReducer, disableButtonReducer } from "../../../../slice/konjkavSlice";

interface CardContentProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
}

const CardContent: React.FC<CardContentProps> = ({ title, isSelected, onClick }) => {
  const dispatch = useDispatch();

  useEffect(() => {
    if (isSelected) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [isSelected, dispatch]);

  return (
    <div className={`${isSelected ? `onClickedCard-box transform translate-y-1` : "card-box"}`}>
      <div
        className={`rounded-[22px] cursor-pointer transition-colors duration-200 flex flex-col overflow-hidden h-full ${isSelected ? `bg-backGroundCard` : "bg-white"}`}
        onClick={onClick}
      >
        <img
          src={riazi}
          className="w-full h-auto object-contain"
          alt={title}
        />
        <div className="p-4 text-center">
          <h1 className="text-sm font-semibold">{title}</h1>
        </div>
      </div>
    </div>
  );
};

export default CardContent;
```

================
FILE: src\student\components\konjKav\recentChat\RecentChat.tsx
================

```

```

================
FILE: src\student\components\darsYar\studySelection\MainContent.tsx
================

```
// MainContent.tsx
import React from 'react';
import CardSelector from './CardSelector'; // CardContent is not directly used here


const MainContent: React.FC = () => {
  return (
    <div
      className='
        border-2 border-borderColor-1 bg-white rounded-[16px]
        p-4 
        h-full w-full 
        overflow-y-auto 
        flex flex-col 
      '
    >
      {/* The `gap-[12px] pt-[16px] h-full` on the outer div were a bit ambiguous.
          Moved padding and adjusted gap/flex behavior here. */}
      <div> {/* This div acts as a wrapper for CardSelector */}
        <CardSelector />
      </div>
      
    </div>
  );
};

export default MainContent;
```

================
FILE: src\student\components\darsYar\studySelection\HeroSection.tsx
================

```
import React from 'react'
import darsYar from './../../../../assets/images/DarsYar.png'

const HeroSection = () => {
  return (
    <div className='flex justify-center items-center flex-col '>
      <img src={darsYar} className='w-[104px] h-[104px] mb-10 mt-5'/>
      <h1 className='mb-10'>
        لطفا یکی از درس ها را انتخاب کنید
      </h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\darsYar\studySelection\CardSelector.tsx
================

```
// CardSelector.tsx
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { setSelectedStudy, clearSelections } from '../../../../slice/darsyarSlice';
import CardContent from './CardContent';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

interface Card {
  id: string;
  name: string;
}

const CardSelector: React.FC = () => {

   const {
    data,
    isLoading,
    isError, 
    error,   
  } = useQuery<Card[]>({ 
    queryKey: ['classes'],
    queryFn: async () => { 
      const response = await axios.get<Card[]>(`https://kiddo2.pythonanywhere.com/api/v1/academics/subjects`);
      return response.data; 
    },
    });
   if (!isLoading){
     console.log(data)
   }
  const dispatch = useDispatch();
 

  const [selectedCardId, setSelectedCardId] = useState<string | null>(null);

  const handleCardClick = (clickedId: string, name: string) => {
    const newSelectedId = selectedCardId === clickedId ? null : clickedId;
    setSelectedCardId(newSelectedId);
    
    if (newSelectedId) {
      dispatch(setSelectedStudy({
        id: clickedId,
        name: name
      }));
    } else {
      // When deselecting, we set the study to null
      dispatch(clearSelections());
    }
  };

  return (
   (!isLoading) &&  <div className="grid grid-cols-2 gap-[12px]">
      {data?.map((card) => (
        <CardContent
          key={card.id}
          name={card.name}
          isSelected={selectedCardId === card.id}
          onClick={() => handleCardClick(card.id, card.name)}
        />
      ))}
    </div>
  );
};

export default CardSelector;
```

================
FILE: src\student\components\darsYar\studySelection\CardContent.tsx
================

```
// CardContent.tsx
import React, { useEffect } from "react"; // Import useEffect
import riazi from "./../../../../assets/images/riazi.png";
import { useDispatch } from "react-redux";
import { activeButtonReducer, disableButtonReducer } from "../../../../slice/darsyarSlice";

interface CardContentProps {
  name: string;
  isSelected: boolean;
  onClick: () => void;
}

const CardContent: React.FC<CardContentProps> = ({
  name,
  isSelected,
  onClick,
}) => {
  const dispatch = useDispatch();


  useEffect(() => {
    if (isSelected) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [isSelected, dispatch]); 

  return (
    <div className={`${isSelected ? `onClickedCard-box transform translate-y-1` : "card-box"}`}>
      {" "}
      <div
        className={`
          rounded-[22px] cursor-pointer
          transition-colors duration-200 
          flex flex-col 
          overflow-hidden 
          h-full 
          ${isSelected ? `bg-backGroundCard` : "bg-white"}
        `}
        onClick={onClick}
      >
        <img
          src={riazi}
          className=" w-full h-auto object-contain"
          alt={name}
        />

        <div
          className="
          p-4 sm:p-6 md:p-8 lg:p-10 xl:p-12 
          text-center flex flex-col justify-center items-center 
        "
        >
          <h1
            className="
            text-sm 
            font-semibold
            pb-0 mt-0 
          "
          >
            {name}
          </h1>
        </div>
      </div>
    </div>
  );
};

export default CardContent;
```

================
FILE: src\student\components\darsYar\studyAssistant\HeroSection.tsx
================

```

import kiddoFace from './../../../../assets/images/happyFace.png'




const HeroSection = () => {
  return (
    <div className='mb-[32px] pt-[16px]'>
        <div className='flex justify-center  p-4'>
        <img src={kiddoFace}/>
      </div>
      <p className='text-center font-extrabold'>به درس‌یار خوش آمدی!</p>
    </div>
  )
}

export default HeroSection
```

================
FILE: src\student\components\darsYar\studyAssistant\CardSection.tsx
================

```
import React from 'react'
import { studyAssistantConstatnt } from '../../../../constants/studyAssistantConstant'

const CardSection:React.FC = () => {
  return (
  <div className='h-screen'>
   {studyAssistantConstatnt.map((study,index)=>(
        <div className='card-box mb-[12px] gap-[12px] ' key={index}>
        <div className=' flex justify-center flex-col bg-white rounded-[22px] gap-[8px] p-[16px] '>
            <div className='gap-[8px] flex items-center justify-start'>
               <img src={study.logo}/>
                <h1 className='font-extrabold text-[14px]'> {study.title}   </h1>

            </div>
             <div>
           <p className=' text-justify  text-[14px]'>{study.description}</p>
        </div>
            
        </div>
       
     </div>
  )
   )}
  </div>)
}

export default CardSection
```

================
FILE: src\student\components\darsYar\lessonSelection\MainContent.tsx
================

```
// MainContent.tsx
import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { setSelectedLesson } from "../../../../slice/darsyarSlice";
import CardContent from "./CardContent";
import axios from "axios";
import { useQuery } from "@tanstack/react-query";

// Interface for the API response
interface LessonResponse {
  id: string;
  title: string;
}


const MainContent: React.FC = () => {
  const dispatch = useDispatch();
  const [selectedLessons, setSelectedLessons] = useState<string[]>([]);
  const subject = useSelector((state: any) => state.darsyar.selectedStudy?.id);
  console.log('Selected subject:', subject);
  console.log('Selected lessons:', selectedLessons);
   const {
    data,
    isLoading,
    isError, 
    error,   
  } = useQuery<LessonResponse[]>({ 
    queryKey: ['classes', subject],
    queryFn: async () => { 
      const response = await axios.get<LessonResponse[]>(`https://kiddo2.pythonanywhere.com/api/v1/academics/subjects/${subject}/chapters/`);
      return response.data; 
    },
    enabled: !!subject
    });
  


  const handleLessonSelect = (id: string) => {
    setSelectedLessons(prev => {
      const isSelected = prev.includes(id);
      const newSelection = isSelected 
        ? prev.filter(lessonId => lessonId !== id)
        : [...prev, id];
      
      // Update Redux state with selected lessons including both id and name
      const selectedLessonsData = newSelection
        .map(selectedId => data?.find(l => l.id === selectedId))
        .filter((lesson): lesson is LessonResponse => lesson !== undefined)
        .map(lesson => ({
          id: lesson.id,
          name: lesson.title
        }));
      
      dispatch(setSelectedLesson(selectedLessonsData));
      return newSelection;
    });
  };

  return (
    (!isLoading) && (
      <div className="border-borderColor-1 bg-white h-screen flex flex-col gap-[12px]">
        <div className="bg-white gap-[16px] mt-[16px] mx-[16px]">
          {data?.map((lesson) => (
            <CardContent
              key={lesson.id}
              title={lesson.title} // CardContent still expects title prop
              isSelected={selectedLessons.includes(lesson.id)}
              onClick={() => handleLessonSelect(lesson.id)}
            />
          ))}
        </div>
      </div>
    ) 
  );
};

export default MainContent;

```

================
FILE: src\student\components\darsYar\lessonSelection\HeroSection.tsx
================

```
import React from 'react'
import darsYar from './../../../../assets/images/DarsYar.png'

const HeroSection = () => {
  return (
    <div className='flex justify-center items-center flex-col gap-[32px] pt-[16px]'>
      <img src={darsYar} className='w-[104px] h-[104px]'/>
      <h1 className='mb-10 text-[16px] font-yekanBakhText'>
        لطفا یکی از درس ها را انتخاب کنید
      </h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\student\components\darsYar\lessonSelection\CardContent.tsx
================

```
import React, { useEffect, useState } from "react";
import { useDispatch } from "react-redux";
import { activeButtonReducer, disableButtonReducer } from "../../../../slice/darsyarSlice";

interface CardContentProps {
  title: string;
  isSelected: boolean;
  onClick: () => void;
}

const CardContent: React.FC<CardContentProps> = ({ title, isSelected, onClick }) => {
  const dispatch = useDispatch();
  const [isClicked, setIsClicked] = useState(false);
  
 

  const handleClick = () => {
    onClick();
    setIsClicked(!isClicked); // Toggles the state
  };

  useEffect(() => {
    if (isClicked) {
      dispatch(activeButtonReducer());
    } else {
      dispatch(disableButtonReducer());
    }
  }, [isClicked, dispatch]); 

  return (
    // Changed m-2 to mb-[16px] for a bottom margin of 16px
    <div className="flex flex-col justify-center mb-[12px] ">
      <div
        className={` ${
          isClicked ? "onClickedButton-box transform translate-y-1" : "buttonClicked-box"
        }  `}
      >
        <div
          className={`gap-[8px] p-[16px] rounded-[16px] cursor-pointer ${
            isClicked ? "bg-backGroundCard" : "bg-white"
          }`}
          onClick={handleClick}
        >
          <div className="flex justify-start items-center ">
            <h1 className="text-[14px] font-extrabold">{title}</h1>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CardContent;

```

================
FILE: src\student\components\darsYar\chatWithBot\LessonInformation.tsx
================

```
// src/student/components/darsYar/chatWithBot/LessonInformation.tsx
import React from "react";

interface LessonInformationProps {
  study: string;
  lesson: string;
}

const LessonInformation: React.FC<LessonInformationProps> = ({ study, lesson }) => {
  return (
    <div className="flex justify-between items-center py-[8px] infoGradient px-[16px] fixed w-full top-[52px] z-40">
      <div>
        <h1 className="text-[14px]">پاسخ گویی با توجه به کتاب {study}</h1>
      </div>
      <div className="bg-white rounded-[16px] px-[16px] py-[4px]">
        <h1 className="text-[14px] font-extrabold">{lesson}</h1>
      </div>
    </div>
  );
};

export default LessonInformation;
```

================
FILE: src\student\components\darsYar\chatWithBot\HeroSection.tsx
================

```
import React from 'react'
import happyFace from './../../../../assets/images/happyFace.png'

const HeroSection = () => {
  return (
    <div className='flex justify-center h-screen items-center flex-col'>
      <img src={happyFace} className='mb-[32px]'/>
      <h1 className='text-[16px] font-extrabold'>چطور میتونم کمکتون کنم</h1>
    </div>
  )
}

export default HeroSection

```

================
FILE: src\teacher\components\contentContainer\reports\modals\ToolsModal.tsx
================

```
// src/components/ToolsModal/ToolsModal.tsx
import React, { useState } from 'react';

import Tools from './Tools';
import ChatButton from '../../../../../components/common/ChatButton';
import Modal from '../../Modal';

interface StudentModalProps {
  isModalOpen: boolean;
  handleCloseModal: () => void;
}

const ToolsModal: React.FC<StudentModalProps> = ({ isModalOpen, handleCloseModal }) => {
  const [activeTool, setActiveTool] = useState<string | null>(null); // State to hold the name of the active tool

  const handleToolClick = (toolName: string) => {
    setActiveTool(prevActiveTool =>
      prevActiveTool === toolName ? null : toolName
    );
  };

  const toolsList = [
    { name: "همه ابزار ها" },
    { name: "ابزار A" },
    { name: "ابزار B" },
    { name: "ابزار C" },
    { name: "ابزار D" },
  ];

  return (
    <div>
      <Modal isOpen={isModalOpen} onClose={handleCloseModal} title="لطفا ابزار مورد نظر را انتخاب نمایید">
        {toolsList.map((tool) => (
          <Tools
            key={tool.name} // Important for lists in React
            name={tool.name}
            isActive={activeTool === tool.name}
            onClick={handleToolClick}
          />
        ))}

         <div onClick={handleCloseModal}>
          <ChatButton textButton={'تایید'} />
        </div>
      </Modal>
    </div>
  );
}

export default ToolsModal;
```

================
FILE: src\teacher\components\contentContainer\reports\modals\Tools.tsx
================

```
// src/components/ToolsModal/Tools.tsx
import React from 'react';

interface ToolsProps {
  name: string; // Add a name prop to identify each tool
  isActive: boolean;
  onClick: (name: string) => void;
}

const Tools: React.FC<ToolsProps> = ({ name, isActive, onClick }) => {
console.log(isActive)
  const handleClick = () => {
    onClick(name);
  };

  return (
    <div className='mb-[12px] ' onClick={handleClick}>
      <div className={` ${isActive ? 'onClickedButton-box transform translate-y-1' : 'buttonClicked-box'}  `}> {/* Added a class for active state */}
        <div className={`${isActive ? 'bg-backGroundCard' : 'bg-white'} flex justify-start items-center  rounded-[16px] p-[16px] gap-[16px] pl-[24px]`}>
          <h1>{name}</h1> 
        </div>
      </div>
    </div>
  );
};

export default Tools;
```

================
FILE: src\teacher\components\contentContainer\reports\modals\StudentModal.tsx
================

```
import React from 'react'
import Modal from '../../Modal';
import ChatButton from '../../../../../components/common/ChatButton';
interface StudentModalProps {
  isModalOpen: boolean;
  handleCloseModal: () => void;
}

const StudentModal:React.FC<StudentModalProps> = ({isModalOpen,handleCloseModal}) => {
  return (
    <div >
      <Modal isOpen={isModalOpen} onClose={handleCloseModal} title="">
       <div className='flex flex-col justify-center items-center gap-[8px] '>
        <img src={''}/>
        <h1>نرگس شریفی</h1>
        <div className='flex justify-between'>
          <p className=' bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'>22 دانش آموز</p>
          <p className=' bg-backGround-1 gap-[8px] px-[8px] rounded-[16px] text-[10px] py-[2px]'>22 دانش آموز</p>
        </div>
        <h1>به شدت نگران وضع سلامتی پدرش است و نیاز به کمک دارد</h1>
        <div>
          <h1>توضیحات</h1>
          <p>یسبمنتیس خمنبتمه تخم لتخمئل خمقئف ئقفح نلبمخنخمبلئا خقفبت اخثتخشتلختیخ تخسیتلسخکت لخفتخستخلیفتخهلاتبخاتبلخما تئثخمتخاهصقتاکفقتا خمیبزتاخقیتختخ تخ تقخ تقافخ تخقف تاخق ت</p>
        </div>
       </div>
        
       <div onClick={handleCloseModal}>
          <ChatButton textButton={'مشاهده چت'} />
        </div>
      </Modal>
    </div>
  )
}

export default StudentModal

```

================
FILE: src\teacher\components\contentContainer\reports\modals\Lessons.tsx
================

```
// src/components/ToolsModal/Tools.tsx
import React from 'react';

interface ToolsProps {
  name: string; // Add a name prop to identify each tool
  isActive: boolean;
  onClick: (name: string) => void;
}

const Tools: React.FC<ToolsProps> = ({ name, isActive, onClick }) => {
console.log(isActive)
  const handleClick = () => {
    onClick(name);
  };

  return (
   <div >
     <div className='mb-[12px] ' onClick={handleClick}>
      <div className={` ${isActive ? 'onClickedButton-box transform translate-y-1' : 'buttonClicked-box'}  `}> {/* Added a class for active state */}
        <div className={`${isActive ? 'bg-backGroundCard' : 'bg-white'} flex justify-start items-center  rounded-[16px] p-[16px] gap-[16px] pl-[24px]`}>
          <h1>{name}</h1> 
        </div>
      </div>
    </div>
  
   </div>
  )
};

export default Tools;
```

================
FILE: src\teacher\components\contentContainer\reports\modals\LessonModal.tsx
================

```
// src/components/ToolsModal/ToolsModal.tsx
import React, { useState } from 'react';
import Modal from '../../Modal';
import Tools from './Tools';
import ChatButton from '../../../../../components/common/ChatButton';

interface StudentModalProps {
  isModalOpen: boolean;
  handleCloseModal: () => void;
}

const ToolsModal: React.FC<StudentModalProps> = ({ isModalOpen, handleCloseModal }) => {
  const [activeTool, setActiveTool] = useState<string | null>(null);
  console.log("Current Active Tool:", activeTool); // More descriptive console log

  const handleToolClick = (toolName: string) => {
    // If the clicked tool is already active, deactivate it (set to null)
    // Otherwise, set the clicked tool as the new active tool
    setActiveTool(prevActiveTool =>
      prevActiveTool === toolName ? null : toolName
    );
    console.log("Clicked Tool:", toolName); // More descriptive console log
  };

  const toolsList = [
    { name: "ابزار A" },
    { name: "ابزار B" },
    { name: "ابزار C" },
    { name: "ابزار D" },
  ];

  const allToolsOptionName = "همه درس ها";

  return (
    <div >
      <Modal isOpen={isModalOpen} onClose={handleCloseModal} title="لطفا درس مورد نظر را انتخاب نمایید">

        
       <div className='pb-35'>
         <div
          className='mb-[12px] cursor-pointer '
          onClick={() => handleToolClick(allToolsOptionName)}
        >
          <div className={`
            ${activeTool === allToolsOptionName ? 'onClickedButton-box transform translate-y-1' : 'buttonClicked-box'}
          `}>
            <div className={`
              flex justify-start items-center rounded-[16px] p-[16px] gap-[16px] pl-[24px]
              ${activeTool === allToolsOptionName ? 'bg-backGroundCard' : 'bg-white'}
            `}>
              <h1>همه درس</h1>
            </div>
          </div>
        </div>

        {/* Grid for other tools */}
        <div className='grid grid-cols-2'>
          {toolsList.map((tool) => (
            <Tools
              key={tool.name}
              name={tool.name}
              isActive={activeTool === tool.name}
              onClick={handleToolClick}
            />
          ))}
        </div>

        <div onClick={handleCloseModal}>
          <ChatButton textButton={'تایید'} />
        </div>
       </div>
      </Modal>
    </div>
  );
};

export default ToolsModal;
```

